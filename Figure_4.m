%% load data 
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\Functions\umapFileExchange (1.2.1)\umap\umap.jar');


%% Data description

% LinearIndex: Indicator to which condition each cell (i.e. row) belongs; Individual numbers denote replicates %
% 1,2,3,11,21,22,23,24,25,26,27,28,29,30 - 100ng/ml EGF
% 4,5,6 - 25ng/ml EGF
% 7,8,9 - 10ng/ml EGF
% 10,19,20 - 6.25ng/ml EGF
% 16,17,18 - 1ng/ml EGF
% 13,14,15 - 0ng/ml EGF
% 11,12,21,22,23,24,25,26,27,28,29,30 - 100ng/ml control for intensity decay and secondary antibody only controls after elution (see Gut et al. for details): 11: Cycle 1, 12: Cycle 2 etc... 30 always secondary only. Starting at 11... etc again when 29 was reached

% FeatureHeader: Descriptor of which cellular state feature (column) is represented in the corresponding double matrices %
% FeatureData: Contains raw (and transformed, see material and methods) single cell cellular state feature data; columns correspoding to cellular state features described in "FeatureHeader" %
% FeatureZData: Contains the z-scored (see material and methods) single cell cellular state feature data; columns corresponding to cellular state features described in "FeatureHeader" %

% MetaHeader: Descriptor of which MetaData (e.g. CentroidLocation in image, or which field in an image) is represented in the corresponding double matrices %
% MetaData: Contains single cell information on the Metadata; columns corresponding to information described in "MetaHeader"

% ResponseHeader: Descriptor of which response (column) is represented in the corresponding double matrices %
% ResponseData: Contains raw single cell data; columns corresponding to response features described in "ResponseHeader" %
% LogResponseData: Contains transformed (see material and methods) single cell data; columns corresponding to response features described in "ResponseHeader" %

% PCCoeff: Contains the loadings of each principal component from principal component analysis on cellular state features (FeatureZData)
% PCFeatureData: Contains single cell data of cellular state features (from FeatureZData) transformed to PCs). Only the PCs which together explain 97.5% of the variance are kept (hence only 157)

% MSTData: Relic from the past; not used in the paper %
% MSTHeader: Relic from the past; not used in the paper %

% WeightedClusterData: Data from PCFeatureData weighted as described in material and methods and used as input for fuzzy clustering. Columns correspond to the PCs used; further described in script for Figure 3; Only clustered on cells belong to LinearIndex 1,2,3,4,5,6,7,8,9,10,13,14,15 and 20 %
% ClusterCentor: Centroid locations for the individual cluster centers obtained from fuzzy clustering on cellular state features %
% MembershipData: Contains the Membership degree (Fuzzy clustering outputs degrees of membership, no clear assignement) for each single cell)

%% Figure 4A 

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

% RdBu CMAP

NaNCells = ~isnan(max(MembershipData,[],2));

CleanMembershipData = MembershipData(NaNCells,:);
CleanResponseData = LogResponseData(NaNCells,:);
CleanLinearIndex = LinearIndex(NaNCells,:);
CleanFeatureData = FeatureZData(NaNCells,:);

% Find Cells with at least 0.5

[~,MaxMember] = max(CleanMembershipData,[],2);


Wells = [1,2,3];

WellIndex = find(ismember(CleanLinearIndex,Wells));

figure
scatter(zscore(CleanResponseData(WellIndex,108)),zscore(CleanResponseData(WellIndex,3)),4,CleanFeatureData(WellIndex,111),'filled','MarkerEdgeColor','none');
xlim([-4 4])
ylim([-4 4])

CMAP = flipud(brewermap(500,'RdBu'));
colormap(CMAP)
caxis([-2 2])
axis square

figure
scatter(zscore(CleanResponseData(WellIndex,108)),zscore(CleanResponseData(WellIndex,3)),4,CleanFeatureData(WellIndex,125),'filled','MarkerEdgeColor','none');
xlim([-4 4])
ylim([-4 4])

CMAP = flipud(brewermap(500,'RdBu'));
colormap(CMAP)
caxis([-2 2])
axis square

% PlasmaCMAP


% NaNCells = ~isnan(max(MembershipData,[],2));
% 
% CleanMembershipData = MembershipData(NaNCells,:);
% CleanResponseData = LogResponseData(NaNCells,:);
% CleanLinearIndex = LinearIndex(NaNCells,:);
% CleanFeatureData = FeatureData(NaNCells,:);
% 
% % Find Cells with at least 0.5
% 
% [~,MaxMember] = max(CleanMembershipData,[],2);
% 
% 
% Wells = [1,2,3];
% 
% WellIndex = find(ismember(CleanLinearIndex,Wells));
% RandomShuffle = randperm(numel(WellIndex),numel(WellIndex));
% WellIndex = WellIndex(RandomShuffle);
% 
% figure
% scatter(zscore(CleanResponseData(WellIndex,108)),zscore(CleanResponseData(WellIndex,3)),4,CleanFeatureData(WellIndex,111),'filled','MarkerEdgeColor','none');
% xlim([-4 4])
% ylim([-4 4])
% 
% CMAP = magmaColorMap(:,1:3);
% colormap(CMAP)
% caxis([8 10])
% axis square

% ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\ERK_pMTOR_Sec13_MagmaCMAP.jpg'];
% export_fig(ExportPath,'-r1200','-transparent')

% figure
% scatter(zscore(CleanResponseData(WellIndex,108)),zscore(CleanResponseData(WellIndex,3)),4,CleanFeatureData(WellIndex,125),'filled','MarkerEdgeColor','none');
% xlim([-4 4])
% ylim([-4 4])
% 
% CMAP = magmaColorMap(:,1:3);
% colormap(CMAP)
% caxis([7.5 9.5])
% axis square

% ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\ERK_pMTOR_HSP60_MagmaCMAP.jpg'];
% export_fig(ExportPath,'-r1200','-transparent')

% % PID % %

% Discretize Feature Data

% Discretize Response Data Individually....

DiscretizedLogResponse = zeros(size(LogResponseData));
DiscretizedResponseData = zeros(size(ResponseData));

for CurrentWell = 1:30
    for CurrentResponse = 1:size(LogResponseData,2)
        WellIndex = find(ismember(LinearIndex,CurrentWell));
        CurrentData = LogResponseData(WellIndex,CurrentResponse);
        LowerBound = prctile(CurrentData,0.25);
        UpperBound = prctile(CurrentData,99.75);
        Edges = linspace(LowerBound,UpperBound,101);
        [Y,~] = discretize(CurrentData,Edges);
        NaNValues = find(isnan(Y));
        NaNResponseValues = CurrentData(NaNValues,:);
        LowerValues = find(NaNResponseValues < LowerBound);
        UpperValues = find(NaNResponseValues > UpperBound);
        NaNResponseValues(LowerValues,:) = 1;
        NaNResponseValues(UpperValues,:) = 100;
        Y(NaNValues,:) = NaNResponseValues;
        DiscretizedLogResponse(WellIndex,CurrentResponse) = Y;
        
        CurrentData = ResponseData(WellIndex,CurrentResponse);
        LowerBound = prctile(CurrentData,0.25);
        UpperBound = prctile(CurrentData,99.75);
        Edges = linspace(LowerBound,UpperBound,101);
        [Y,~] = discretize(CurrentData,Edges);
        NaNValues = find(isnan(Y));
        NaNResponseValues = CurrentData(NaNValues,:);
        LowerValues = find(NaNResponseValues < LowerBound);
        UpperValues = find(NaNResponseValues > UpperBound);
        NaNResponseValues(LowerValues,:) = 1;
        NaNResponseValues(UpperValues,:) = 100;
        Y(NaNValues,:) = NaNResponseValues;
        DiscretizedResponseData(WellIndex,CurrentResponse) = Y;
    
    
    end
end

clear LogResponseData
clear ResponseData

% Discretize Feature Data Individually....

DiscretizedFeatureZData = zeros(size(FeatureZData));

for CurrentWell = 1:30
    for CurrentResponse = 1:size(FeatureZData,2)
        WellIndex = find(ismember(LinearIndex,CurrentWell));
        CurrentData = FeatureZData(WellIndex,CurrentResponse);
        LowerBound = prctile(CurrentData,0.25);
        UpperBound = prctile(CurrentData,99.75);
        Edges = linspace(LowerBound,UpperBound,101);
        [Y,~] = discretize(CurrentData,Edges);
        NaNValues = find(isnan(Y));
        NaNResponseValues = CurrentData(NaNValues,:);
        LowerValues = find(NaNResponseValues < LowerBound);
        UpperValues = find(NaNResponseValues > UpperBound);
        NaNResponseValues(LowerValues,:) = 1;
        NaNResponseValues(UpperValues,:) = 100;
        Y(NaNValues,:) = NaNResponseValues;
        DiscretizedFeatureZData(WellIndex,CurrentResponse) = Y;
        
    
    
    end
end

clear FeatureZData


% Discretize Feature Data Individually....

DiscretizedFeatureData = zeros(size(FeatureData));


for CurrentWell = 1:30
    for CurrentResponse = 1:size(FeatureData,2)

        WellIndex = find(ismember(LinearIndex,CurrentWell));
        CurrentData = FeatureData(WellIndex,CurrentResponse);
        LowerBound = prctile(CurrentData,0.25);
        UpperBound = prctile(CurrentData,99.75);
        Edges = linspace(LowerBound,UpperBound,101);
        [Y,~] = discretize(CurrentData,Edges);
        NaNValues = find(isnan(Y));
        NaNResponseValues = CurrentData(NaNValues,:);
        LowerValues = find(NaNResponseValues < LowerBound);
        UpperValues = find(NaNResponseValues > UpperBound);
        NaNResponseValues(LowerValues,:) = 1;
        NaNResponseValues(UpperValues,:) = 100;
        Y(NaNValues,:) = NaNResponseValues;
        DiscretizedFeatureData(WellIndex,CurrentResponse) = Y;
    
    
    end
end

clear FeatureData


% Discretize PC Feature data Individually 

DiscretizedPCFeatureData = zeros(size(PCFeatureData));


for CurrentWell = 1:30
    for CurrentResponse = 1:size(PCFeatureData,2)
        WellIndex = find(ismember(LinearIndex,CurrentWell));
        CurrentData = PCFeatureData(WellIndex,CurrentResponse);
        LowerBound = prctile(CurrentData,0.25);
        UpperBound = prctile(CurrentData,99.75);
        Edges = linspace(LowerBound,UpperBound,101);
        [Y,~] = discretize(CurrentData,Edges);
        NaNValues = find(isnan(Y));
        NaNResponseValues = CurrentData(NaNValues,:);
        LowerValues = find(NaNResponseValues < LowerBound);
        UpperValues = find(NaNResponseValues > UpperBound);
        NaNResponseValues(LowerValues,:) = 1;
        NaNResponseValues(UpperValues,:) = 100;
        Y(NaNValues,:) = NaNResponseValues;
        DiscretizedPCFeatureData(WellIndex,CurrentResponse) = Y;
  
    end
end

clear PCFeatureData

% Sec13

Redundant = zeros(3,1);
UniqueA = zeros(3,1);
UniqueB = zeros(3,1);
Synergy = zeros(3,1);

CurrentFeature = 111;


for CurrentWell = 1:3
    WellIndex = find(ismember(LinearIndex,CurrentWell));

    CalculationMatrix = quickPID(DiscretizedFeatureZData(WellIndex,CurrentFeature)',DiscretizedLogResponse(WellIndex,108)',DiscretizedLogResponse(WellIndex,3)','nBins',18);
    Redundant(CurrentWell,1) = CalculationMatrix(1);
    UniqueA(CurrentWell,1) = CalculationMatrix(2);
    UniqueB(CurrentWell,1) = CalculationMatrix(3);
    Synergy(CurrentWell,1) = CalculationMatrix(4);

end

PlotMean = [mean(Redundant),mean(UniqueA),mean(UniqueB),mean(Synergy)];
PlotError = [std(Redundant),std(UniqueA),std(UniqueB),std(Synergy)];
X = [1,2,3,4];

figure
bar(X,PlotMean)                

hold on

er = errorbar(X,PlotMean,[0,0,0,0],PlotError);    
er.Color = [0 0 0];                            
er.LineStyle = 'none';  

hold off
xlim([0.4 4.6])

% Path = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\','ERKMTOR_Sec13.pdf'];
% export_fig(Path,'-painters')



% HSP60

Redundant = zeros(3,1);
UniqueA = zeros(3,1);
UniqueB = zeros(3,1);
Synergy = zeros(3,1);

CurrentFeature = 125;
for CurrentWell = 1:3
    WellIndex = find(ismember(LinearIndex,CurrentWell));

    CalculationMatrix = quickPID(DiscretizedFeatureZData(WellIndex,CurrentFeature)',DiscretizedLogResponse(WellIndex,108)',DiscretizedLogResponse(WellIndex,3)','nBins',18);
    Redundant(CurrentWell,1) = CalculationMatrix(1);
    UniqueA(CurrentWell,1) = CalculationMatrix(2);
    UniqueB(CurrentWell,1) = CalculationMatrix(3);
    Synergy(CurrentWell,1) = CalculationMatrix(4);

end

PlotMean = [mean(Redundant),mean(UniqueA),mean(UniqueB),mean(Synergy)];
PlotError = [std(Redundant),std(UniqueA),std(UniqueB),std(Synergy)];
X = [1,2,3,4];

figure
bar(X,PlotMean)                

hold on

er = errorbar(X,PlotMean,[0,0,0,0],PlotError);    
er.Color = [0 0 0];                            
er.LineStyle = 'none';  

hold off
xlim([0.4 4.6])

% Path = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\','ERKMTOR_HSP60.pdf'];
% export_fig(Path,'-painters')

%% Figure 4B 

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')


% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following


FeatureIndex = [1291:1300,1,14,15,20,87,91,95,98,101,108,111,115,119,121,125,129,130,133,146,148,154,158,625,626,628,629,630,631,632,633,634,635,636,637,638,639];

FeatureNames = cell(size(FeatureIndex,1),1);

for CurrentName = 1:size(FeatureIndex,1)
    FeatureNames{CurrentName,1} = FeatureHeader{FeatureIndex(CurrentName,1),1};   
end

WellCell = {[3,2,1],[4,5,6],[7,8,9],[10,19,20],[13,14,15]};
ResponseStain = [18,168,3,123,153,108,33,91,61,78];

ManualFeatureNames = {'# Neighbors','% Touching','LCD1','LCD2','LCD3','LCD4','LCC','SingleCellInd','EdgeIndicator','DistanceToEdge','Area Nucleus','Area Cell','Perimeter Cell','Cell Roundness','Int. Paxillin','Int. GM130','Int. Actin','Int. EEA1','Int. ERGIC53',...
    'Int. Calreticulin','Int. Sec13','Int. ABCD3','Int. Dynamin','Int. Yap1','Int. HSP60', 'Int. CyclinB','Int. PCNA','Int. pPolII','Int. VPS35','Int. pRB','Int. Tubulin',...
    'Int. DDX6','Tex. PCNA','Tex. pPolII','Tex. Paxillin','Tex. GM130','Tex. Actin','Tex. EEA1','Tex. ERGIC53','Tex. Calreticulin','Tex. Sec13',...
    'Tex. ABCD3','Tex. HSP60','Tex. VPS35','Tex. Tubulin','Tex. DDX6'};

TextMatrix = {'pEGFR','pMEK','pERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6'};
ConcentrationCell = {'100ng','25ng','10ng','6.25ng','0ng'};

FullCorrelationStorageCoef = zeros(size(FeatureIndex,2),size(ResponseStain,2),size(WellCell,2));
FullCorrelationStoragePartial = zeros(size(FeatureIndex,2),size(ResponseStain,2),size(WellCell,2));
for CurrentWellCell = 1:size(WellCell,2)
    
    
    CurrentWell = WellCell{1,CurrentWellCell};
    WellIndex = find(ismember(LinearIndex,CurrentWell));
    
    CurrentFeatures = FeatureZData(WellIndex,FeatureIndex);
    CurrentResponses = zscore(LogResponseData(WellIndex,ResponseStain));
    
    CorrelationStorage = zeros(size(CurrentFeatures,2),size(CurrentResponses,2));
    
    for CurrentStain = 1:size(CurrentResponses,2)
    
    WellResponseData = CurrentResponses(:,CurrentStain);
    MDL1 = cvglmnet(CurrentFeatures,WellResponseData);
    Coefficients = cvglmnetCoef(MDL1);
    Coefficients(1) = [];
    CorrelationStorage(:,CurrentStain) = Coefficients;
    
    end
    
    FullCorrelationStorageCoef(:,:,CurrentWellCell) = CorrelationStorage;
    
    CorrelationStorage = zeros(size(CurrentFeatures,2),size(CurrentResponses,2));
    for CurrentStain = 1:size(CurrentResponses,2)
        DifferenceResponse = setdiff(1:size(CurrentResponses,2),CurrentStain);
        PartialCorrelation = partialcorr(CurrentFeatures,CurrentResponses(:,CurrentStain),CurrentResponses(:,DifferenceResponse));
        CorrelationStorage(:,CurrentStain) = PartialCorrelation;
    end
    
    FullCorrelationStoragePartial(:,:,CurrentWellCell) = CorrelationStorage;
    
end

CorrelationStorageCoef = mean(FullCorrelationStorageCoef,3);
CorrelationStoragePartial = mean(FullCorrelationStoragePartial,3);

%Pcolor

for CurrentWell = 1:5
    
    CurrentCorr = FullCorrelationStoragePartial(:,:,CurrentWell);
    FlippedCorr = flipud(CurrentCorr');
    PlotCorr = [FlippedCorr;zeros(1,46)];
    PlotCorr = [PlotCorr,zeros(11,1,1)];
    MaxRow = max(PlotCorr,[],2);
    MinRow = min(PlotCorr,[],2);
    
    for CurrentStain = 1:11
        CurrentCorr = PlotCorr(CurrentStain,:);
        Positive = find(CurrentCorr > 0);
        CurrentCorr(Positive) = CurrentCorr(Positive)./MaxRow(CurrentStain);
        Negative = find(CurrentCorr < 0);
        CurrentCorr(Negative) = CurrentCorr(Negative)./abs(MinRow(CurrentStain));
        PlotCorr(CurrentStain,:) = CurrentCorr;
        
    end
    
    
    figure
    pcolor(PlotCorr)
    axis image
    caxis([-1 1])
    colormap(flipud(brewermap(500,'RdBu')))
    yticks([1.5:10.5]);
    yticklabels(fliplr(TextMatrix));
    xticks([1.5:47.5])
    xticklabels(ManualFeatureNames);
    xtickangle(90)
    title(['Partial Max Normed per Sign ',ConcentrationCell{1,CurrentWell}])
    colorbar
    
    
end


%% Figure 4C

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat');

% % Full PID %% 

% Discretize Response Data Individually....

% DiscretizedLogResponse = zeros(size(LogResponseData));
% DiscretizedResponseData = zeros(size(ResponseData));
% 
% for CurrentWell = 1:30
%     for CurrentResponse = 1:size(LogResponseData,2)
%         WellIndex = find(ismember(LinearIndex,CurrentWell));
%         CurrentData = LogResponseData(WellIndex,CurrentResponse);
%         LowerBound = prctile(CurrentData,0.25);
%         UpperBound = prctile(CurrentData,99.75);
%         Edges = linspace(LowerBound,UpperBound,101);
%         [Y,~] = discretize(CurrentData,Edges);
%         NaNValues = find(isnan(Y));
%         NaNResponseValues = CurrentData(NaNValues,:);
%         LowerValues = find(NaNResponseValues < LowerBound);
%         UpperValues = find(NaNResponseValues > UpperBound);
%         NaNResponseValues(LowerValues,:) = 1;
%         NaNResponseValues(UpperValues,:) = 100;
%         Y(NaNValues,:) = NaNResponseValues;
%         DiscretizedLogResponse(WellIndex,CurrentResponse) = Y;
%         
%         CurrentData = ResponseData(WellIndex,CurrentResponse);
%         LowerBound = prctile(CurrentData,0.25);
%         UpperBound = prctile(CurrentData,99.75);
%         Edges = linspace(LowerBound,UpperBound,101);
%         [Y,~] = discretize(CurrentData,Edges);
%         NaNValues = find(isnan(Y));
%         NaNResponseValues = CurrentData(NaNValues,:);
%         LowerValues = find(NaNResponseValues < LowerBound);
%         UpperValues = find(NaNResponseValues > UpperBound);
%         NaNResponseValues(LowerValues,:) = 1;
%         NaNResponseValues(UpperValues,:) = 100;
%         Y(NaNValues,:) = NaNResponseValues;
%         DiscretizedResponseData(WellIndex,CurrentResponse) = Y;
%     
%     
%     end
% end
% 
% clear LogResponseData
% clear ResponseData
% 
% % Discretize Feature Data Individually....
% 
% DiscretizedFeatureZData = zeros(size(FeatureZData));
% 
% for CurrentWell = 1:30
%     for CurrentResponse = 1:size(FeatureZData,2)
%         WellIndex = find(ismember(LinearIndex,CurrentWell));
%         CurrentData = FeatureZData(WellIndex,CurrentResponse);
%         LowerBound = prctile(CurrentData,0.25);
%         UpperBound = prctile(CurrentData,99.75);
%         Edges = linspace(LowerBound,UpperBound,101);
%         [Y,~] = discretize(CurrentData,Edges);
%         NaNValues = find(isnan(Y));
%         NaNResponseValues = CurrentData(NaNValues,:);
%         LowerValues = find(NaNResponseValues < LowerBound);
%         UpperValues = find(NaNResponseValues > UpperBound);
%         NaNResponseValues(LowerValues,:) = 1;
%         NaNResponseValues(UpperValues,:) = 100;
%         Y(NaNValues,:) = NaNResponseValues;
%         DiscretizedFeatureZData(WellIndex,CurrentResponse) = Y;
%         
%     
%     
%     end
% end
% 
% clear FeatureZData
% 
% 
% % Discretize Feature Data Individually....
% 
% DiscretizedFeatureData = zeros(size(FeatureData));
% 
% 
% for CurrentWell = 1:30
%     for CurrentResponse = 1:size(FeatureData,2)
% 
%         WellIndex = find(ismember(LinearIndex,CurrentWell));
%         CurrentData = FeatureData(WellIndex,CurrentResponse);
%         LowerBound = prctile(CurrentData,0.25);
%         UpperBound = prctile(CurrentData,99.75);
%         Edges = linspace(LowerBound,UpperBound,101);
%         [Y,~] = discretize(CurrentData,Edges);
%         NaNValues = find(isnan(Y));
%         NaNResponseValues = CurrentData(NaNValues,:);
%         LowerValues = find(NaNResponseValues < LowerBound);
%         UpperValues = find(NaNResponseValues > UpperBound);
%         NaNResponseValues(LowerValues,:) = 1;
%         NaNResponseValues(UpperValues,:) = 100;
%         Y(NaNValues,:) = NaNResponseValues;
%         DiscretizedFeatureData(WellIndex,CurrentResponse) = Y;
%     
%     
%     end
% end
% 
% clear FeatureData
% 
% 
% % Discretize PC Feature data Individually 
% 
% DiscretizedPCFeatureData = zeros(size(PCFeatureData));
% 
% 
% for CurrentWell = 1:30
%     for CurrentResponse = 1:size(PCFeatureData,2)
%         WellIndex = find(ismember(LinearIndex,CurrentWell));
%         CurrentData = PCFeatureData(WellIndex,CurrentResponse);
%         LowerBound = prctile(CurrentData,0.25);
%         UpperBound = prctile(CurrentData,99.75);
%         Edges = linspace(LowerBound,UpperBound,101);
%         [Y,~] = discretize(CurrentData,Edges);
%         NaNValues = find(isnan(Y));
%         NaNResponseValues = CurrentData(NaNValues,:);
%         LowerValues = find(NaNResponseValues < LowerBound);
%         UpperValues = find(NaNResponseValues > UpperBound);
%         NaNResponseValues(LowerValues,:) = 1;
%         NaNResponseValues(UpperValues,:) = 100;
%         Y(NaNValues,:) = NaNResponseValues;
%         DiscretizedPCFeatureData(WellIndex,CurrentResponse) = Y;
%   
%     end
% end
% 
% clear PCFeatureData
% 
% 
% % PopulationScale = [641:650,1291:1300];
% % CellularScale = [1:183,298:414,651:833,948:1064];
% % TextureScale = setdiff(1:1300,[PopulationScale,CellularScale]);
% 
% 
% WellIndex = ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,13,14,15,19,20]);
% BGIndex = find([contains(FeatureHeader,'BG488');contains(FeatureHeader,'BG568');contains(FeatureHeader,'BG647')]);
% 
% MorphologyIndex = find(contains(FeatureHeader,'Morphology'));
% MorphologyIndex = setdiff(MorphologyIndex,BGIndex);
% 
% IntensityRawIndex = find(contains(FeatureHeader,'Intensity'));
% STDIndex = find(contains(FeatureHeader,'std'));
% IntensityIndex = setdiff(IntensityRawIndex,STDIndex);
% IntensityIndex = setdiff(IntensityIndex,BGIndex);
% 
% TextureIndex = find(contains(FeatureHeader,'Texture'));
% TextureIndex = setdiff(TextureIndex,BGIndex);
% 
% PopulationIndex = [641:650,1291:1300];
% PopulationIndex = setdiff(PopulationIndex,BGIndex);
% 
% CellularIndex = [MorphologyIndex;IntensityIndex];
% 
% 
% PopulationPlotFeatures = [11:20];
% CellularPlotFeatures = [1,14,244,150,154,158,161,164,171,174,178,182,184,188,192,193,196,206,208,214,218,222];
% TexturePlotFeatures = [437,438,440,441,442,443,444,445,446,447,448,449,450,451];
% 
% PopulationFeatures = PopulationIndex(PopulationPlotFeatures)';
% CellularFeatures = CellularIndex(CellularPlotFeatures);
% TextureFeatures = TextureIndex(TexturePlotFeatures);
% FullFeatures = [PopulationIndex(PopulationPlotFeatures)';CellularIndex(CellularPlotFeatures);TextureIndex(TexturePlotFeatures)];
% 
% FeatureNames = cell(46,1);
% 
% for CurrentFeature = 1:46
%     FeatureNames{CurrentFeature,1} = FeatureHeader{FullFeatures(CurrentFeature),1};
% end
% 
% 
% WellIndex = find(ismember(LinearIndex,[1,2,3]));
% 
% RedundantInformation = zeros(10,46,10);
% SynergisticInformation = zeros(10,46,10);
% UniqueInformation = zeros(10,46,10);
% 
% 
% FavoriteResponse = [18,168,3,123,153,108,33,91,61,78];
% for CurrentResponse = 1:10
%     for CurrentCounterResponse = 1:10
%         for CurrentFeature = 1:size(FullFeatures,1)
%             P = quickPID(DiscretizedFeatureZData(WellIndex,FullFeatures(CurrentFeature))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentResponse))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentCounterResponse))','nBins',12);
%             RedundantInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(1);
%             UniqueInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(2);
%             SynergisticInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(4);
%         end
%     end
%     CurrentResponse
% end
% 
% save('/home/ubuntu/data/bkramer/190218_184A1_EGF/Processed_Data/PID_Normed_100_5.mat','RedundantInformation','UniqueInformation','SynergisticInformation','-v7.3')
% 
% 
% 
% WellIndex = find(ismember(LinearIndex,[13,14,15]));
% 
% RedundantInformation = zeros(10,46,10);
% SynergisticInformation = zeros(10,46,10);
% UniqueInformation = zeros(10,46,10);
% 
% 
% FavoriteResponse = [18,168,3,123,153,108,33,91,61,78];
% for CurrentResponse = 1:10
%     for CurrentCounterResponse = 1:10
%         for CurrentFeature = 1:size(FullFeatures,1)
%             P = quickPID(DiscretizedFeatureZData(WellIndex,FullFeatures(CurrentFeature))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentResponse))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentCounterResponse))','nBins',12);
%             RedundantInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(1);
%             UniqueInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(2);
%             SynergisticInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(4);
%         end
%     end
%     CurrentResponse
% end
% 
% save('/home/ubuntu/data/bkramer/190218_184A1_EGF/Processed_Data/PID_Normed_100_1.mat','RedundantInformation','UniqueInformation','SynergisticInformation','-v7.3')
% 
% 
% 
% 
% WellIndex = find(ismember(LinearIndex,[10,19,20]));
% 
% RedundantInformation = zeros(10,46,10);
% SynergisticInformation = zeros(10,46,10);
% UniqueInformation = zeros(10,46,10);
% 
% 
% FavoriteResponse = [18,168,3,123,153,108,33,91,61,78];
% for CurrentResponse = 1:10
%     for CurrentCounterResponse = 1:10
%         for CurrentFeature = 1:size(FullFeatures,1)
%             P = quickPID(DiscretizedFeatureZData(WellIndex,FullFeatures(CurrentFeature))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentResponse))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentCounterResponse))','nBins',12);
%             RedundantInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(1);
%             UniqueInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(2);
%             SynergisticInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(4);
%         end
%     end
%     CurrentResponse
% end
% 
% save('/home/ubuntu/data/bkramer/190218_184A1_EGF/Processed_Data/PID_Normed_100_2.mat','RedundantInformation','UniqueInformation','SynergisticInformation','-v7.3')
% 
% 
% 
% 
% WellIndex = find(ismember(LinearIndex,[7,8,9]));
% 
% RedundantInformation = zeros(10,46,10);
% SynergisticInformation = zeros(10,46,10);
% UniqueInformation = zeros(10,46,10);
% 
% 
% FavoriteResponse = [18,168,3,123,153,108,33,91,61,78];
% for CurrentResponse = 1:10
%     for CurrentCounterResponse = 1:10
%         for CurrentFeature = 1:size(FullFeatures,1)
%             P = quickPID(DiscretizedFeatureZData(WellIndex,FullFeatures(CurrentFeature))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentResponse))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentCounterResponse))','nBins',12);
%             RedundantInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(1);
%             UniqueInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(2);
%             SynergisticInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(4);
%         end
%     end
%     CurrentResponse
% end
% 
% save('/home/ubuntu/data/bkramer/190218_184A1_EGF/Processed_Data/PID_Normed_100_3.mat','RedundantInformation','UniqueInformation','SynergisticInformation','-v7.3')
% 
% 
% 
% WellIndex = find(ismember(LinearIndex,[4,5,6]));
% 
% RedundantInformation = zeros(10,46,10);
% SynergisticInformation = zeros(10,46,10);
% UniqueInformation = zeros(10,46,10);
% 
% 
% FavoriteResponse = [18,168,3,123,153,108,33,91,61,78];
% for CurrentResponse = 1:10
%     for CurrentCounterResponse = 1:10
%         for CurrentFeature = 1:size(FullFeatures,1)
%             P = quickPID(DiscretizedFeatureZData(WellIndex,FullFeatures(CurrentFeature))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentResponse))',DiscretizedLogResponse(WellIndex,FavoriteResponse(CurrentCounterResponse))','nBins',12);
%             RedundantInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(1);
%             UniqueInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(2);
%             SynergisticInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse) = P(4);
%         end
%     end
%     CurrentResponse
% end
% 
% save('/home/ubuntu/data/bkramer/190218_184A1_EGF/Processed_Data/PID_Normed_100_4.mat','RedundantInformation','UniqueInformation','SynergisticInformation','-v7.3')

%%% Change number for different concentrations of EGF %%%

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PID_Normed_100_5.mat')


CurrentFeatures = 1:46;

CurrentUniqueInformation = UniqueInformation(:,CurrentFeatures,:);
CurrentRedundantInformation = RedundantInformation(:,CurrentFeatures,:);
CurrentSynergyInformation = SynergisticInformation(:,CurrentFeatures,:);

PairwiseMeanUnique = zeros(10,10);
PairwiseMeanRedundant = zeros(10,10);
PairwiseMeanSynergy = zeros(10,10);


InsertIndex = 1;
for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10

        CurrentPairUnique = CurrentUniqueInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairUnique(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = 0;
        end
        
        CurrentPairRedundant = CurrentRedundantInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairRedundant(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = 0;
        end

        CurrentPairSynergy = CurrentSynergyInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairSynergy(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = 0;
        end

    end
end

PieChartPlot = zeros(10,10,3);

PieChartPlot(:,:,1) = PairwiseMeanRedundant;
PieChartPlot(:,:,2) = PairwiseMeanUnique;
PieChartPlot(:,:,3) = PairwiseMeanSynergy;

figure
hold on
SubplotIndex = 1;
for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10
        CurrentPlotValues = PieChartPlot(CurrentResponse,CurrentCounterResponse,:);
        CurrentPlotValues = CurrentPlotValues./sum(CurrentPlotValues);
        if CurrentResponse == CurrentCounterResponse
           CurrentPlotValues(1,1,1) = 0.33333;
           CurrentPlotValues(1,1,2) = 0.33333;
           CurrentPlotValues(1,1,3) = 0.33333;
        end
        subplot(10,10,SubplotIndex)
        ax = gca();
        h = pie(ax, CurrentPlotValues);
        patchHand = findobj(h, 'Type', 'Patch');
        patchHand(1).FaceColor = [0.6 0.6 0.6];
        patchHand(2).FaceColor = [0.79 0 0.22];
        patchHand(3).FaceColor = [0.957 0.565 0];
        SubplotIndex = SubplotIndex + 1;
    end
end

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PID_Normed_100_2.mat')


FullRedundant = [];
FullUnique = [];
FullSynergy = [];

CurrentFeatures = 1:10;


for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10
        for CurrentFeature = CurrentFeatures
            CurrentRedundant = RedundantInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse);
            CurrentUnique = sum([UniqueInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse),UniqueInformation(CurrentCounterResponse,CurrentFeature,CurrentResponse)]);
            CurrentSynergy = SynergisticInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse);
            
            if CurrentUnique ~= 0
                FullRedundant = [FullRedundant;CurrentRedundant];
                FullUnique = [FullUnique;CurrentUnique];
                FullSynergy = [FullSynergy;CurrentSynergy];
            else
            end
        end  
    end
end

figure
boxplot([FullRedundant,FullUnique,FullSynergy],'width',0.8)
ylim([0 0.1])
xlim([0.4 3.6])




FullRedundant = [];
FullUnique = [];
FullSynergy = [];

CurrentFeatures = 11:32;

for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10
        for CurrentFeature = CurrentFeatures
            CurrentRedundant = RedundantInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse);
            CurrentUnique = sum([UniqueInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse),UniqueInformation(CurrentCounterResponse,CurrentFeature,CurrentResponse)]);
            CurrentSynergy = SynergisticInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse);
            
            if CurrentUnique ~= 0
                FullRedundant = [FullRedundant;CurrentRedundant];
                FullUnique = [FullUnique;CurrentUnique];
                FullSynergy = [FullSynergy;CurrentSynergy];
            else
            end
        end  
    end
end

figure
boxplot([FullRedundant,FullUnique,FullSynergy],'width',0.8)
ylim([0 0.2])
xlim([0.4 3.6])



FullRedundant = [];
FullUnique = [];
FullSynergy = [];

CurrentFeatures = 33:46;

for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10
        for CurrentFeature = CurrentFeatures
            CurrentRedundant = RedundantInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse);
            CurrentUnique = sum([UniqueInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse),UniqueInformation(CurrentCounterResponse,CurrentFeature,CurrentResponse)]);
            CurrentSynergy = SynergisticInformation(CurrentResponse,CurrentFeature,CurrentCounterResponse);
            
            if CurrentUnique ~= 0
                FullRedundant = [FullRedundant;CurrentRedundant];
                FullUnique = [FullUnique;CurrentUnique];
                FullSynergy = [FullSynergy;CurrentSynergy];
            else
            end
        end  
    end
end

figure
boxplot([FullRedundant,FullUnique,FullSynergy],'width',0.8)
ylim([0 0.1])
xlim([0.4 3.6])


%% Figure 4D

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_2.mat')

% pERK/pS6

FeatureSet = [1,7,14,26,19,31,35,37,69,74,80];
%FeatureSet = 1:85;
ResponseStain = [26,29];

ReducedFeatureData = real(log2(CleanFeatureData(:,FeatureSet)));
ReducedResponseData = CleanResponseDataLog(:,ResponseStain);

DiscretizedLogResponse = zeros(size(ReducedResponseData));

for CurrentWell = 1:36
    for CurrentResponse = 1:size(ReducedResponseData,2)
        WellIndex = find(ismember(C_linx_clean,CurrentWell));
        CurrentData = ReducedResponseData(WellIndex,CurrentResponse);
        LowerBound = prctile(CurrentData,0.25);
        UpperBound = prctile(CurrentData,99.75);
        Edges = linspace(LowerBound,UpperBound,101);
        [Y,~] = discretize(CurrentData,Edges);
        NaNValues = find(isnan(Y));
        NaNResponseValues = CurrentData(NaNValues,:);
        LowerValues = find(NaNResponseValues < LowerBound);
        UpperValues = find(NaNResponseValues > UpperBound);
        NaNResponseValues(LowerValues,:) = 1;
        NaNResponseValues(UpperValues,:) = 100;
        Y(NaNValues,:) = NaNResponseValues;
        DiscretizedLogResponse(WellIndex,CurrentResponse) = Y;
           
    
    end
end


% Discretize Feature Data Individually....

DiscretizedFeatureData = zeros(size(ReducedFeatureData));

for CurrentWell = 1:36
    for CurrentResponse = 1:size(ReducedFeatureData,2)
        try
        WellIndex = find(ismember(C_linx_clean,CurrentWell));
        CurrentData = ReducedFeatureData(WellIndex,CurrentResponse);
        CurrentData(isinf(CurrentData)) = nanmedian(CurrentData);
        LowerBound = prctile(CurrentData,0.25);
        UpperBound = prctile(CurrentData,99.75);
        Edges = linspace(LowerBound,UpperBound,101);
        [Y,~] = discretize(CurrentData,Edges);
        NaNValues = find(isnan(Y));
        NaNResponseValues = CurrentData(NaNValues,:);
        LowerValues = find(NaNResponseValues < LowerBound);
        UpperValues = find(NaNResponseValues > UpperBound);
        NaNResponseValues(LowerValues,:) = 1;
        NaNResponseValues(UpperValues,:) = 100;
        Y(NaNValues,:) = NaNResponseValues;
        DiscretizedFeatureData(WellIndex,CurrentResponse) = Y;
        catch
        end
    end
end


WellGroup = {32,29,30};

RedundantInformation = zeros(3,size(DiscretizedFeatureData,2));
UniqueInformation = zeros(3,size(DiscretizedFeatureData,2));
SynergyInformation = zeros(3,size(DiscretizedFeatureData,2));

for CurrentWell = 1:size(WellGroup,2)
    WellIndex = find(ismember(C_linx_clean,WellGroup{1,CurrentWell}));
    for CurrentFeature = 1:size(DiscretizedFeatureData,2)
        CalculationMatrix = quickPID(DiscretizedFeatureData(WellIndex,CurrentFeature)',DiscretizedLogResponse(WellIndex,1)',DiscretizedLogResponse(WellIndex,2)','nBins',10);        
        %RedundantInformation(CurrentWell,CurrentFeature) = CalculationMatrix(1)./sum([CalculationMatrix(2),CalculationMatrix(3)]);
        %RedundantInformation(CurrentWell,CurrentFeature) = CalculationMatrix(1)./CalculationMatrix(2);
        RedundantInformation(CurrentWell,CurrentFeature) = CalculationMatrix(1);
        UniqueInformation(CurrentWell,CurrentFeature) = sum(CalculationMatrix(2:3));
        SynergyInformation(CurrentWell,CurrentFeature) = CalculationMatrix(4);
    end
end


% FoxO3a/pAKT

FeatureSet = [1,7,14,26,19,31,35,37,69,74,80];
%FeatureSet = 1:85;
ResponseStain = [1,27];

ReducedFeatureData = real(log2(CleanFeatureData(:,FeatureSet)));
ReducedResponseData = CleanResponseDataLog(:,ResponseStain);

DiscretizedLogResponse = zeros(size(ReducedResponseData));

for CurrentWell = 1:36
    for CurrentResponse = 1:size(ReducedResponseData,2)
        WellIndex = find(ismember(C_linx_clean,CurrentWell));
        CurrentData = ReducedResponseData(WellIndex,CurrentResponse);
        LowerBound = prctile(CurrentData,0.25);
        UpperBound = prctile(CurrentData,99.75);
        Edges = linspace(LowerBound,UpperBound,101);
        [Y,~] = discretize(CurrentData,Edges);
        NaNValues = find(isnan(Y));
        NaNResponseValues = CurrentData(NaNValues,:);
        LowerValues = find(NaNResponseValues < LowerBound);
        UpperValues = find(NaNResponseValues > UpperBound);
        NaNResponseValues(LowerValues,:) = 1;
        NaNResponseValues(UpperValues,:) = 100;
        Y(NaNValues,:) = NaNResponseValues;
        DiscretizedLogResponse(WellIndex,CurrentResponse) = Y;
           
    
    end
end


% Discretize Feature Data Individually....

DiscretizedFeatureData = zeros(size(ReducedFeatureData));

for CurrentWell = 1:36
    for CurrentResponse = 1:size(ReducedFeatureData,2)
        try
        WellIndex = find(ismember(C_linx_clean,CurrentWell));
        CurrentData = ReducedFeatureData(WellIndex,CurrentResponse);
        CurrentData(isinf(CurrentData)) = nanmedian(CurrentData);
        LowerBound = prctile(CurrentData,0.25);
        UpperBound = prctile(CurrentData,99.75);
        Edges = linspace(LowerBound,UpperBound,101);
        [Y,~] = discretize(CurrentData,Edges);
        NaNValues = find(isnan(Y));
        NaNResponseValues = CurrentData(NaNValues,:);
        LowerValues = find(NaNResponseValues < LowerBound);
        UpperValues = find(NaNResponseValues > UpperBound);
        NaNResponseValues(LowerValues,:) = 1;
        NaNResponseValues(UpperValues,:) = 100;
        Y(NaNValues,:) = NaNResponseValues;
        DiscretizedFeatureData(WellIndex,CurrentResponse) = Y;
        catch
        end
    end
end



WellGroup = {32,29,30};

RedundantInformation = zeros(3,size(DiscretizedFeatureData,2));
UniqueInformation = zeros(3,size(DiscretizedFeatureData,2));

for CurrentWell = 1:size(WellGroup,2)
    WellIndex = find(ismember(C_linx_clean,WellGroup{1,CurrentWell}));
    for CurrentFeature = 1:size(DiscretizedFeatureData,2)
        CalculationMatrix = quickPID(DiscretizedFeatureData(WellIndex,CurrentFeature)',DiscretizedLogResponse(WellIndex,1)',DiscretizedLogResponse(WellIndex,2)','nBins',10);        
        %RedundantInformation(CurrentWell,CurrentFeature) = CalculationMatrix(1)./sum([CalculationMatrix(2),CalculationMatrix(3)]);
        %RedundantInformation(CurrentWell,CurrentFeature) = CalculationMatrix(1)./CalculationMatrix(2);
        RedundantInformation(CurrentWell,CurrentFeature) = CalculationMatrix(1);
        UniqueInformation(CurrentWell,CurrentFeature) = sum(CalculationMatrix(2:3));
    end
end


%% Figure 4E

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

WellIndex = ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,13,14,15,19,20]);
ReducedResponseData = LogResponseData(WellIndex,:);
ReducedLinearIndex = LinearIndex(WellIndex,:);
%ReducedFeatureData = FeatureZData(WellIndex,:);
%ReducedPCFeatureData = PCFeatureData(WellIndex,:);
%NeighborPhenotype = ReducedFeatureData(:,FeatureIndex);
NeighborPhenotype = WeightedClusterData(:,1:68);
%NeighborPhenotype = ReducedPCFeatureData(:,:);

WellStorage = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};

JaccardStorage = cell(13,5);


WellInsertIndex = 1;
FavoriteStains = [18,168,3,123,153,108,33,91,61,78];

for CurrentWellIndex = 1:size(WellStorage,2)
    GroupIndex = 1;
    % Multivariate...
    CurrentWells = WellStorage{1,CurrentWellIndex};
    
    
    WellIndex = find(ismember(ReducedLinearIndex,CurrentWells));
    NumNeighbors = round(size(WellIndex,1)*0.05);
    
    DistanceFunction = 'cityblock';
    
    
    % Multimodal
    
    WellResponseData = zscore(ReducedResponseData(WellIndex,FavoriteStains));
    WellNeighborPhenotype = NeighborPhenotype(WellIndex,:);
    %WellNeighborPhenotype = ReducedFeatureData(WellIndex,:);
    
    ResponseNeighbors = knnsearch(WellResponseData,WellResponseData,'K',NumNeighbors,'Distance',DistanceFunction);
    PhenoNeighbors = knnsearch(WellNeighborPhenotype,WellNeighborPhenotype,'K',NumNeighbors,'Distance',DistanceFunction);
    
    ResponseNeighbors(:,1) = [];
    PhenoNeighbors(:,1) = [];
    
    NumCommon = zeros(size(ResponseNeighbors,1),1);
    NumUnique = zeros(size(ResponseNeighbors,1),1);
    for CurrentCell = 1:size(ResponseNeighbors,1)
        NumCommon(CurrentCell,1) = numel(intersect(ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)));
        NumUnique(CurrentCell,1) = numel(unique([ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)]));
        
        
    end
    
    JaccardIndex = NumCommon./NumUnique;
    
    
    JaccardStorage{GroupIndex,CurrentWellIndex} = JaccardIndex;
    GroupIndex = GroupIndex + 1;
    
    % ERK + MTOR
    
    
    WellResponseData = zscore(ReducedResponseData(WellIndex,FavoriteStains([3,6])));
    WellNeighborPhenotype = NeighborPhenotype(WellIndex,:);
    %WellNeighborPhenotype = ReducedFeatureData(WellIndex,:);
    
    ResponseNeighbors = knnsearch(WellResponseData,WellResponseData,'K',NumNeighbors,'Distance',DistanceFunction);
    PhenoNeighbors = knnsearch(WellNeighborPhenotype,WellNeighborPhenotype,'K',NumNeighbors,'Distance',DistanceFunction);
    
    ResponseNeighbors(:,1) = [];
    PhenoNeighbors(:,1) = [];
    
    NumCommon = zeros(size(ResponseNeighbors,1),1);
    NumUnique = zeros(size(ResponseNeighbors,1),1);
    for CurrentCell = 1:size(ResponseNeighbors,1)
        NumCommon(CurrentCell,1) = numel(intersect(ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)));
        NumUnique(CurrentCell,1) = numel(unique([ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)]));
        
        
    end
    
    JaccardIndex = NumCommon./NumUnique;
    
    
    JaccardStorage{GroupIndex,CurrentWellIndex} = JaccardIndex;
    GroupIndex = GroupIndex + 1;
    
    
    for CurrentStain = 1:size(FavoriteStains,2)
        WellResponseData = zscore(ReducedResponseData(WellIndex,FavoriteStains(1,CurrentStain)));
        ResponseNeighbors = knnsearch(WellResponseData,WellResponseData,'K',NumNeighbors,'Distance',DistanceFunction);
        ResponseNeighbors(:,1) = [];
        NumCommon = zeros(size(ResponseNeighbors,1),1);
        NumUnique = zeros(size(ResponseNeighbors,1),1);
        for CurrentCell = 1:size(ResponseNeighbors,1)
            NumCommon(CurrentCell,1) = numel(intersect(ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)));
            NumUnique(CurrentCell,1) = numel(unique([ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)]));
            
            
        end
        
        JaccardIndex = NumCommon./NumUnique;
        JaccardStorage{GroupIndex,CurrentWellIndex} = JaccardIndex;
        
        
        GroupIndex = GroupIndex + 1;
        
    end
    
    % Random Sample...
    ResponseNeighbors = zeros(size(WellIndex,1),NumNeighbors);
    PhenoNeighbors = zeros(size(WellIndex,1),NumNeighbors);
    for CurrentCell = 1:size(WellIndex,1)
        ResponseNeighbors(CurrentCell,:) = randperm(size(WellIndex,1),NumNeighbors);
        PhenoNeighbors(CurrentCell,:) = randperm(size(WellIndex,1),NumNeighbors);
    end
    
    NumCommon = zeros(size(ResponseNeighbors,1),1);
    NumUnique = zeros(size(ResponseNeighbors,1),1);
    for CurrentCell = 1:size(ResponseNeighbors,1)
        NumCommon(CurrentCell,1) = numel(intersect(ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)));
        NumUnique(CurrentCell,1) = numel(unique([ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)]));
    end
    
    JaccardIndex = NumCommon./NumUnique;
    
    
    JaccardStorage{GroupIndex,CurrentWellIndex} = JaccardIndex;
    GroupIndex = GroupIndex + 1;
    
    CurrentWellIndex
    WellInsertIndex = WellInsertIndex + 1;
end

% On UMAP

ReducedWells = [1,2,3,4,5,6,7,8,9,10,19,20,13,14,15];
WellIndex = find(ismember(LinearIndex,ReducedWells));

ReducedWellIndex = LinearIndex(WellIndex,:);

WellGroups = {[13,14,15],[10,19,20],[9,8,7],[6,5,4],[3,2,1]};
ConcentrationString = {'0ng','6.25ng','10ng','25ng','100ng'};

TextMatrix = {'Multimodal','pERK + pMTOR','pEGFR','pMEK','pERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6','Random'};


for CurrentWell = 1:size(WellStorage,2)
    Wells = WellStorage{1,CurrentWell};
    CurrentWellIndex = find(ismember(ReducedWellIndex,Wells));
    for CurrentModal = 1:13
        figure
        CurrentRatio = JaccardStorage{CurrentModal,CurrentWell}./mean(JaccardStorage{13,CurrentWell});
        scatter(ReductionUmap(CurrentWellIndex,1),ReductionUmap(CurrentWellIndex,2),10,CurrentRatio,'filled','MarkerEdgeColor','none')
        caxis([0 2.5])
        %colormap(flipud(getPyPlot_cMap('cubehelix',500)))
        colormap(rainbowColorMap(:,1:3))
        %colormap(getPyPlot_cMap('coolwarm',500))
        
        ylim([-4.3 6.8])
        xlim([-7.5 10.5])
        set(gcf,'position',[2963 -211 590.8 450])
        axis off
        
%         ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_Jaccard_',num2str(CurrentWell),'_',TextMatrix{1,CurrentModal},'.jpg'];
%         export_fig(ExportPath,'-r1200','-transparent')
%         
%         colorbar
%         axis on
%         ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_Jaccard_',num2str(CurrentWell),'_',TextMatrix{1,CurrentModal},'.pdf'];
%         export_fig(ExportPath,'-painters')
        
    end   
%     close all
end


%% Figure 4F


% Remove Nan

NaNCells = ~isnan(max(MembershipData,[],2));

CleanMembershipData = MembershipData(NaNCells,:);
CleanResponseData = LogResponseData(NaNCells,:);
CleanLinearIndex = LinearIndex(NaNCells,:);

% Get UMAP data
ReducedIndex = find(ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,19,20,13,14,15]));
ReducedMember = MembershipData(ReducedIndex,:);
NaNCellsReduced = ~isnan(max(ReducedMember,[],2));

CleanReductionUMAP = ReductionUmap(NaNCellsReduced,:);

% Find Cells with at least 0.5

MaxMember = max(CleanMembershipData,[],2);
KeepCells = find(MaxMember > -0.1);

KeepMembershipData = CleanMembershipData(KeepCells,:);
KeepResponseData = CleanResponseData(KeepCells,:);
KeepLinearIndex = CleanLinearIndex(KeepCells,:);
KeepReductionUMAP = CleanReductionUMAP(KeepCells,:);

% Get Cluster ID

[~,KeepClusterID] = max(KeepMembershipData,[],2);

ResponseStain = [18,168,3,123,153,108,33,91,61,78];
WellCell = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};

StorageLikelihood = cell(size(ResponseStain,2)+2,size(WellCell,2));

for CurrentWellCounter = 1:size(WellCell,2)
    
    CurrentWell = WellCell{1,CurrentWellCounter};
    CurrentWellIndex = find(ismember(KeepLinearIndex,CurrentWell));
    
    CurrentMembershipData = KeepMembershipData(CurrentWellIndex,:);
    CurrentResponseData = KeepResponseData(CurrentWellIndex,:);
    CurrentClusterID = KeepClusterID(CurrentWellIndex,:);
    
    % Get minimal ClusterNumber...
    NumClusterMember = zeros(18,1);
    
    for CurrentID = 1:18
        NumClusterMember(CurrentID,1) = numel(find(CurrentClusterID == CurrentID));
    end
    
    MinimumMember = min(NumClusterMember);
    
    TestIndex = [];
    
    for CurrentID = 1:18
        CurrentMember = find(CurrentClusterID == CurrentID);
        RandomCells = randperm(size(CurrentMember,1),MinimumMember);
        TestIndex = [TestIndex;CurrentMember(RandomCells)];
    end
    
    
    for CurrentResponse = 1:size(ResponseStain,2)
        
        CurrentStains = ResponseStain(CurrentResponse);
        TestResponseData = CurrentResponseData(:,CurrentStains);
        TrainingResponseData = CurrentResponseData(TestIndex,CurrentStains);
        TrainingClusterID = CurrentClusterID(TestIndex,:);
        
        
        MDL = cvglmnet(TrainingResponseData,TrainingClusterID,'multinomial');
        
        PosteriorClass = cvglmnetPredict(MDL,TestResponseData,'lambda_1se','response');
        
        StorageLikelihood{CurrentResponse,CurrentWellCounter} = PosteriorClass;
        CurrentResponse
    end
    
    
    CurrentStains = ResponseStain(:);
    TestResponseData = CurrentResponseData(:,CurrentStains);
    TrainingResponseData = CurrentResponseData(TestIndex,CurrentStains);
    TrainingClusterID = CurrentClusterID(TestIndex,:);
    
    
    MDL = cvglmnet(TrainingResponseData,TrainingClusterID,'multinomial');
    
    PosteriorClass = cvglmnetPredict(MDL,TestResponseData,'lambda_1se','response');
    
    StorageLikelihood{11,CurrentWellCounter} = PosteriorClass;
    
    CurrentStains = ResponseStain([3,6]);
    TestResponseData = CurrentResponseData(:,CurrentStains);
    TrainingResponseData = CurrentResponseData(TestIndex,CurrentStains);
    TrainingClusterID = CurrentClusterID(TestIndex,:);
    
    
    MDL = cvglmnet(TrainingResponseData,TrainingClusterID,'multinomial');
    
    PosteriorClass = cvglmnetPredict(MDL,TestResponseData,'lambda_1se','response');
    
    StorageLikelihood{12,CurrentWellCounter} = PosteriorClass;
    
end




WellCell = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};
ConcentrationString = {'0ng','6.25ng','10ng','25ng','100ng'};
TitleCell = {'pEGFR','pMEK','pERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6','Multimodal','Bimodal'};


for CurrentWellCounter = 2%1:size(WellCell,2)
    
    CurrentWells = WellCell{1,CurrentWellCounter};
    
    CurrentIndex = find(ismember(KeepLinearIndex,CurrentWells));
    CurrentUMAP = KeepReductionUMAP(CurrentIndex,:);
    CustomColor = tab20ColorMap([1:7,9:13,15:20],1:3);
    MembershipTrue = KeepMembershipData(CurrentIndex,:);
    [~,TrueIndex] = max(MembershipTrue,[],2);
    
    for CurrentModal = 1:12%1:11
        
        CurrentClusterID = KeepClusterID(CurrentIndex,:);
        CurrentLikelihood = StorageLikelihood{CurrentModal,CurrentWellCounter};
        
        StorageTrue = zeros(size(CurrentLikelihood,1),1);
        
        for CurrentCluster = 1:18
            CurrentMember = find(CurrentClusterID == CurrentCluster);
            CurrentLikelihoodID = CurrentLikelihood(CurrentMember,:);
            CurrentTrue = TrueIndex(CurrentMember,:);
            [~,SortedID] = sort(CurrentLikelihoodID,2,'descend');
            TopThree = SortedID(:,1:2);
            [~,MaxID] = max(CurrentLikelihoodID,[],2);
            StorageTrue(CurrentMember,1) = MaxID;
            
            MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
            MemberSum = find(sum(MemberOfTop,2));
            StorageTrue(CurrentMember(MemberSum),1) = CurrentCluster;
        end
        
        if CurrentModal == 11
            CorrectCells = find(TrueIndex-StorageTrue == 0);
            Incorrect = setdiff(1:size(TrueIndex,1),CorrectCells);
            
            figure
            hold on
            scatter(CurrentUMAP(:,1),CurrentUMAP(:,2),10,StorageTrue(:),'filled','MarkerEdgeColor','none')
        else
            figure
            hold on
            scatter(CurrentUMAP(:,1),CurrentUMAP(:,2),10,StorageTrue(:),'filled','MarkerEdgeColor','none')
        end
        colormap(CustomColor)
        ylim([-4.3 6.8])
        xlim([-7.5 10.5])
        set(gcf,'position',[2963 -211 590.8 450])
        axis off
        
%         ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_Predicted_',num2str(CurrentModal),'.jpg'];
%         export_fig(ExportPath,'-r1200','-transparent')
%         
%         colorbar
%         axis on
%         ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_Predicted_',num2str(CurrentModal),'.pdf'];
%         export_fig(ExportPath,'-painters')
    end
    
    figure
    scatter(CurrentUMAP(:,1),CurrentUMAP(:,2),4,TrueIndex,'filled','MarkerEdgeColor','none')
    ylim([-4.3 6.8])
    xlim([-7.5 10.5])
    set(gcf,'position',[2963 -211 590.8 450])
    axis off
    
%     ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_True.jpg'];
%     export_fig(ExportPath,'-r1200')
%     
%     colorbar
%     axis on
%     ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_True.pdf'];
%     export_fig(ExportPath,'-painters')
%     close all
end





ConcentrationString = {'0ng','6.25ng','10ng','25ng','100ng'};
WellCell = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};
for CurrentWellCounter = 2%1:5
    
    CurrentWell = WellCell{1,CurrentWellCounter};
    CurrentWellIndex = find(ismember(KeepLinearIndex,CurrentWell));
    
    CurrentMembershipData = KeepMembershipData(CurrentWellIndex,:);
    CurrentResponseData = KeepResponseData(CurrentWellIndex,:);
    CurrentClusterID = KeepClusterID(CurrentWellIndex,:);
    
    TitleCell = {'pEGFR','pMEK','pERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6','Multimodal','Bimodal'};
    
    for CurrentModal = 1:size(StorageLikelihood,1)
        CurrentLikelihood = StorageLikelihood{CurrentModal,CurrentWellCounter};
        
        StorageMean = zeros(18,18);
        StorageCorrect = zeros(18,18);
        
        for CurrentCluster = 1:18
            CurrentTrue = CurrentClusterID;
            CurrentClusterTrue = find(CurrentTrue == CurrentCluster);
            CurrentData = CurrentLikelihood(CurrentClusterTrue,:);
            MeanLikelihood = mean(CurrentData);
            StorageMean(CurrentCluster,:) = normalize(MeanLikelihood,1);
            
            [~,SortedID] = sort(CurrentData,2,'descend');
            TopThree = SortedID(:,1:2);
            [~,MaxPrediction] = max(CurrentData,[],2);
            StorageTrue = MaxPrediction;
            
%                         if CurrentModal == 3
%                             MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
%                             MemberSum = find(sum(MemberOfTop,2));
%                             StorageTrue(MemberSum,1) = CurrentCluster;
%                         elseif CurrentModal == 6
%                             MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
%                             MemberSum = find(sum(MemberOfTop,2));
%                             StorageTrue(MemberSum,1) = CurrentCluster;
%             
%                         elseif CurrentModal == 11
%                             MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
%                             MemberSum = find(sum(MemberOfTop,2));
%                             StorageTrue(MemberSum,1) = CurrentCluster;
%             
%                         elseif CurrentModal == 12
%                             MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
%                             MemberSum = find(sum(MemberOfTop,2));
%                             StorageTrue(MemberSum,1) = CurrentCluster;
%                         end
            
            
            MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
            MemberSum = find(sum(MemberOfTop,2));
            StorageTrue(MemberSum,1) = CurrentCluster;
            
            IntermediateStorage = zeros(1,18);
            for CurrentCounter = 1:18
                IntermediateStorage(1,CurrentCounter) = numel(find(StorageTrue == CurrentCounter))./numel(StorageTrue);
                
            end
            StorageCorrect(CurrentCluster,:) = normalize(IntermediateStorage,1);
        end
        figure
        hold on
        YValues = fliplr(1:18);
        for CurrentCluster = 1:18
            for CurrentCounter = 1:18
                scatter(CurrentCluster,YValues(CurrentCounter),(StorageMean(CurrentCounter,CurrentCluster)+0.0001).^2*200,StorageCorrect(CurrentCounter,CurrentCluster),'filled','square','MarkerEdgeColor','none')
            end
        end
        
        % Add lines...
        % X Lines
        
        for CurrentX = 0.5:18.5
            line([CurrentX CurrentX],[0.5 18.5],'Color','k')
            line([0.5 18.5],[CurrentX CurrentX],'Color','k')
        end
        
        XTickVector = 1:18;
        xticks(XTickVector);
        yticks(XTickVector);
        xticklabels({'1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18'});
        yticklabels(fliplr({'1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18'}));
        axis square
        xlim([0 20])
        ylim([0 20])
        ylabel('Measured Cluster ID')
        xlabel('Predicted Cluster ID')
        colormap(brewermap(500,'greens'))
        title([TitleCell{1,CurrentModal},' ',ConcentrationString{1,CurrentWellCounter}])
        colorbar
        
%         ExportName = char(join(['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\Cluster_Prediction_EdgeC_',num2str(CurrentModal),'.pdf'],''));
%         export_fig(ExportName,'-painters')
        
    end
%     close all
end