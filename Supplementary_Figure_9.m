%% load data 
% Adjust path to wherever data and function folder is located
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\Functions\umapFileExchange (1.2.1)\umap\umap.jar');

%% Data description

% LinearIndex: Indicator to which condition each cell (i.e. row) belongs; Individual numbers denote replicates %
% 1,2,3,11,21,22,23,24,25,26,27,28,29,30 - 100ng/ml EGF
% 4,5,6 - 25ng/ml EGF
% 7,8,9 - 10ng/ml EGF
% 10,19,20 - 6.25ng/ml EGF
% 16,17,18 - 1ng/ml EGF
% 13,14,15 - 0ng/ml EGF
% 11,12,21,22,23,24,25,26,27,28,29,30 - 100ng/ml control for intensity decay and secondary antibody only controls after elution (see Gut et al. for details): 11: Cycle 1, 12: Cycle 2 etc... 30 always secondary only. Starting at 11... etc again when 29 was reached

% FeatureHeader: Descriptor of which cellular state feature (column) is represented in the corresponding double matrices %
% FeatureData: Contains raw (and transformed, see material and methods) single cell cellular state feature data; columns correspoding to cellular state features described in "FeatureHeader" %
% FeatureZData: Contains the z-scored (see material and methods) single cell cellular state feature data; columns corresponding to cellular state features described in "FeatureHeader" %

% MetaHeader: Descriptor of which MetaData (e.g. CentroidLocation in image, or which field in an image) is represented in the corresponding double matrices %
% MetaData: Contains single cell information on the Metadata; columns corresponding to information described in "MetaHeader"

% ResponseHeader: Descriptor of which response (column) is represented in the corresponding double matrices %
% ResponseData: Contains raw single cell data; columns corresponding to response features described in "ResponseHeader" %
% LogResponseData: Contains transformed (see material and methods) single cell data; columns corresponding to response features described in "ResponseHeader" %

% PCCoeff: Contains the loadings of each principal component from principal component analysis on cellular state features (FeatureZData)
% PCFeatureData: Contains single cell data of cellular state features (from FeatureZData) transformed to PCs). Only the PCs which together explain 97.5% of the variance are kept (hence only 157)

% MSTData: Relic from the past; not used in the paper %
% MSTHeader: Relic from the past; not used in the paper %

% WeightedClusterData: Data from PCFeatureData weighted as described in material and methods and used as input for fuzzy clustering. Columns correspond to the PCs used; further described in script for Figure 3; Only clustered on cells belong to LinearIndex 1,2,3,4,5,6,7,8,9,10,13,14,15 and 20 %
% ClusterCentor: Centroid locations for the individual cluster centers obtained from fuzzy clustering on cellular state features %
% MembershipData: Contains the Membership degree (Fuzzy clustering outputs degrees of membership, no clear assignement) for each single cell)

%% Supplementary Figure 9A

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

% 0 ng

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PID_Normed_100_1.mat')


CurrentFeatures = 1:46;

CurrentUniqueInformation = UniqueInformation(:,CurrentFeatures,:);
CurrentRedundantInformation = RedundantInformation(:,CurrentFeatures,:);
CurrentSynergyInformation = SynergisticInformation(:,CurrentFeatures,:);

PairwiseMeanUnique = zeros(10,10);
PairwiseMeanRedundant = zeros(10,10);
PairwiseMeanSynergy = zeros(10,10);


InsertIndex = 1;
for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10

        CurrentPairUnique = CurrentUniqueInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairUnique(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = 0;
        end
        
        CurrentPairRedundant = CurrentRedundantInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairRedundant(:));
%         if CurrentResponse == CurrentCounterResponse
%             PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = 0;
%         end

        CurrentPairSynergy = CurrentSynergyInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairSynergy(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = 0;
        end

    end
end

% Redundant
PlotMatrix = [flipud(PairwiseMeanRedundant),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Unique
PlotMatrix = [flipud(PairwiseMeanUnique),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Synergy
PlotMatrix = [flipud(PairwiseMeanSynergy),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square


% 6.25 ng

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PID_Normed_100_2.mat')


CurrentFeatures = 1:46;

CurrentUniqueInformation = UniqueInformation(:,CurrentFeatures,:);
CurrentRedundantInformation = RedundantInformation(:,CurrentFeatures,:);
CurrentSynergyInformation = SynergisticInformation(:,CurrentFeatures,:);

PairwiseMeanUnique = zeros(10,10);
PairwiseMeanRedundant = zeros(10,10);
PairwiseMeanSynergy = zeros(10,10);


InsertIndex = 1;
for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10

        CurrentPairUnique = CurrentUniqueInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairUnique(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = 0;
        end
        
        CurrentPairRedundant = CurrentRedundantInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairRedundant(:));
%         if CurrentResponse == CurrentCounterResponse
%             PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = 0;
%         end

        CurrentPairSynergy = CurrentSynergyInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairSynergy(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = 0;
        end

    end
end

% Redundant
PlotMatrix = [flipud(PairwiseMeanRedundant),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Unique
PlotMatrix = [flipud(PairwiseMeanUnique),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Synergy
PlotMatrix = [flipud(PairwiseMeanSynergy),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square


% 10 ng

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PID_Normed_100_3.mat')


CurrentFeatures = 1:46;

CurrentUniqueInformation = UniqueInformation(:,CurrentFeatures,:);
CurrentRedundantInformation = RedundantInformation(:,CurrentFeatures,:);
CurrentSynergyInformation = SynergisticInformation(:,CurrentFeatures,:);

PairwiseMeanUnique = zeros(10,10);
PairwiseMeanRedundant = zeros(10,10);
PairwiseMeanSynergy = zeros(10,10);


InsertIndex = 1;
for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10

        CurrentPairUnique = CurrentUniqueInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairUnique(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = 0;
        end
        
        CurrentPairRedundant = CurrentRedundantInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairRedundant(:));
%         if CurrentResponse == CurrentCounterResponse
%             PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = 0;
%         end

        CurrentPairSynergy = CurrentSynergyInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairSynergy(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = 0;
        end

    end
end

% Redundant
PlotMatrix = [flipud(PairwiseMeanRedundant),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Unique
PlotMatrix = [flipud(PairwiseMeanUnique),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Synergy
PlotMatrix = [flipud(PairwiseMeanSynergy),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square


% 25 ng

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PID_Normed_100_4.mat')


CurrentFeatures = 1:46;

CurrentUniqueInformation = UniqueInformation(:,CurrentFeatures,:);
CurrentRedundantInformation = RedundantInformation(:,CurrentFeatures,:);
CurrentSynergyInformation = SynergisticInformation(:,CurrentFeatures,:);

PairwiseMeanUnique = zeros(10,10);
PairwiseMeanRedundant = zeros(10,10);
PairwiseMeanSynergy = zeros(10,10);


InsertIndex = 1;
for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10

        CurrentPairUnique = CurrentUniqueInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairUnique(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = 0;
        end
        
        CurrentPairRedundant = CurrentRedundantInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairRedundant(:));
%         if CurrentResponse == CurrentCounterResponse
%             PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = 0;
%         end

        CurrentPairSynergy = CurrentSynergyInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairSynergy(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = 0;
        end

    end
end

% Redundant
PlotMatrix = [flipud(PairwiseMeanRedundant),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Unique
PlotMatrix = [flipud(PairwiseMeanUnique),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Synergy
PlotMatrix = [flipud(PairwiseMeanSynergy),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square



% 100 ng

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PID_Normed_100_5.mat')


CurrentFeatures = 1:46;

CurrentUniqueInformation = UniqueInformation(:,CurrentFeatures,:);
CurrentRedundantInformation = RedundantInformation(:,CurrentFeatures,:);
CurrentSynergyInformation = SynergisticInformation(:,CurrentFeatures,:);

PairwiseMeanUnique = zeros(10,10);
PairwiseMeanRedundant = zeros(10,10);
PairwiseMeanSynergy = zeros(10,10);


InsertIndex = 1;
for CurrentResponse = 1:10
    for CurrentCounterResponse = 1:10

        CurrentPairUnique = CurrentUniqueInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairUnique(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanUnique(CurrentResponse,CurrentCounterResponse) = 0;
        end
        
        CurrentPairRedundant = CurrentRedundantInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairRedundant(:));
%         if CurrentResponse == CurrentCounterResponse
%             PairwiseMeanRedundant(CurrentResponse,CurrentCounterResponse) = 0;
%         end

        CurrentPairSynergy = CurrentSynergyInformation(CurrentResponse,:,CurrentCounterResponse);
        PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = mean(CurrentPairSynergy(:));
        if CurrentResponse == CurrentCounterResponse
            PairwiseMeanSynergy(CurrentResponse,CurrentCounterResponse) = 0;
        end

    end
end

% Redundant
PlotMatrix = [flipud(PairwiseMeanRedundant),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Unique
PlotMatrix = [flipud(PairwiseMeanUnique),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square

% Synergy
PlotMatrix = [flipud(PairwiseMeanSynergy),zeros(10,1)];
PlotMatrix = [PlotMatrix;zeros(1,11)];

figure
pcolor(PlotMatrix)
colormap(brewermap(500,'reds'))
axis square























