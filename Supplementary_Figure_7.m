%% load data 
% Adjust path to wherever data and function folder is located
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\Functions\umapFileExchange (1.2.1)\umap\umap.jar');
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\SingleCellDR_Normed.mat');

%% Data description

% LinearIndex: Indicator to which condition each cell (i.e. row) belongs; Individual numbers denote replicates %
% 1,2,3,11,21,22,23,24,25,26,27,28,29,30 - 100ng/ml EGF
% 4,5,6 - 25ng/ml EGF
% 7,8,9 - 10ng/ml EGF
% 10,19,20 - 6.25ng/ml EGF
% 16,17,18 - 1ng/ml EGF
% 13,14,15 - 0ng/ml EGF
% 11,12,21,22,23,24,25,26,27,28,29,30 - 100ng/ml control for intensity decay and secondary antibody only controls after elution (see Gut et al. for details): 11: Cycle 1, 12: Cycle 2 etc... 30 always secondary only. Starting at 11... etc again when 29 was reached

% FeatureHeader: Descriptor of which cellular state feature (column) is represented in the corresponding double matrices %
% FeatureData: Contains raw (and transformed, see material and methods) single cell cellular state feature data; columns correspoding to cellular state features described in "FeatureHeader" %
% FeatureZData: Contains the z-scored (see material and methods) single cell cellular state feature data; columns corresponding to cellular state features described in "FeatureHeader" %

% MetaHeader: Descriptor of which MetaData (e.g. CentroidLocation in image, or which field in an image) is represented in the corresponding double matrices %
% MetaData: Contains single cell information on the Metadata; columns corresponding to information described in "MetaHeader"

% ResponseHeader: Descriptor of which response (column) is represented in the corresponding double matrices %
% ResponseData: Contains raw single cell data; columns corresponding to response features described in "ResponseHeader" %
% LogResponseData: Contains transformed (see material and methods) single cell data; columns corresponding to response features described in "ResponseHeader" %

% PCCoeff: Contains the loadings of each principal component from principal component analysis on cellular state features (FeatureZData)
% PCFeatureData: Contains single cell data of cellular state features (from FeatureZData) transformed to PCs). Only the PCs which together explain 97.5% of the variance are kept (hence only 157)

% MSTData: Relic from the past; not used in the paper %
% MSTHeader: Relic from the past; not used in the paper %

% WeightedClusterData: Data from PCFeatureData weighted as described in material and methods and used as input for fuzzy clustering. Columns correspond to the PCs used; further described in script for Figure 3; Only clustered on cells belong to LinearIndex 1,2,3,4,5,6,7,8,9,10,13,14,15 and 20 %
% ClusterCentor: Centroid locations for the individual cluster centers obtained from fuzzy clustering on cellular state features %
% MembershipData: Contains the Membership degree (Fuzzy clustering outputs degrees of membership, no clear assignement) for each single cell)

%% Supplementary Figure 7A

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following


load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\DoseProbabilityWithoutOne_CompleteIndividual.mat');

AUCStorage = cell(46,1);
GroupStorage = cell(46,1);
GroupIndex = 1;
InsertIndex = 1;
for CurrentStain = 1:10
    TrueIndex = StorageGroupIndex{CurrentStain,1};
    XV = StorageProbability{CurrentStain,1};
    IntermediateProb = [];
    IntermediateProbWrong = [];
    for CurrentClass = 1:5
        TrueClass = find(TrueIndex == CurrentClass);
        IntermediateProb = [IntermediateProb;XV(TrueClass,CurrentClass)];
        Difference = setdiff(1:5,CurrentClass);
        IntermediateProbWrong = [IntermediateProbWrong;sum(XV(TrueClass,Difference),2)];
        
    end
    AUCStorage{InsertIndex+2,1} = IntermediateProb;
    AUCStorage{InsertIndex,1} = IntermediateProbWrong;
    GroupStorage{InsertIndex,1} = repmat(GroupIndex,size(IntermediateProb,1),1);
    GroupStorage{InsertIndex+2,1} = repmat(GroupIndex+2,size(IntermediateProb,1),1);
    InsertIndex = InsertIndex + 4;
    GroupIndex = GroupIndex + 4;
end


load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\VM\DoseProbabilityWithoutOne_CompleteIndividualFeatures_1.mat');

GroupIndex = 2;
InsertIndex = 2;
for CurrentStain = 1:10
    TrueIndex = StorageGroupIndex{CurrentStain,1};
    XV = StorageProbability{CurrentStain,1};
    IntermediateProb = [];
    IntermediateProbWrong = [];
    for CurrentClass = 1:5
        TrueClass = find(TrueIndex == CurrentClass);
        IntermediateProb = [IntermediateProb;XV(TrueClass,CurrentClass)];
        Difference = setdiff(1:5,CurrentClass);
        IntermediateProbWrong = [IntermediateProbWrong;sum(XV(TrueClass,Difference),2)];
        
    end
    AUCStorage{InsertIndex+2,1} = IntermediateProb;
    AUCStorage{InsertIndex,1} = IntermediateProbWrong;
    GroupStorage{InsertIndex,1} = repmat(GroupIndex,size(IntermediateProb,1),1);
    GroupStorage{InsertIndex+2,1} = repmat(GroupIndex+2,size(IntermediateProb,1),1);
    InsertIndex = InsertIndex + 4;
    GroupIndex = GroupIndex + 4;
end



load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\DoseProbabilityWithoutOne_Complete.mat');

GroupIndex = 41;
InsertIndex = 41;
for CurrentStain = 3:4
    TrueIndex = StorageGroupIndex{CurrentStain,1};
    XV = StorageProbability{CurrentStain,1};
    IntermediateProb = [];
    IntermediateProbWrong = [];
    for CurrentClass = 1:5
        TrueClass = find(TrueIndex == CurrentClass);
        IntermediateProb = [IntermediateProb;XV(TrueClass,CurrentClass)];
        Difference = setdiff(1:5,CurrentClass);
        IntermediateProbWrong = [IntermediateProbWrong;sum(XV(TrueClass,Difference),2)];
        
    end
    AUCStorage{InsertIndex+2,1} = IntermediateProb;
    AUCStorage{InsertIndex,1} = IntermediateProbWrong;
    GroupStorage{InsertIndex,1} = repmat(GroupIndex,size(IntermediateProb,1),1);
    GroupStorage{InsertIndex+2,1} = repmat(GroupIndex+2,size(IntermediateProb,1),1);
    InsertIndex = InsertIndex + 1;
    GroupIndex = GroupIndex + 1;
end

GroupIndex = 45;
InsertIndex = 45;
for CurrentStain = 5
    TrueIndex = StorageGroupIndex{CurrentStain,1};
    XV = StorageProbability{CurrentStain,1};
    IntermediateProb = [];
    IntermediateProbWrong = [];
    for CurrentClass = 1:5
        TrueClass = find(TrueIndex == CurrentClass);
        IntermediateProb = [IntermediateProb;XV(TrueClass,CurrentClass)];
        Difference = setdiff(1:5,CurrentClass);
        IntermediateProbWrong = [IntermediateProbWrong;sum(XV(TrueClass,Difference),2)];
        
    end
    AUCStorage{InsertIndex+1,1} = IntermediateProb;
    AUCStorage{InsertIndex,1} = IntermediateProbWrong;
    GroupStorage{InsertIndex,1} = repmat(GroupIndex,size(IntermediateProb,1),1);
    GroupStorage{InsertIndex+1,1} = repmat(GroupIndex+1,size(IntermediateProb,1),1);
    InsertIndex = InsertIndex + 1;
    GroupIndex = GroupIndex + 1;
end

ProbMat = cell2mat(AUCStorage);
GroupMat = cell2mat(GroupStorage);
BoxPositions = [1,2,4,5];
LastBoxPositions = BoxPositions;
for CurrentLoop = 1:10
    BoxPositions = [BoxPositions,LastBoxPositions+7];
    LastBoxPositions = LastBoxPositions + 7;
    
end

BoxPositions = [BoxPositions,78,80];

figure
boxplot(ProbMat,GroupMat,'positions',BoxPositions,'Widths',0.8)
set(gcf,'position',[9 521 1092 133])
xlim([-1 82])
ylim([-0.1 1])

%% Supplementary Figure 7B

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following


load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\DoseProbabilityWithoutOne_Complete.mat');

figure
hold on

TrueIndex = StorageGroupIndex{1,1};
XV = StorageProbability{1,1};

ColorMap = flipud([hex2rgb('984EA3');hex2rgb('E41A1C');hex2rgb('FF7F00');hex2rgb('4DAF4A');hex2rgb('377EB8')]);

AUCpERKF = zeros(5,1);

for CurrentClass = 1:5
    
    RestClasses = setdiff(1:5,CurrentClass);
    
    diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2)),XV(:,RestClasses(3)),XV(:,RestClasses(4))],[],2);
    
    % Relabel...
    
    Label = cell(size(TrueIndex,1),1);
    
    NewLabel = {'1','2','3','4','5'};
    
    for CurrentLabel = 1:5
        LabelLocation = find(TrueIndex == CurrentLabel);
        for CurrentLocation = LabelLocation'
            Label{CurrentLocation} = NewLabel{CurrentLabel};
        end
    end
    
    [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass));
    
    plot(X,Y,'Color',ColorMap(CurrentClass,:))
    AUCpERKF(CurrentClass,1) = trapz(X,Y);
    
end


line([0 1],[0 1],'Color','K')
yticks([0 0.2 0.4 0.6 0.8 1])
xlim([0 1])
ylim([0 1])
ylabel('True positive rate')
xlabel('False positive rate')
leg = legend('0ng','6.25ng','10ng','25ng','100ng');
title('Unimodal - non contextual')
axis square
set(leg,'position',[0.5257 0.1456 0.2882 0.2048])

figure
hold on

TrueIndex = StorageGroupIndex{2,1};
XV = StorageProbability{2,1};

ColorMap = flipud([hex2rgb('984EA3');hex2rgb('E41A1C');hex2rgb('FF7F00');hex2rgb('4DAF4A');hex2rgb('377EB8')]);

AUCpERKF = zeros(5,1);

for CurrentClass = 1:5
    
    RestClasses = setdiff(1:5,CurrentClass);
    
    diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2)),XV(:,RestClasses(3)),XV(:,RestClasses(4))],[],2);
    
    % Relabel...
    
    Label = cell(size(TrueIndex,1),1);
    
    NewLabel = {'1','2','3','4','5'};
    
    for CurrentLabel = 1:5
        LabelLocation = find(TrueIndex == CurrentLabel);
        for CurrentLocation = LabelLocation'
            Label{CurrentLocation} = NewLabel{CurrentLabel};
        end
    end
    
    [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass));
    
    plot(X,Y,'Color',ColorMap(CurrentClass,:))
    AUCpERKF(CurrentClass,1) = trapz(X,Y);
    
end


line([0 1],[0 1],'Color','K')
yticks([0 0.2 0.4 0.6 0.8 1])
xlim([0 1])
ylim([0 1])
ylabel('True positive rate')
xlabel('False positive rate')
leg = legend('0ng','6.25ng','10ng','25ng','100ng');
title('Unimodal - contextual')
axis square
set(leg,'position',[0.5257 0.1456 0.2882 0.2048])


figure
hold on

TrueIndex = StorageGroupIndex{3,1};
XV = StorageProbability{3,1};

ColorMap = flipud([hex2rgb('984EA3');hex2rgb('E41A1C');hex2rgb('FF7F00');hex2rgb('4DAF4A');hex2rgb('377EB8')]);

AUCpERKF = zeros(5,1);

for CurrentClass = 1:5
    
    RestClasses = setdiff(1:5,CurrentClass);
    
    diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2)),XV(:,RestClasses(3)),XV(:,RestClasses(4))],[],2);
    
    % Relabel...
    
    Label = cell(size(TrueIndex,1),1);
    
    NewLabel = {'1','2','3','4','5'};
    
    for CurrentLabel = 1:5
        LabelLocation = find(TrueIndex == CurrentLabel);
        for CurrentLocation = LabelLocation'
            Label{CurrentLocation} = NewLabel{CurrentLabel};
        end
    end
    
    [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass));
    
    plot(X,Y,'Color',ColorMap(CurrentClass,:))
    AUCpERKF(CurrentClass,1) = trapz(X,Y);
    
end


line([0 1],[0 1],'Color','K')
yticks([0 0.2 0.4 0.6 0.8 1])
xlim([0 1])
ylim([0 1])
ylabel('True positive rate')
xlabel('False positive rate')
leg = legend('0ng','6.25ng','10ng','25ng','100ng');
title('Multimodal - non contextual')
axis square
set(leg,'position',[0.5257 0.1456 0.2882 0.2048])


figure
hold on

TrueIndex = StorageGroupIndex{4,1};
XV = StorageProbability{4,1};

ColorMap = flipud([hex2rgb('984EA3');hex2rgb('E41A1C');hex2rgb('FF7F00');hex2rgb('4DAF4A');hex2rgb('377EB8')]);

AUCpERKF = zeros(5,1);

for CurrentClass = 1:5
    
    RestClasses = setdiff(1:5,CurrentClass);
    
    diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2)),XV(:,RestClasses(3)),XV(:,RestClasses(4))],[],2);
    
    % Relabel...
    
    Label = cell(size(TrueIndex,1),1);
    
    NewLabel = {'1','2','3','4','5'};
    
    for CurrentLabel = 1:5
        LabelLocation = find(TrueIndex == CurrentLabel);
        for CurrentLocation = LabelLocation'
            Label{CurrentLocation} = NewLabel{CurrentLabel};
        end
    end
    
    [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass));
    
    plot(X,Y,'Color',ColorMap(CurrentClass,:))
    AUCpERKF(CurrentClass,1) = trapz(X,Y);
    
end


line([0 1],[0 1],'Color','K')
yticks([0 0.2 0.4 0.6 0.8 1])
xlim([0 1])
ylim([0 1])
ylabel('True positive rate')
xlabel('False positive rate')
leg = legend('0ng','6.25ng','10ng','25ng','100ng');
title('Multimodal - contextual')
axis square
set(leg,'position',[0.5257 0.1456 0.2882 0.2048])

%% Supplementary Figure 7C

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\DoseProbabilityWithoutOne_Complete.mat');

MeanDifference = zeros(5,5);
XV = StorageProbability{1,1};
TrueIndex = StorageGroupIndex{1,1};
XVTwo = StorageProbability{2,1};
TrueIndexTwo = StorageGroupIndex{2,1};
Significance = zeros(5,5);

for CurrentGroup = 1:5
    CurrentIndex = find(TrueIndex == CurrentGroup);
    for CurrentCounterGroup = 1:5
        CurrentProb = XV(CurrentIndex,CurrentCounterGroup);
        CurrentProbTwo = XVTwo(CurrentIndex,CurrentCounterGroup);
        NaNValues = [find(isnan(CurrentProb));find(isnan(CurrentProbTwo))];
        CurrentProb(NaNValues) = [];
        CurrentProbTwo(NaNValues) = [];
        Difference = mean(CurrentProbTwo) - mean(CurrentProb);
        MeanDifference(CurrentGroup,CurrentCounterGroup) = Difference;
        [~,p] = kstest2(CurrentProb,CurrentProbTwo);
        Significance(CurrentGroup,CurrentCounterGroup) = p;
    end
end

figure
hold on
imagesc(flipud(MeanDifference))
FlippedSignificance = flipud(Significance);

colormap(brewermap(500,'BrBG'))
caxis([-0.31 0.31])

for CurrentGroup = [5,4,3,2,1]
    CurrentP = Significance(CurrentGroup,CurrentGroup);
    if CurrentP <= 0.001
        text(CurrentGroup,CurrentGroup,'***','HorizontalAlignment','center');
    elseif CurrentP <= 0.01
        text(CurrentGroup,CurrentGroup,'**','HorizontalAlignment','center');
    elseif CurrentP <= 0.05
        text(CurrentGroup,CurrentGroup,'*','HorizontalAlignment','center');
    end
end
xlim([0.5 5.5])
ylim([0.5 5.5])
xticks([1 2 3 4 5])
xticklabels({'0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml'})
xlabel('Received EGF concentration')
yticks([1 2 3 4 5])
yticklabels({'0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml'})
ylabel('Predicted EGF concentration')
title('Improvement of prediction by incorporating cellular state information (pERK)')
h = colorbar
axis equal
ylabel(h,'Delta of mean probability compared to no cellular state information')


% Test Significance of Improvement - Multimodal

MeanDifference = zeros(5,5);
XV = StorageProbability{2,1};
TrueIndex = StorageGroupIndex{2,1};
XVTwo = StorageProbability{4,1};
TrueIndexTwo = StorageGroupIndex{4,1};
Significance = zeros(5,5);

for CurrentGroup = 1:5
    CurrentIndex = find(TrueIndex == CurrentGroup);
    for CurrentCounterGroup = 1:5
        CurrentProb = XV(CurrentIndex,CurrentCounterGroup);
        CurrentProbTwo = XVTwo(CurrentIndex,CurrentCounterGroup);
        NaNValues = [find(isnan(CurrentProb));find(isnan(CurrentProbTwo))];
        CurrentProb(NaNValues) = [];
        CurrentProbTwo(NaNValues) = [];
        Difference = mean(CurrentProbTwo) - mean(CurrentProb);
        MeanDifference(CurrentGroup,CurrentCounterGroup) = Difference;
        [~,p] = kstest2(CurrentProb,CurrentProbTwo);
        Significance(CurrentGroup,CurrentCounterGroup) = p;
    end
end

figure
hold on
imagesc(flipud(MeanDifference))
FlippedSignificance = flipud(Significance);

colormap(brewermap(500,'BrBG'))
caxis([-0.31 0.31])

for CurrentGroup = [5,4,3,2,1]
    CurrentP = Significance(CurrentGroup,CurrentGroup);
    if CurrentP <= 0.001
        text(CurrentGroup,CurrentGroup,'***','HorizontalAlignment','center');
    elseif CurrentP <= 0.01
        text(CurrentGroup,CurrentGroup,'**','HorizontalAlignment','center');
    elseif CurrentP <= 0.05
        text(CurrentGroup,CurrentGroup,'*','HorizontalAlignment','center');
    end
end
xlim([0.5 5.5])
ylim([0.5 5.5])
xticks([1 2 3 4 5])
xticklabels({'0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml'})
xlabel('Received EGF concentration')
yticks([1 2 3 4 5])
yticklabels({'0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml'})
ylabel('Predicted EGF concentration')
title('Improvement of prediction by incorporating the multimodal response')
h = colorbar
ylabel(h,'Delta of mean probability compared to unimodal response')
axis equal


%% Supplementary Figure 7D

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following


%% Supplementary Figure 7E

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_2.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\Functions\umapFileExchange (1.2.1)\umap\umap.jar');
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\SingleCellDR_Normed.mat');

% Multimodal FInal Plots

% Multimodal - No Inhibition

ModelWells = [14,23,32];
ResponseStain = [26,27,29];

Index = [];
ModelResponseData = [];
ModelFeatureData = [];

GroupIndex = 1;

for CurrentWell = ModelWells
    WellIndex = find(ismember(C_linx_clean,CurrentWell));
    ModelResponseData = [ModelResponseData;CleanResponseDataLog(WellIndex,ResponseStain)];
    ModelFeatureData = [ModelFeatureData;CleanFeatureDataZPC(WellIndex,:)];
    Index = [Index;repmat(GroupIndex,size(WellIndex,1),1)];
    GroupIndex = GroupIndex + 1;
end


MDL = cvglmnet([ModelResponseData,ModelFeatureData],Index,'multinomial');
PosteriorClass = cvglmnetPredict(MDL,[ModelResponseData,ModelFeatureData],'lambda_1se','response');

BoxPos = [1,2,3];
figure
hold on

for CurrentTrue = 1:3
    TrueClass = find(Index == CurrentTrue);
    boxplot(PosteriorClass(TrueClass,:),'positions',BoxPos,'Widths',0.65);
    
    BoxPos = BoxPos + 4; 
end
xlim([0.25 11.75])
ylim([-0.1 1])
axis square


% Multimodal - MEK Inhibition

ModelWells = [11,20,29];
ResponseStain = [26,27,29];

Index = [];
ModelResponseData = [];
ModelFeatureData = [];

GroupIndex = 1;

for CurrentWell = ModelWells
    WellIndex = find(ismember(C_linx_clean,CurrentWell));
    ModelResponseData = [ModelResponseData;CleanResponseDataLog(WellIndex,ResponseStain)];
    ModelFeatureData = [ModelFeatureData;CleanFeatureDataZPC(WellIndex,:)];
    Index = [Index;repmat(GroupIndex,size(WellIndex,1),1)];
    GroupIndex = GroupIndex + 1;
end


MDL = cvglmnet([ModelResponseData],Index,'multinomial');
PosteriorClass = cvglmnetPredict(MDL,[ModelResponseData],'lambda_1se','response');

BoxPos = [1,2,3];
figure
hold on

for CurrentTrue = 1:3
    TrueClass = find(Index == CurrentTrue);
    boxplot(PosteriorClass(TrueClass,:),'positions',BoxPos,'Widths',0.65);
    
    BoxPos = BoxPos + 4; 
end
xlim([0.25 11.75])
ylim([-0.1 1])
axis square




% Multimodal - PI3K Inhibition

ModelWells = [12,21,30];
ResponseStain = [26,27,29];

Index = [];
ModelResponseData = [];
ModelFeatureData = [];

GroupIndex = 1;

for CurrentWell = ModelWells
    WellIndex = find(ismember(C_linx_clean,CurrentWell));
    ModelResponseData = [ModelResponseData;CleanResponseDataLog(WellIndex,ResponseStain)];
    ModelFeatureData = [ModelFeatureData;CleanFeatureDataZPC(WellIndex,:)];
    Index = [Index;repmat(GroupIndex,size(WellIndex,1),1)];
    GroupIndex = GroupIndex + 1;
end


MDL = cvglmnet([ModelResponseData],Index,'multinomial');
PosteriorClass = cvglmnetPredict(MDL,[ModelResponseData],'lambda_1se','response');

BoxPos = [1,2,3];
figure
hold on

for CurrentTrue = 1:3
    TrueClass = find(Index == CurrentTrue);
    boxplot(PosteriorClass(TrueClass,:),'positions',BoxPos,'Widths',0.65);
    
    BoxPos = BoxPos + 4; 
end
xlim([0.25 11.75])
ylim([-0.1 1])
axis square


% Multimodal - Both Inhibition

ModelWells = [13,22,31];
%ResponseStain = [1,2,25,26,27,28,29,31];
ResponseStain = [26,27,29];

Index = [];
ModelResponseData = [];
ModelFeatureData = [];

GroupIndex = 1;

for CurrentWell = ModelWells
    WellIndex = find(ismember(C_linx_clean,CurrentWell));
    ModelResponseData = [ModelResponseData;CleanResponseDataLog(WellIndex,ResponseStain)];
    ModelFeatureData = [ModelFeatureData;CleanFeatureDataZPC(WellIndex,:)];
    Index = [Index;repmat(GroupIndex,size(WellIndex,1),1)];
    GroupIndex = GroupIndex + 1;
end


MDL = cvglmnet([ModelResponseData],Index,'multinomial');
PosteriorClass = cvglmnetPredict(MDL,[ModelResponseData],'lambda_1se','response');

BoxPos = [1,2,3];
figure
hold on

for CurrentTrue = 1:3
    TrueClass = find(Index == CurrentTrue);
    boxplot(PosteriorClass(TrueClass,:),'positions',BoxPos,'Widths',0.65);
    
    BoxPos = BoxPos + 4; 
end
xlim([0.25 11.75])
ylim([-0.1 1])
axis square



%% Supplementary Figure 7F

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_2.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\Functions\umapFileExchange (1.2.1)\umap\umap.jar');
load('Z:\bkramer\190218_184A1_EGF\Processed_Data\CubeHelixLong.mat');
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\SingleCellDR_Normed.mat');


% Multimodal - No Inhibition

ModelWells = [14,23,32];
ResponseStain = [26,27,29];
ColorMap = flipud([hex2rgb('984EA3');hex2rgb('E41A1C');hex2rgb('FF7F00');hex2rgb('4DAF4A');hex2rgb('377EB8')]);

Index = [];
ModelResponseData = [];
ModelFeatureData = [];

GroupIndex = 1;

for CurrentWell = ModelWells
    WellIndex = find(ismember(C_linx_clean,CurrentWell));
    ModelResponseData = [ModelResponseData;CleanResponseDataLog(WellIndex,ResponseStain)];
    ModelFeatureData = [ModelFeatureData;CleanFeatureDataZPC(WellIndex,:)];
    Index = [Index;repmat(GroupIndex,size(WellIndex,1),1)];
    GroupIndex = GroupIndex + 1;
end


TrueIndex = Index;

MDL = cvglmnet([ModelResponseData,ModelFeatureData],Index,'multinomial');
PosteriorClass = cvglmnetPredict(MDL,[ModelResponseData,ModelFeatureData],'lambda_1se','response');
XV = PosteriorClass;

figure
hold on
for CurrentClass = 1:3
    
    RestClasses = setdiff(1:3,CurrentClass);
    
    diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2))],[],2);
    
    % Relabel...
    
    Label = cell(size(TrueIndex,1),1);
    
    NewLabel = {'1','2','3'};
    
    for CurrentLabel = 1:3
        LabelLocation = find(TrueIndex == CurrentLabel);
        for CurrentLocation = LabelLocation'
            Label{CurrentLocation} = NewLabel{CurrentLabel};
        end
    end
    
    [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass));
    
    plot(X,Y,'Color',ColorMap(CurrentClass,:))
    
end


line([0 1],[0 1],'Color','K')
yticks([0 0.2 0.4 0.6 0.8 1])
xlim([0 1])
ylim([0 1])
ylabel('True positive rate')
xlabel('False positive rate')
leg = legend('1ng','10ng','100ng');
axis square
set(leg,'position',[0.5257 0.1456 0.2882 0.2048])



% Multimodal - MEK Inhibition

ModelWells = [11,20,29];
ResponseStain = [26,27,29];

Index = [];
ModelResponseData = [];
ModelFeatureData = [];

GroupIndex = 1;

for CurrentWell = ModelWells
    WellIndex = find(ismember(C_linx_clean,CurrentWell));
    ModelResponseData = [ModelResponseData;CleanResponseDataLog(WellIndex,ResponseStain)];
    ModelFeatureData = [ModelFeatureData;CleanFeatureDataZPC(WellIndex,:)];
    Index = [Index;repmat(GroupIndex,size(WellIndex,1),1)];
    GroupIndex = GroupIndex + 1;
end

TrueIndex = Index;
MDL = cvglmnet([ModelResponseData],Index,'multinomial');
PosteriorClass = cvglmnetPredict(MDL,[ModelResponseData],'lambda_1se','response');
XV = PosteriorClass;


figure
hold on
for CurrentClass = 1:3
    
    RestClasses = setdiff(1:3,CurrentClass);
    
    diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2))],[],2);
    
    % Relabel...
    
    Label = cell(size(TrueIndex,1),1);
    
    NewLabel = {'1','2','3'};
    
    for CurrentLabel = 1:3
        LabelLocation = find(TrueIndex == CurrentLabel);
        for CurrentLocation = LabelLocation'
            Label{CurrentLocation} = NewLabel{CurrentLabel};
        end
    end
    
    [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass));
    
    plot(X,Y,'Color',ColorMap(CurrentClass,:))
    
end


line([0 1],[0 1],'Color','K')
yticks([0 0.2 0.4 0.6 0.8 1])
xlim([0 1])
ylim([0 1])
ylabel('True positive rate')
xlabel('False positive rate')
leg = legend('1ng','10ng','100ng');
axis square
set(leg,'position',[0.5257 0.1456 0.2882 0.2048])



% Multimodal - PI3K Inhibition

ModelWells = [12,21,30];
ResponseStain = [26,27,29];

Index = [];
ModelResponseData = [];
ModelFeatureData = [];

GroupIndex = 1;

for CurrentWell = ModelWells
    WellIndex = find(ismember(C_linx_clean,CurrentWell));
    ModelResponseData = [ModelResponseData;CleanResponseDataLog(WellIndex,ResponseStain)];
    ModelFeatureData = [ModelFeatureData;CleanFeatureDataZPC(WellIndex,:)];
    Index = [Index;repmat(GroupIndex,size(WellIndex,1),1)];
    GroupIndex = GroupIndex + 1;
end


TrueIndex = Index;
MDL = cvglmnet([ModelResponseData],Index,'multinomial');
PosteriorClass = cvglmnetPredict(MDL,[ModelResponseData],'lambda_1se','response');
XV = PosteriorClass;


figure
hold on
for CurrentClass = 1:3
    
    RestClasses = setdiff(1:3,CurrentClass);
    
    diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2))],[],2);
    
    % Relabel...
    
    Label = cell(size(TrueIndex,1),1);
    
    NewLabel = {'1','2','3'};
    
    for CurrentLabel = 1:3
        LabelLocation = find(TrueIndex == CurrentLabel);
        for CurrentLocation = LabelLocation'
            Label{CurrentLocation} = NewLabel{CurrentLabel};
        end
    end
    
    [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass));
    
    plot(X,Y,'Color',ColorMap(CurrentClass,:))
    
end


line([0 1],[0 1],'Color','K')
yticks([0 0.2 0.4 0.6 0.8 1])
xlim([0 1])
ylim([0 1])
ylabel('True positive rate')
xlabel('False positive rate')
leg = legend('1ng','10ng','100ng');
axis square
set(leg,'position',[0.5257 0.1456 0.2882 0.2048])




% Multimodal - Both Inhibition

ModelWells = [13,22,31];
%ResponseStain = [1,2,25,26,27,28,29,31];
ResponseStain = [26,27,29];

Index = [];
ModelResponseData = [];
ModelFeatureData = [];

GroupIndex = 1;

for CurrentWell = ModelWells
    WellIndex = find(ismember(C_linx_clean,CurrentWell));
    ModelResponseData = [ModelResponseData;CleanResponseDataLog(WellIndex,ResponseStain)];
    ModelFeatureData = [ModelFeatureData;CleanFeatureDataZPC(WellIndex,:)];
    Index = [Index;repmat(GroupIndex,size(WellIndex,1),1)];
    GroupIndex = GroupIndex + 1;
end


TrueIndex = Index;
MDL = cvglmnet([ModelResponseData],Index,'multinomial');
PosteriorClass = cvglmnetPredict(MDL,[ModelResponseData],'lambda_1se','response');
XV = PosteriorClass;


figure
hold on
for CurrentClass = 1:3
    
    RestClasses = setdiff(1:3,CurrentClass);
    
    diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2))],[],2);
    
    % Relabel...
    
    Label = cell(size(TrueIndex,1),1);
    
    NewLabel = {'1','2','3'};
    
    for CurrentLabel = 1:3
        LabelLocation = find(TrueIndex == CurrentLabel);
        for CurrentLocation = LabelLocation'
            Label{CurrentLocation} = NewLabel{CurrentLabel};
        end
    end
    
    [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass));
    
    plot(X,Y,'Color',ColorMap(CurrentClass,:))
    
end


line([0 1],[0 1],'Color','K')
yticks([0 0.2 0.4 0.6 0.8 1])
xlim([0 1])
ylim([0 1])
ylabel('True positive rate')
xlabel('False positive rate')
leg = legend('1ng','10ng','100ng');
axis square
set(leg,'position',[0.5257 0.1456 0.2882 0.2048])


