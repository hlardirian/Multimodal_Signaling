%% Load Data
% Adjust path to wherever data and function folder is located
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_3.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\Functions\umapFileExchange (1.2.1)\umap\umap.jar');
load('Z:\bkramer\210603_184A1_EGF_Drug_Fish_4i\ProcessedData\OC_5_Drug_960.mat')
load('Z:\bkramer\210603_184A1_EGF_Drug_Fish_4i\ProcessedData\NonRespondingUmap.mat')
load('Z:\bkramer\210603_184A1_EGF_Drug_Fish_4i\ProcessedData\ResponseReductionUmap_3.mat')


%% Figure 5A 

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

load('Z:\bkramer\210603_184A1_EGF_Drug_Fish_4i\ProcessedData\OC_AllEGF_960.mat')

%

StorageIndicator = zeros(size(OverlapCoefficientStorage,1),1);

for CurrentFeature = 1:size(OverlapCoefficientStorage,1)
    CurrentOverlap = OverlapCoefficientStorage{CurrentFeature,1};
    LinOverlap = CurrentOverlap(:);
    if any(LinOverlap <= 0.825) == 1
        StorageIndicator(CurrentFeature,1) = 0;
    else
        StorageIndicator(CurrentFeature,1) = 1;
    end

end

CentroidHeader = find(contains(FeatureHeader,'Local_Centroid'));
StorageIndicator(CentroidHeader,:) = 0;

IndexKeep = find(StorageIndicator);
IndexOtherKeep = find(StorageIndicator == 0);

FeatureHeaderRemaining = cell(numel(IndexKeep),1);

InsertIndex = 1;
for CurrentFeature = IndexKeep'
    FeatureHeaderRemaining{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;  
end

FeatureHeaderChanging = cell(numel(IndexOtherKeep),1);

InsertIndex = 1;
for CurrentFeature = IndexOtherKeep'
    FeatureHeaderChanging{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;  
end

% Define Responding and non-responding state space

NonRespondingFeatureData = FeatureData(:,IndexKeep);
RespondingFeatureData = FeatureData(:,IndexOtherKeep);

% Non Responding state space across Time %% 

% Also Log Transform

LogFeatureData = zeros(size(NonRespondingFeatureData,1),size(NonRespondingFeatureData,2));

for CurrentWell = 1:240
    WellIndex = find(ismember(LinearIndex,CurrentWell));
    for CurrentFeature = 1:size(NonRespondingFeatureData,2)
        
        CurrentFeatureData = NonRespondingFeatureData(WellIndex,CurrentFeature);
        
        if any(CurrentFeatureData <= 0) == 1
            CurrentFeatureData = CurrentFeatureData + 1;
        end
            
        LogFeatureData(WellIndex,CurrentFeature) = real(log2(CurrentFeatureData));
    
    end
end

% z-score all features per well...

FeatureZData = zeros(size(LogFeatureData,1),size(LogFeatureData,2)*2);

for CurrentWell = 1:240
    WellIndex = find(ismember(LinearIndex,CurrentWell));
    for CurrentFeature = 1:size(NonRespondingFeatureData,2)
        FeatureZData(WellIndex,CurrentFeature) = zscore(LogFeatureData(WellIndex,CurrentFeature));
        FeatureZData(WellIndex,CurrentFeature+size(LogFeatureData,2)) = zscore(NonRespondingFeatureData(WellIndex,CurrentFeature));
    end
end

FeatureZData(isnan(FeatureZData)) = 0;

% Do PCA

RandomSample = randperm(size(FeatureZData,1),50000);

[PCCoeff,~,~,~,ExplainedVariance] = pca(FeatureZData(RandomSample,:));

Threshold = find(cumsum(ExplainedVariance) >= 95,1,'first');

PCFeatureData = FeatureZData*PCCoeff(:,1:Threshold);

% Quantile normalize PC

EGFStorage = {'0nM','0.78nM','3.9nM'}%,'0.78nM','0.78nM','0.78nM'};
DrugStorage = {'No.Drug','No.Drug','No.Drug'}%,'AKT.1','MEK.1','MEK.AKT.1'};
TimeStorage = {'960min','960min','960min'}%,'960min','960min','960min'};

% EGFStorage = {'0nM','0.78nM','3.9nM'};
% DrugStorage = {'No.Drug','No.Drug','No.Drug'};
% TimeStorage = {'960min','960min','960min'};

OriginalWellIndex = [];

% NormDadata

EGFString = EGFStorage{1,2};
TimeString = TimeStorage{1,1};
DrugString = DrugStorage{1,1};

EGF = find(contains(ConditionNames,EGFString));
Time = find(contains(ConditionNames,TimeString));
Drug = find(contains(ConditionNames,DrugString));

FirstI = intersect(EGF,Time);
Wells = intersect(FirstI,Drug);

NewWells = zeros(2,1);

NewWells(1) = Wells(end-1);
NewWells(2) = Wells(end);

Wells = NewWells;

WellIndex = find(ismember(LinearIndex,Wells));

WellNormData = PCFeatureData(WellIndex,:);

UMAPData = [];
OriginalWellIndex = [];
StorageIndicator = [];
IndicatorIndex = 1;

for CurrentCondition = 1:size(EGFStorage,2)

    
    EGFString = EGFStorage{1,CurrentCondition};
    TimeString = TimeStorage{1,CurrentCondition};
    DrugString = DrugStorage{1,CurrentCondition};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellFeatureData = PCFeatureData(WellIndex,:);
    
    % Quantile Norm those data...
    
    for CurrentPC = 1:size(PCFeatureData,2)
        
        CurrentNormData = WellFeatureData(:,CurrentPC);
        ReferenceData = WellNormData(:,CurrentPC);
        
        NumberReference = numel(ReferenceData);
        NumberData = numel(CurrentNormData);
        
        Iterations = 40;
        
        for CurrentIteration = 1:Iterations
            CurrentReferenceData = ReferenceData;
            if NumberReference > NumberData
                Delta = NumberReference - NumberData;
                RandomDeletion = randperm(NumberReference,Delta);
                CurrentReferenceData(RandomDeletion,:) = [];
            elseif NumberReference < NumberData
                Delta = NumberData - NumberReference;
                RandomInsertion = datasample(NumberReference,Delta,'Replace',true);
                CurrentReferenceData = [CurrentReferenceData;CurrentReferenceData(RandomInsertion,:)];
            else
            end
            
            IterationsSecond = 40;
            for SecondIteration = IterationsSecond
                NormedData = quantilenorm([CurrentReferenceData,CurrentNormData]);
                CurrentNormData = NormedData(:,2);
            end
        end
        
        WellFeatureData(:,CurrentPC) = CurrentNormData;
    end
    
    PCFeatureData(WellIndex,:) = WellFeatureData;
    UMAPData = [UMAPData;WellFeatureData];
    OriginalWellIndex = [OriginalWellIndex;WellIndex];
    StorageIndicator = [StorageIndicator;ones(numel(WellIndex),1)*IndicatorIndex];
    IndicatorIndex = IndicatorIndex + 1;

end


% DO UMAP - EVERY UMAP RUN CAN DIFFER

NumberNeighbors = 30;
DistanceMetric = 'cityblock';
[ReductionUmapReduced,UMAPCoord] = run_umap(UMAPData,'n_neighbors',NumberNeighbors,'metric',DistanceMetric);

% Put Back Into Umap

ReductionUmap = zeros(size(PCFeatureData,1),2);
ReductionUmap(OriginalWellIndex,:) = ReductionUmapReduced;


% Plot UMAP

PlotUmapData = ReductionUmap(OriginalWellIndex,:);

RandomShuffle = randperm(size(PlotUmapData,1),size(PlotUmapData,1));

figure
scatter(PlotUmapData(RandomShuffle,1),PlotUmapData(RandomShuffle,2),10,StorageIndicator(RandomShuffle),'filled');

axis square


%% Figure 5B 

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

% Find Features with overlap coefficient too small

load('Z:\bkramer\210603_184A1_EGF_Drug_Fish_4i\ProcessedData\OC_AllEGF_960.mat')

%

StorageIndicator = zeros(size(OverlapCoefficientStorage,1),1);

for CurrentFeature = 1:size(OverlapCoefficientStorage,1)
    CurrentOverlap = OverlapCoefficientStorage{CurrentFeature,1};
    LinOverlap = CurrentOverlap(:);
    if any(LinOverlap <= 0.75) == 1
        StorageIndicator(CurrentFeature,1) = 0;
    else
        StorageIndicator(CurrentFeature,1) = 1;
    end

end

CentroidHeader = find(contains(FeatureHeader,'Local_Centroid'));
StorageIndicator(CentroidHeader,:) = 0;
IndexKeep = find(StorageIndicator);

FeatureHeaderRemaining = cell(numel(IndexKeep),1);

InsertIndex = 1;
for CurrentFeature = IndexKeep'
    FeatureHeaderRemaining{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;  
end

IndexKick = setdiff(1:size(FeatureHeader,1),IndexKeep);

FeatureHeaderKick = cell(numel(IndexKick,1));

InsertIndex = 1;

for CurrentFeature = IndexKick
    FeatureHeaderKick{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;  
end

% KickOut Features

IntensityKeep = find(contains(FeatureHeaderRemaining,'Intensity'));
IntensityKick = find(contains(FeatureHeaderKick,'Intensity'));

% Morphology

MorphologyKeep = find(contains(FeatureHeaderRemaining,'Morphology'));
MorphologyKick = find(contains(FeatureHeaderKick,'Morphology'));

PlotMatrix = [MorphologyKeep;MorphologyKick];


% Cell Cycle...

CCKeep = [find(contains(FeatureHeaderRemaining,'CyclinB'));find(contains(FeatureHeaderRemaining,'DAPI'));find(contains(FeatureHeaderRemaining,'PCNA'));find(contains(FeatureHeaderRemaining,'pRB'))];
CCKeep = intersect(IntensityKeep,CCKeep);
CCKick = [find(contains(FeatureHeaderKick,'CyclinB'));find(contains(FeatureHeaderKick,'DAPI'));find(contains(FeatureHeaderKick,'PCNA'));find(contains(FeatureHeaderKick,'pRB'))];
CCKick = intersect(IntensityKick,CCKick);  

% Cytoskeleton

CytoKeep = [find(contains(FeatureHeaderRemaining,'Vimentin'));find(contains(FeatureHeaderRemaining,'Actin'));find(contains(FeatureHeaderRemaining,'aTubulin'));find(contains(FeatureHeaderRemaining,'bTubulin'))];
CytoKeep = intersect(IntensityKeep,CytoKeep);
CytoKick = [find(contains(FeatureHeaderKick,'Vimentin'));find(contains(FeatureHeaderKick,'Actin'));find(contains(FeatureHeaderKick,'aTubulin'));find(contains(FeatureHeaderKick,'bTubulin'))];
CytoKick = intersect(IntensityKick,CytoKick);  

% Organelles

OrgaKeep = [find(contains(FeatureHeaderRemaining,'HSP60'));find(contains(FeatureHeaderRemaining,'GM130'));find(contains(FeatureHeaderRemaining,'ERGIC53'));find(contains(FeatureHeaderRemaining,'Paxillin'));find(contains(FeatureHeaderRemaining,'GRP94'));find(contains(FeatureHeaderRemaining,'HSC70'))];
OrgaKeep = intersect(IntensityKeep,OrgaKeep);
OrgaKick = [find(contains(FeatureHeaderKick,'HSP60'));find(contains(FeatureHeaderKick,'GM130'));find(contains(FeatureHeaderKick,'ERGIC53'));find(contains(FeatureHeaderKick,'Paxillin'));find(contains(FeatureHeaderKick,'GRP94'));find(contains(FeatureHeaderRemaining,'HSC70'))];
OrgaKick = intersect(IntensityKick,OrgaKick);  

% Transcription

TransKeep = find(contains(FeatureHeaderRemaining,'pPolII'));
TransKeep = intersect(IntensityKeep,TransKeep);
TransKick = find(contains(FeatureHeaderKick,'pPolII'));
TransKick = intersect(IntensityKick,TransKick);  

% Exo/Endocytosis

ExoKeep = [find(contains(FeatureHeaderRemaining,'EEA1'));find(contains(FeatureHeaderRemaining,'VPS35'));find(contains(FeatureHeaderRemaining,'Sec13'))];
ExoKeep = intersect(IntensityKeep,ExoKeep);
ExoKick = [find(contains(FeatureHeaderKick,'VPS35'));find(contains(FeatureHeaderKick,'DAPI'));find(contains(FeatureHeaderRemaining,'Sec13'))];
ExoKick = intersect(IntensityKeep,ExoKick);

% Texture

TextureKeep = find(contains(FeatureHeaderRemaining,'Texture'));
TextureKick = find(contains(FeatureHeaderKick,'Texture'));

PlotMatrix = [1,9;numel(CytoKick),numel(CytoKeep);numel(MorphologyKick),numel(MorphologyKeep);numel(OrgaKick)+numel(ExoKick),numel(OrgaKeep)+numel(ExoKeep);numel(TransKick),numel(TransKeep);numel(CCKick),numel(CCKeep)];


NormPlotMatrix = PlotMatrix./sum(PlotMatrix,2);

figure
bar(NormPlotMatrix(:,1));
ylim([0 1])
xlim([0.3 6.7])


figure
bar(NormPlotMatrix(:,2));
ylim([0 1])
xlim([0.3 6.7])


figure
bar(NormPlotMatrix(:,[2,1]),'stacked')
xlim([0.3 6.7])


%% Figure 5C 

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

EGFStorage = {'0nM','0.78nM','3.9nM'};
DrugStorage = {'No.Drug','No.Drug','No.Drug'};
TimeStorage = {'5min','40min','90min','960min'};

Eval = 0:0.01:11;


for CurrentEGF = 1:size(EGFStorage,2)
    figure
    hold on
    StorageBar = zeros(4,2);
    for CurrentTime = 1:size(TimeStorage,2)
        
        EGFString = EGFStorage{1,CurrentEGF};
        TimeString = TimeStorage{1,CurrentTime};
        DrugString = DrugStorage{1,CurrentEGF};
        
        EGF = find(contains(ConditionNames,EGFString));
        Time = find(contains(ConditionNames,TimeString));
        Drug = find(contains(ConditionNames,DrugString));
        
        FirstI = intersect(EGF,Time);
        Wells = intersect(FirstI,Drug);
        
        NewWells = zeros(2,1);
        
        NewWells(1) = Wells(end-1);
        NewWells(2) = Wells(end);
        
        Wells = NewWells;
        
        WellIndex = find(ismember(LinearIndex,Wells));      
        WellFeatureData = log2(FeatureData(WellIndex,120));
        
        AboveCells = find(WellFeatureData > 5.5);
        BelowCells = find(WellFeatureData <= 5.5);

        StorageBar(CurrentTime,1) = numel(BelowCells)./numel(WellIndex);
        StorageBar(CurrentTime,2) = numel(AboveCells)./numel(WellIndex);

    end
    bar(StorageBar,'stacked')
    axis square
    ylim([0 1])
    xlim([0.5 4.5])

end

%% Figure 5D 

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

load('Z:\bkramer\210603_184A1_EGF_Drug_Fish_4i\ProcessedData\OC_AllEGF_960.mat')


StorageIndicator = zeros(size(OverlapCoefficientStorage,1),1);

for CurrentFeature = 1:size(OverlapCoefficientStorage,1)
    CurrentOverlap = OverlapCoefficientStorage{CurrentFeature,1};
    LinOverlap = CurrentOverlap(:);
    if any(LinOverlap <= 0.75) == 1
        StorageIndicator(CurrentFeature,1) = 0;
    else
        StorageIndicator(CurrentFeature,1) = 1;
    end

end

CentroidHeader = find(contains(FeatureHeader,'Local_Centroid'));
StorageIndicator(CentroidHeader,:) = 0;

IndexKeep = find(StorageIndicator);
IndexOtherKeep = find(StorageIndicator == 0);

FeatureHeaderRemaining = cell(numel(IndexKeep),1);

InsertIndex = 1;
for CurrentFeature = IndexKeep'
    FeatureHeaderRemaining{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;  
end

FeatureHeaderChanging = cell(numel(IndexOtherKeep),1);

InsertIndex = 1;
for CurrentFeature = IndexOtherKeep'
    FeatureHeaderChanging{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;  
end

% Define Responding and non-responding state space

NonRespondingFeatureData = FeatureData(:,IndexKeep);
RespondingFeatureData = FeatureData(:,IndexOtherKeep);


% Also Log Transform

LogFeatureData = zeros(size(NonRespondingFeatureData,1),size(NonRespondingFeatureData,2));

for CurrentWell = 1:240
    WellIndex = find(ismember(LinearIndex,CurrentWell));
    for CurrentFeature = 1:size(NonRespondingFeatureData,2)
        
        CurrentFeatureData = NonRespondingFeatureData(WellIndex,CurrentFeature);
        
        if any(CurrentFeatureData <= 0) == 1
            CurrentFeatureData = CurrentFeatureData + 1;
        end
            
        LogFeatureData(WellIndex,CurrentFeature) = real(log2(CurrentFeatureData));
    
    end
end

% z-score all features per well...

FeatureZData = zeros(size(LogFeatureData,1),size(LogFeatureData,2)*2);

for CurrentWell = 1:240
    WellIndex = find(ismember(LinearIndex,CurrentWell));
    for CurrentFeature = 1:size(NonRespondingFeatureData,2)
        FeatureZData(WellIndex,CurrentFeature) = zscore(LogFeatureData(WellIndex,CurrentFeature));
        FeatureZData(WellIndex,CurrentFeature+size(LogFeatureData,2)) = zscore(NonRespondingFeatureData(WellIndex,CurrentFeature));
    end
end

FeatureZData(isnan(FeatureZData)) = 0;

% Do PCA

RandomSample = randperm(size(FeatureZData,1),50000);

[PCCoeff,~,~,~,ExplainedVariance] = pca(FeatureZData(RandomSample,:));

Threshold = find(cumsum(ExplainedVariance) >= 95,1,'first');

PCFeatureData = FeatureZData*PCCoeff(:,1:Threshold);

% Quantile normalize PC

EGFStorage = {'0nM','0.78nM','3.9nM'};
DrugStorage = {'No.Drug','AKT.1','MEK.1','MEK.AKT.1'};
TimeStorage = {'5min','40min','90min','960min'};

% EGFStorage = {'0nM','0.78nM','3.9nM'};
% DrugStorage = {'No.Drug','No.Drug','No.Drug'};
% TimeStorage = {'960min','960min','960min'};

OriginalWellIndex = [];

% NormDadata

EGFString = EGFStorage{1,2};
TimeString = TimeStorage{1,4};
DrugString = DrugStorage{1,1};

EGF = find(contains(ConditionNames,EGFString));
Time = find(contains(ConditionNames,TimeString));
Drug = find(contains(ConditionNames,DrugString));

FirstI = intersect(EGF,Time);
Wells = intersect(FirstI,Drug);

NewWells = zeros(2,1);

NewWells(1) = Wells(end-1);
NewWells(2) = Wells(end);

Wells = NewWells;

WellIndex = find(ismember(LinearIndex,Wells));

WellNormData = PCFeatureData(WellIndex,:);

UMAPData = [];
OriginalWellIndex = [];
StorageIndicator = [];
IndicatorIndex = 1;

for CurrentEGF = 1:size(EGFStorage,2)
    for CurrentDrug = 1:size(DrugStorage,2)
        for CurrentTime = 1:size(TimeStorage,2)
            
            
            EGFString = EGFStorage{1,CurrentEGF};
            TimeString = TimeStorage{1,CurrentTime};
            DrugString = DrugStorage{1,CurrentDrug};
            
            EGF = find(contains(ConditionNames,EGFString));
            Time = find(contains(ConditionNames,TimeString));
            Drug = find(contains(ConditionNames,DrugString));
            
            FirstI = intersect(EGF,Time);
            Wells = intersect(FirstI,Drug);
            
            NewWells = zeros(2,1);
            
            NewWells(1) = Wells(end-1);
            NewWells(2) = Wells(end);
            
            Wells = NewWells;
            
            WellIndex = find(ismember(LinearIndex,Wells));
            
            WellFeatureData = PCFeatureData(WellIndex,:);
            
            % Quantile Norm those data...
            
            for CurrentPC = 1:size(PCFeatureData,2)
                
                CurrentNormData = WellFeatureData(:,CurrentPC);
                ReferenceData = WellNormData(:,CurrentPC);
                
                NumberReference = numel(ReferenceData);
                NumberData = numel(CurrentNormData);
                
                Iterations = 40;
                
                for CurrentIteration = 1:Iterations
                    CurrentReferenceData = ReferenceData;
                    if NumberReference > NumberData
                        Delta = NumberReference - NumberData;
                        RandomDeletion = randperm(NumberReference,Delta);
                        CurrentReferenceData(RandomDeletion,:) = [];
                    elseif NumberReference < NumberData
                        Delta = NumberData - NumberReference;
                        RandomInsertion = datasample(NumberReference,Delta,'Replace',true);
                        CurrentReferenceData = [CurrentReferenceData;CurrentReferenceData(RandomInsertion,:)];
                    else
                    end
                    
                    IterationsSecond = 40;
                    for SecondIteration = IterationsSecond
                        NormedData = quantilenorm([CurrentReferenceData,CurrentNormData]);
                        CurrentNormData = NormedData(:,2);
                    end
                end
                
                WellFeatureData(:,CurrentPC) = CurrentNormData;
            end
            
            PCFeatureData(WellIndex,:) = WellFeatureData;
            UMAPData = [UMAPData;WellFeatureData];
            OriginalWellIndex = [OriginalWellIndex;WellIndex];
            StorageIndicator = [StorageIndicator;ones(numel(WellIndex),1)*IndicatorIndex];
            IndicatorIndex = IndicatorIndex + 1;
            
        end
    end
end



% Plot pRB weirdly

ZeroWells = find(StorageIndicator == 1);
WellIndex = OriginalWellIndex(ZeroWells,:);
UmapData = ReductionUmap(WellIndex,:);
FeatureDataWell = real(log2(FeatureData(WellIndex,120)));
PositiveCells = find(FeatureDataWell > 7);
PositiveUmap = UmapData(PositiveCells,:);
FullUmapData = ReductionUmap(OriginalWellIndex,:);

pRBIndicator = zeros(size(UmapData,1),1);

pRBIndicator(PositiveCells,:) = 1;

% Find Neighbors

NeighborPositive = knnsearch(UmapData,FullUmapData,'K',15);

PlotRBIndicator = zeros(size(FullUmapData,1),15);

for CurrentCell = 1:size(NeighborPositive,1)
    CurrentNeighbors = NeighborPositive(CurrentCell,:);
    PlotRBIndicator(CurrentCell,:) = pRBIndicator(CurrentNeighbors,:);   
end

PlotRBIndicator = mean(PlotRBIndicator,2);



figure
scatter(FullUmapData(:,1),FullUmapData(:,2),20,PlotRBIndicator,'filled');
xlim([-5.2 4.3])
ylim([-4 7])
CustomColorMap = hot(200);
CustomColorMap = CustomColorMap(1:100,:).^2;
CustomColorMap = [CustomColorMap];
caxis([0 1])
colormap(CustomColorMap)
axis square

colorbar

ZeroWells = find(StorageIndicator == 2);
WellIndex = OriginalWellIndex(ZeroWells,:);
UmapData = ReductionUmap(WellIndex,:);
FeatureDataWell = real(log2(FeatureData(WellIndex,120)));
PositiveCells = find(FeatureDataWell > 7);
PositiveUmap = UmapData(PositiveCells,:);
FullUmapData = ReductionUmap(OriginalWellIndex,:);

pRBIndicator = zeros(size(UmapData,1),1);

pRBIndicator(PositiveCells,:) = 1;

% Find Neighbors

NeighborPositive = knnsearch(UmapData,FullUmapData,'K',15);

PlotRBIndicator = zeros(size(FullUmapData,1),15);

for CurrentCell = 1:size(NeighborPositive,1)
    CurrentNeighbors = NeighborPositive(CurrentCell,:);
    PlotRBIndicator(CurrentCell,:) = pRBIndicator(CurrentNeighbors,:);   
end

PlotRBIndicator = mean(PlotRBIndicator,2);



figure
scatter(FullUmapData(:,1),FullUmapData(:,2),20,PlotRBIndicator,'filled');
xlim([-5.2 4.3])
ylim([-4 7])
CustomColorMap = hot(200);
CustomColorMap = CustomColorMap(1:100,:).^2;
CustomColorMap = [CustomColorMap];
caxis([0 1])
colormap(CustomColorMap)
axis square




ZeroWells = find(StorageIndicator == 3);
WellIndex = OriginalWellIndex(ZeroWells,:);
UmapData = ReductionUmap(WellIndex,:);
FeatureDataWell = real(log2(FeatureData(WellIndex,120)));
PositiveCells = find(FeatureDataWell > 7);
PositiveUmap = UmapData(PositiveCells,:);
FullUmapData = ReductionUmap(OriginalWellIndex,:);

pRBIndicator = zeros(size(UmapData,1),1);

pRBIndicator(PositiveCells,:) = 1;

% Find Neighbors

NeighborPositive = knnsearch(UmapData,FullUmapData,'K',15);

PlotRBIndicator = zeros(size(FullUmapData,1),15);

for CurrentCell = 1:size(NeighborPositive,1)
    CurrentNeighbors = NeighborPositive(CurrentCell,:);
    PlotRBIndicator(CurrentCell,:) = pRBIndicator(CurrentNeighbors,:);   
end

PlotRBIndicator = mean(PlotRBIndicator,2);



figure
scatter(FullUmapData(:,1),FullUmapData(:,2),20,PlotRBIndicator,'filled');
xlim([-5.2 4.3])
ylim([-4 7])
CustomColorMap = hot(200);
CustomColorMap = CustomColorMap(1:100,:).^2;
CustomColorMap = [CustomColorMap];
caxis([0 1])
colormap(CustomColorMap)
axis square





ZeroWells = find(StorageIndicator == 4);
WellIndex = OriginalWellIndex(ZeroWells,:);
UmapData = ReductionUmap(WellIndex,:);
FeatureDataWell = real(log2(FeatureData(WellIndex,120)));
PositiveCells = find(FeatureDataWell > 7);
PositiveUmap = UmapData(PositiveCells,:);
FullUmapData = ReductionUmap(OriginalWellIndex,:);

pRBIndicator = zeros(size(UmapData,1),1);

pRBIndicator(PositiveCells,:) = 1;

% Find Neighbors

NeighborPositive = knnsearch(UmapData,FullUmapData,'K',15);

PlotRBIndicator = zeros(size(FullUmapData,1),15);

for CurrentCell = 1:size(NeighborPositive,1)
    CurrentNeighbors = NeighborPositive(CurrentCell,:);
    PlotRBIndicator(CurrentCell,:) = pRBIndicator(CurrentNeighbors,:);   
end

PlotRBIndicator = mean(PlotRBIndicator,2);



figure
scatter(FullUmapData(:,1),FullUmapData(:,2),20,PlotRBIndicator,'filled');
xlim([-5.2 4.3])
ylim([-4 7])
CustomColorMap = hot(200);
CustomColorMap = CustomColorMap(1:100,:).^2;
CustomColorMap = [CustomColorMap];
caxis([0 1])
colormap(CustomColorMap)
axis square



ZeroWells = find(StorageIndicator == 5);
WellIndex = OriginalWellIndex(ZeroWells,:);
UmapData = ReductionUmap(WellIndex,:);
FeatureDataWell = real(log2(FeatureData(WellIndex,120)));
PositiveCells = find(FeatureDataWell > 7);
PositiveUmap = UmapData(PositiveCells,:);
FullUmapData = ReductionUmap(OriginalWellIndex,:);

pRBIndicator = zeros(size(UmapData,1),1);

pRBIndicator(PositiveCells,:) = 1;

% Find Neighbors

NeighborPositive = knnsearch(UmapData,FullUmapData,'K',15);

PlotRBIndicator = zeros(size(FullUmapData,1),15);

for CurrentCell = 1:size(NeighborPositive,1)
    CurrentNeighbors = NeighborPositive(CurrentCell,:);
    PlotRBIndicator(CurrentCell,:) = pRBIndicator(CurrentNeighbors,:);   
end

PlotRBIndicator = mean(PlotRBIndicator,2);



figure
scatter(FullUmapData(:,1),FullUmapData(:,2),20,PlotRBIndicator,'filled');
xlim([-5.2 4.3])
ylim([-4 7])
CustomColorMap = hot(200);
CustomColorMap = CustomColorMap(1:100,:).^2;
CustomColorMap = [CustomColorMap];
caxis([0 1])
colormap(CustomColorMap)
axis square




ZeroWells = find(StorageIndicator == 6);
WellIndex = OriginalWellIndex(ZeroWells,:);
UmapData = ReductionUmap(WellIndex,:);
FeatureDataWell = real(log2(FeatureData(WellIndex,120)));
PositiveCells = find(FeatureDataWell > 7);
PositiveUmap = UmapData(PositiveCells,:);
FullUmapData = ReductionUmap(OriginalWellIndex,:);

pRBIndicator = zeros(size(UmapData,1),1);

pRBIndicator(PositiveCells,:) = 1;

% Find Neighbors

NeighborPositive = knnsearch(UmapData,FullUmapData,'K',15);

PlotRBIndicator = zeros(size(FullUmapData,1),15);

for CurrentCell = 1:size(NeighborPositive,1)
    CurrentNeighbors = NeighborPositive(CurrentCell,:);
    PlotRBIndicator(CurrentCell,:) = pRBIndicator(CurrentNeighbors,:);   
end

PlotRBIndicator = mean(PlotRBIndicator,2);



figure
scatter(FullUmapData(:,1),FullUmapData(:,2),20,PlotRBIndicator,'filled');
xlim([-5.2 4.3])
ylim([-4 7])
CustomColorMap = hot(200);
CustomColorMap = CustomColorMap(1:100,:).^2;
CustomColorMap = [CustomColorMap];
caxis([0 1])
colormap(CustomColorMap)
axis square




% Do Individual Classifications...

NewResponseData = [ResponseData(:,[1:52,83:142]),real(log2(ResponseData(:,[1:52,83:142])))];
%NewResponseData = [ResponseData(:,:),real(log2(ResponseData(:,:)))];

ResponseZData = zscore(NewResponseData);

ResponseZData(isnan(ResponseZData)) = 0;

[PCCoeffSignaling,~,~,~,ExplainedVariance] = pca(ResponseZData);

Threshold = find(cumsum(ExplainedVariance) >= 97.5,1,'first');

PCResponseData = ResponseZData*PCCoeffSignaling(:,1:Threshold);

StoragePosterior = cell(11,1);
StorageTrueIndex = cell(11,1);
StoragePredictedIndex = cell(11,1);


EGFStorage = {'0nM','0.78nM','3.9nM'};
DrugStorage = {'No.Drug'};
TimeStorage = {'960min'};

ClassifierOriginalWellIndex = [];
StorageEGFIndicator = [];
StorageDecisionData = [];
StoragePCFeatureData = [];
StoragePCResponseData = [];

for CurrentCondition = 1:size(EGFStorage,2)
    
    EGFString = EGFStorage{1,CurrentCondition};
    TimeString = TimeStorage{1,1};
    DrugString = DrugStorage{1,1};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellFeatureData = PCFeatureData(WellIndex,:);
    WellResponseData = PCResponseData(WellIndex,:);
    
    CurrentTestFeature = 120;
    
    WellDecisionData = log2(FeatureData(WellIndex,CurrentTestFeature));
    
    
    BelowCells = find(WellDecisionData < 4);
    AboveCells = find(WellDecisionData > 7);
    
    OriginalIndexBelow = WellIndex(BelowCells);
    OriginalIndexAbove = WellIndex(AboveCells);
    
    ClassifierOriginalWellIndex = [ClassifierOriginalWellIndex;OriginalIndexBelow;OriginalIndexAbove];
    StorageEGFIndicator = [StorageEGFIndicator;ones(numel([BelowCells;AboveCells]),1)*CurrentCondition];
    StorageDecisionData = [StorageDecisionData;ones(numel(BelowCells),1);ones(numel(AboveCells),1)*2];
    StoragePCFeatureData = [StoragePCFeatureData;PCFeatureData(OriginalIndexBelow,:);PCFeatureData(OriginalIndexAbove,:)];
    StoragePCResponseData = [StoragePCResponseData;PCResponseData(OriginalIndexBelow,:);PCResponseData(OriginalIndexAbove,:)];      
end


NonResponder = find(StorageDecisionData == 1);
Responder = find(StorageDecisionData == 2);

MinNumber = min([numel(NonResponder),numel(Responder)]);

RandomNonResponder = NonResponder(randperm(numel(NonResponder),MinNumber));
RandomResponder = Responder(randperm(numel(Responder),MinNumber));

IndexModel = [RandomNonResponder;RandomResponder];

% Only EGF

MDL = cvglmnet(StorageEGFIndicator(IndexModel,:),StorageDecisionData(IndexModel,:),'binomial');
PredictedDecision = cvglmnetPredict(MDL,StorageEGFIndicator,'lambda_1se','class');
PredictedPosterior = cvglmnetPredict(MDL,StorageEGFIndicator,'lambda_1se','response');

StoragePosterior{1,1} = PredictedPosterior;
StorageTrueIndex{1,1} = StorageDecisionData;
StoragePredictedIndex{1,1} = PredictedDecision;

% Cell State

MDL = cvglmnet(StoragePCFeatureData(IndexModel,:),StorageDecisionData(IndexModel,:),'binomial');
PredictedDecision = cvglmnetPredict(MDL,StoragePCFeatureData,'lambda_1se','class');
PredictedPosterior = cvglmnetPredict(MDL,StoragePCFeatureData,'lambda_1se','response');

StoragePosterior{2,1} = PredictedPosterior;
StorageTrueIndex{2,1} = StorageDecisionData;
StoragePredictedIndex{2,1} = PredictedDecision;

% Cell State + EGF

MDL = cvglmnet([StoragePCFeatureData(IndexModel,:),StorageEGFIndicator(IndexModel,:)],StorageDecisionData(IndexModel,:),'binomial');
PredictedDecision = cvglmnetPredict(MDL,[StoragePCFeatureData,StorageEGFIndicator],'lambda_1se','class');
PredictedPosterior = cvglmnetPredict(MDL,[StoragePCFeatureData,StorageEGFIndicator],'lambda_1se','response');

StoragePosterior{3,1} = PredictedPosterior;
StorageTrueIndex{3,1} = StorageDecisionData;
StoragePredictedIndex{3,1} = PredictedDecision;

% MMS

MDL = cvglmnet(StoragePCResponseData(IndexModel,:),StorageDecisionData(IndexModel,:),'binomial');
PredictedDecision = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','class');
PredictedPosterior = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','response');

StoragePosterior{4,1} = PredictedPosterior;
StorageTrueIndex{4,1} = StorageDecisionData;
StoragePredictedIndex{4,1} = PredictedDecision;


ResponseIndex = {[[1:15,128:142]],[128:142],[1:15]};


for CurrentResponse = 1:3
    CurrentResponseIndex = ResponseIndex{1,CurrentResponse};
    NewResponseData = [ResponseData(:,CurrentResponseIndex),real(log2(ResponseData(:,CurrentResponseIndex)))];
    
    
    ResponseZData = zscore(NewResponseData);
    
    ResponseZData(isnan(ResponseZData)) = 0;
    
    [PCCoeffSignaling,~,~,~,ExplainedVariance] = pca(ResponseZData);
    
    Threshold = find(cumsum(ExplainedVariance) >= 97.5,1,'first');
    
    PCResponseData = ResponseZData*PCCoeffSignaling(:,1:Threshold);
    
    
    EGFStorage = {'0nM','0.78nM','3.9nM'};
    DrugStorage = {'No.Drug'};
    TimeStorage = {'960min'};
    
    StorageEGFIndicator = [];
    StorageDecisionData = [];
    StoragePCFeatureData = [];
    StoragePCResponseData = [];
    ClassifierOriginalWellIndex = [];
    
    for CurrentCondition = 1:size(EGFStorage,2)
        
        EGFString = EGFStorage{1,CurrentCondition};
        TimeString = TimeStorage{1,1};
        DrugString = DrugStorage{1,1};
        
        EGF = find(contains(ConditionNames,EGFString));
        Time = find(contains(ConditionNames,TimeString));
        Drug = find(contains(ConditionNames,DrugString));
        
        FirstI = intersect(EGF,Time);
        Wells = intersect(FirstI,Drug);
        
        NewWells = zeros(2,1);
        
        NewWells(1) = Wells(end-1);
        NewWells(2) = Wells(end);
        
        Wells = NewWells;
        
        WellIndex = find(ismember(LinearIndex,Wells));
        
        WellResponseData = PCResponseData(WellIndex,:);
        
        CurrentTestFeature = 120;
        
        WellDecisionData = log2(FeatureData(WellIndex,CurrentTestFeature));
        
        
        BelowCells = find(WellDecisionData < 4);
        AboveCells = find(WellDecisionData > 7);
        
        OriginalIndexBelow = WellIndex(BelowCells);
        OriginalIndexAbove = WellIndex(AboveCells);
        StorageEGFIndicator = [StorageEGFIndicator;ones(size([BelowCells;AboveCells],1),1)*CurrentCondition];
        ClassifierOriginalWellIndex = [ClassifierOriginalWellIndex;OriginalIndexBelow;OriginalIndexAbove];
        StorageDecisionData = [StorageDecisionData;ones(numel(BelowCells),1);ones(numel(AboveCells),1)*2];       
        StoragePCResponseData = [StoragePCResponseData;PCResponseData(OriginalIndexBelow,:);PCResponseData(OriginalIndexAbove,:)];
    end
    
    
    
    % Balance Classes...
    
    NonResponder = find(StorageDecisionData == 1);
    Responder = find(StorageDecisionData == 2);
    
    MinNumber = min([numel(NonResponder),numel(Responder)]);
    
    RandomNonResponder = NonResponder(randperm(numel(NonResponder),MinNumber));
    RandomResponder = Responder(randperm(numel(Responder),MinNumber));
    
    IndexModel = [RandomNonResponder;RandomResponder];
    
    MDL = cvglmnet(StoragePCResponseData(IndexModel,:),StorageDecisionData(IndexModel,:),'binomial');
    PredictedDecision = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','class');
    PredictedPosterior = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','response');
    
    StoragePosterior{4+CurrentResponse,1} = PredictedPosterior;
    StorageTrueIndex{4+CurrentResponse,1} = StorageDecisionData;
    StoragePredictedIndex{4+CurrentResponse,1} = PredictedDecision;
    
    
    
end


% Add the Time perception thing....

% DO PCA on Response Data

%NewResponseData = [ResponseData(:,[1:52,83:142]),real(log2(ResponseData(:,[1:52,83:142])))];
NewResponseData = [ResponseData(:,:),real(log2(ResponseData(:,:)))];

ResponseZData = zscore(NewResponseData);

ResponseZData(isnan(ResponseZData)) = 0;

[PCCoeffSignaling,~,~,~,ExplainedVariance] = pca(ResponseZData);

Threshold = find(cumsum(ExplainedVariance) >= 97.5,1,'first');

PCResponseData = ResponseZData*PCCoeffSignaling(:,1:Threshold);

% Set Intermediate Variables

IntermediatePosterior0 = cell(4,1);
IntermediateTrueIndex0 = cell(4,1);
IntermediatePredictedIndex0 = cell(4,1);

IntermediatePosterior5 = cell(4,1);
IntermediateTrueIndex5 = cell(4,1);
IntermediatePredictedIndex5 = cell(4,1);


IntermediatePosterior100 = cell(4,1);
IntermediateTrueIndex100 = cell(4,1);
IntermediatePredictedIndex100 = cell(4,1);


% Do prediction from Time Points %%% NOT USED IN THE PAPER %%%

EGFStorage = {'0nM'};
DrugStorage = {'No.Drug'};
TimeStorage = {'5min','40min','90min','960min'};

EGFString = EGFStorage{1,1};
TimeString = TimeStorage{1,4};
DrugString = DrugStorage{1,1};

EGF = find(contains(ConditionNames,EGFString));
Time = find(contains(ConditionNames,TimeString));
Drug = find(contains(ConditionNames,DrugString));

FirstI = intersect(EGF,Time);
Wells = intersect(FirstI,Drug);

NewWells = zeros(2,1);

NewWells(1) = Wells(end-1);
NewWells(2) = Wells(end);

Wells = NewWells;

WellIndex = find(ismember(LinearIndex,Wells));

WellReferenceFeatureData = PCFeatureData(WellIndex,:);


StoragePCTimeResponseData = cell(4,1);

for CurrentCondition = 1:size(TimeStorage,2)
    
    EGFString = EGFStorage{1,1};
    TimeString = TimeStorage{1,CurrentCondition};
    DrugString = DrugStorage{1,1};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellFeatureData = PCFeatureData(WellIndex,:);
    WellResponseData = PCResponseData(WellIndex,:);
    
    NearestNeigbhbors = knnsearch(WellFeatureData,WellReferenceFeatureData,'K',1,'Distance','cityblock');
    
    TimePCResponseData = PCResponseData(WellIndex(NearestNeigbhbors),:);
    
    StoragePCTimeResponseData{CurrentCondition,1} = TimePCResponseData;
    
     
end

% Predict for combinations

TakeIndex = {1,2,3,[1,2,3]};

for CurrentTimeComb = 1:4
    
    EGFString = EGFStorage{1,1};
    TimeString = TimeStorage{1,4};
    DrugString = DrugStorage{1,1};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellDecisionData = log2(FeatureData(WellIndex,CurrentTestFeature));
    
    
    BelowCells = find(WellDecisionData < 4);
    AboveCells = find(WellDecisionData > 7);
    
    WellTimeData = StoragePCTimeResponseData{TakeIndex{1,CurrentTimeComb},1};
    
    if CurrentTimeComb == 4
       WellTimeData = [StoragePCTimeResponseData{1,1},StoragePCTimeResponseData{2,1},StoragePCTimeResponseData{3,1}];       
    end
    
    StorageDecisionData = [ones(numel(BelowCells),1);ones(numel(AboveCells),1)*2];
    StoragePCResponseData = [WellTimeData(BelowCells,:);WellTimeData(AboveCells,:)];
    
    NonResponder = find(StorageDecisionData == 1);
    Responder = find(StorageDecisionData == 2);
    
    MinNumber = min([numel(NonResponder),numel(Responder)]);
    
    RandomNonResponder = NonResponder(randperm(numel(NonResponder),MinNumber));
    RandomResponder = Responder(randperm(numel(Responder),MinNumber));
    
    IndexModel = [RandomNonResponder;RandomResponder];
    
    MDL = cvglmnet(StoragePCResponseData(IndexModel,:),StorageDecisionData(IndexModel,:),'binomial');
    PredictedDecision = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','class');
    PredictedPosterior = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','response');
    
    IntermediatePosterior0{CurrentTimeComb,1} = PredictedPosterior;
    IntermediatePredictedIndex0{CurrentTimeComb,1} = PredictedDecision;
    IntermediateTrueIndex0{CurrentTimeComb,1} = StorageDecisionData;
    
    
    
end



EGFStorage = {'0.78nM'};
DrugStorage = {'No.Drug'};
TimeStorage = {'5min','40min','90min','960min'};

EGFString = EGFStorage{1,1};
TimeString = TimeStorage{1,4};
DrugString = DrugStorage{1,1};

EGF = find(contains(ConditionNames,EGFString));
Time = find(contains(ConditionNames,TimeString));
Drug = find(contains(ConditionNames,DrugString));

FirstI = intersect(EGF,Time);
Wells = intersect(FirstI,Drug);

NewWells = zeros(2,1);

NewWells(1) = Wells(end-1);
NewWells(2) = Wells(end);

Wells = NewWells;

WellIndex = find(ismember(LinearIndex,Wells));

WellReferenceFeatureData = PCFeatureData(WellIndex,:);


StoragePCTimeResponseData = cell(4,1);

for CurrentCondition = 1:size(TimeStorage,2)
    
    EGFString = EGFStorage{1,1};
    TimeString = TimeStorage{1,CurrentCondition};
    DrugString = DrugStorage{1,1};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellFeatureData = PCFeatureData(WellIndex,:);
    WellResponseData = PCResponseData(WellIndex,:);
    
    NearestNeigbhbors = knnsearch(WellFeatureData,WellReferenceFeatureData,'K',1,'Distance','cityblock');
    
    TimePCResponseData = PCResponseData(WellIndex(NearestNeigbhbors),:);
    
    StoragePCTimeResponseData{CurrentCondition,1} = TimePCResponseData;
    
     
end

% Predict for combinations

TakeIndex = {1,2,3,[1,2,3]};

for CurrentTimeComb = 1:4
    
    EGFString = EGFStorage{1,1};
    TimeString = TimeStorage{1,4};
    DrugString = DrugStorage{1,1};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellDecisionData = log2(FeatureData(WellIndex,CurrentTestFeature));
    
    
    BelowCells = find(WellDecisionData < 4);
    AboveCells = find(WellDecisionData > 7);
    
    WellTimeData = StoragePCTimeResponseData{TakeIndex{1,CurrentTimeComb},1};
    
    if CurrentTimeComb == 4
       WellTimeData = [StoragePCTimeResponseData{1,1},StoragePCTimeResponseData{2,1},StoragePCTimeResponseData{3,1}];       
    end
    
    StorageDecisionData = [ones(numel(BelowCells),1);ones(numel(AboveCells),1)*2];
    StoragePCResponseData = [WellTimeData(BelowCells,:);WellTimeData(AboveCells,:)];
    
    NonResponder = find(StorageDecisionData == 1);
    Responder = find(StorageDecisionData == 2);
    
    MinNumber = min([numel(NonResponder),numel(Responder)]);
    
    RandomNonResponder = NonResponder(randperm(numel(NonResponder),MinNumber));
    RandomResponder = Responder(randperm(numel(Responder),MinNumber));
    
    IndexModel = [RandomNonResponder;RandomResponder];
    
    MDL = cvglmnet(StoragePCResponseData(IndexModel,:),StorageDecisionData(IndexModel,:),'binomial');
    PredictedDecision = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','class');
    PredictedPosterior = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','response');
    
    IntermediatePosterior5{CurrentTimeComb,1} = PredictedPosterior;
    IntermediatePredictedIndex5{CurrentTimeComb,1} = PredictedDecision;
    IntermediateTrueIndex5{CurrentTimeComb,1} = StorageDecisionData;
    
    
    
end



EGFStorage = {'3.9nM'};
DrugStorage = {'No.Drug'};
TimeStorage = {'5min','40min','90min','960min'};

EGFString = EGFStorage{1,1};
TimeString = TimeStorage{1,4};
DrugString = DrugStorage{1,1};

EGF = find(contains(ConditionNames,EGFString));
Time = find(contains(ConditionNames,TimeString));
Drug = find(contains(ConditionNames,DrugString));

FirstI = intersect(EGF,Time);
Wells = intersect(FirstI,Drug);

NewWells = zeros(2,1);

NewWells(1) = Wells(end-1);
NewWells(2) = Wells(end);

Wells = NewWells;

WellIndex = find(ismember(LinearIndex,Wells));

WellReferenceFeatureData = PCFeatureData(WellIndex,:);


StoragePCTimeResponseData = cell(4,1);

for CurrentCondition = 1:size(TimeStorage,2)
    
    EGFString = EGFStorage{1,1};
    TimeString = TimeStorage{1,CurrentCondition};
    DrugString = DrugStorage{1,1};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellFeatureData = PCFeatureData(WellIndex,:);
    WellResponseData = PCResponseData(WellIndex,:);
    
    NearestNeigbhbors = knnsearch(WellFeatureData,WellReferenceFeatureData,'K',1,'Distance','cityblock');
    
    TimePCResponseData = PCResponseData(WellIndex(NearestNeigbhbors),:);
    
    StoragePCTimeResponseData{CurrentCondition,1} = TimePCResponseData;
    
     
end

% Predict for combinations

TakeIndex = {1,2,3,[1,2,3]};

for CurrentTimeComb = 1:4
    
    EGFString = EGFStorage{1,1};
    TimeString = TimeStorage{1,4};
    DrugString = DrugStorage{1,1};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellDecisionData = log2(FeatureData(WellIndex,CurrentTestFeature));
    
    
    BelowCells = find(WellDecisionData < 4);
    AboveCells = find(WellDecisionData > 7);
    
    WellTimeData = StoragePCTimeResponseData{TakeIndex{1,CurrentTimeComb},1};
    
    if CurrentTimeComb == 4
       WellTimeData = [StoragePCTimeResponseData{1,1},StoragePCTimeResponseData{2,1},StoragePCTimeResponseData{3,1}];       
    end
    
    StorageDecisionData = [ones(numel(BelowCells),1);ones(numel(AboveCells),1)*2];
    StoragePCResponseData = [WellTimeData(BelowCells,:);WellTimeData(AboveCells,:)];
    
    NonResponder = find(StorageDecisionData == 1);
    Responder = find(StorageDecisionData == 2);
    
    MinNumber = min([numel(NonResponder),numel(Responder)]);
    
    RandomNonResponder = NonResponder(randperm(numel(NonResponder),MinNumber));
    RandomResponder = Responder(randperm(numel(Responder),MinNumber));
    
    IndexModel = [RandomNonResponder;RandomResponder];
    
    MDL = cvglmnet(StoragePCResponseData(IndexModel,:),StorageDecisionData(IndexModel,:),'binomial');
    PredictedDecision = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','class');
    PredictedPosterior = cvglmnetPredict(MDL,StoragePCResponseData,'lambda_1se','response');
    
    IntermediatePosterior100{CurrentTimeComb,1} = PredictedPosterior;
    IntermediatePredictedIndex100{CurrentTimeComb,1} = PredictedDecision;
    IntermediateTrueIndex100{CurrentTimeComb,1} = StorageDecisionData;
           
end

% Assemble into original Matrix

StoragePredictedIndex{8,1} = [IntermediatePredictedIndex0{1,1};IntermediatePredictedIndex5{1,1};IntermediatePredictedIndex100{1,1}];
StoragePredictedIndex{9,1} = [IntermediatePredictedIndex0{2,1};IntermediatePredictedIndex5{2,1};IntermediatePredictedIndex100{2,1}];
StoragePredictedIndex{10,1} = [IntermediatePredictedIndex0{3,1};IntermediatePredictedIndex5{3,1};IntermediatePredictedIndex100{3,1}];
StoragePredictedIndex{11,1} = [IntermediatePredictedIndex0{4,1};IntermediatePredictedIndex5{1,1};IntermediatePredictedIndex100{4,1}];

StorageTrueIndex{8,1} = [IntermediateTrueIndex0{1,1};IntermediateTrueIndex5{1,1};IntermediateTrueIndex100{1,1}];
StorageTrueIndex{9,1} = [IntermediateTrueIndex0{2,1};IntermediateTrueIndex5{2,1};IntermediateTrueIndex100{2,1}];
StorageTrueIndex{10,1} = [IntermediateTrueIndex0{3,1};IntermediateTrueIndex5{3,1};IntermediateTrueIndex100{3,1}];
StorageTrueIndex{11,1} = [IntermediateTrueIndex0{4,1};IntermediateTrueIndex5{1,1};IntermediateTrueIndex100{4,1}];

StoragePosterior{8,1} = [IntermediatePosterior0{1,1};IntermediatePosterior5{1,1};IntermediatePosterior100{1,1}];
StoragePosterior{9,1} = [IntermediatePosterior0{2,1};IntermediatePosterior5{2,1};IntermediatePosterior100{2,1}];
StoragePosterior{10,1} = [IntermediatePosterior0{3,1};IntermediatePosterior5{3,1};IntermediatePosterior100{3,1}];
StoragePosterior{11,1} = [IntermediatePosterior0{4,1};IntermediatePosterior5{1,1};IntermediatePosterior100{4,1}];


% Plot Over UMAP...


for CurrentCondition = 1:11
    for CurrentEGF = 1:3
        
        PositiveCellsCondition = StoragePredictedIndex{CurrentCondition,1};
        ZeroWells = find(StorageEGFIndicator == CurrentEGF);
        WellIndex = ClassifierOriginalWellIndex(ZeroWells,:);
        PositiveCellsCondition = PositiveCellsCondition(ZeroWells,:);
        UmapData = ReductionUmap(WellIndex,:);
        PositiveCells = find(PositiveCellsCondition == 2);
        PositiveUmap = UmapData(PositiveCells,:);
        FullUmapData = ReductionUmap(OriginalWellIndex,:);
        
        
        pRBIndicator = zeros(size(UmapData,1),1);
        
        pRBIndicator(PositiveCells,:) = 1;
        
        % Find Neighbors
        
        NeighborPositive = knnsearch(UmapData,FullUmapData,'K',15);
        
        PlotRBIndicator = zeros(size(FullUmapData,1),15);
        
        for CurrentCell = 1:size(NeighborPositive,1)
            CurrentNeighbors = NeighborPositive(CurrentCell,:);
            PlotRBIndicator(CurrentCell,:) = pRBIndicator(CurrentNeighbors,:);
        end
        
        PlotRBIndicator = mean(PlotRBIndicator,2);
        
        
        
        figure
        scatter(FullUmapData(:,1),FullUmapData(:,2),20,PlotRBIndicator,'filled');
        xlim([-5.2 4.3])
        ylim([-4 7])
        CustomColorMap = hot(200);
        CustomColorMap = CustomColorMap(1:100,:).^2;
        CustomColorMap = [CustomColorMap];
        caxis([0 1])
        colormap(CustomColorMap)
        axis square
        
               
        
    end
end

% Plot Confusion Matrices...

for CurrentCondition = 1:11
    PredictedIndex = StoragePredictedIndex{CurrentCondition,1};
    TrueIndex = StorageTrueIndex{CurrentCondition,1};
    
    ModelStatsEGF = confusionmatStats(TrueIndex,PredictedIndex);
    
    ConfusionMatrix = ModelStatsEGF.confusionMat;
    
    TempA = ConfusionMatrix(1,2);
    TempB = ConfusionMatrix(2,1);
    ConfusionMatrix(2,1) = TempA;
    ConfusionMatrix(1,2) = TempB;
    
    NormedMatrix = ConfusionMatrix./sum(ConfusionMatrix,1);
    
    PlotMatrix = [flipud(NormedMatrix),zeros(2,1);zeros(1,3)];
    figure
    pcolor(PlotMatrix);
    caxis([0 1])
    colormap(brewermap(500,'blues'));
    axis image
    
    for CurrentColumn = 1:2
        for CurrentRow = 1:2
            text(CurrentColumn + 0.5,CurrentRow + 0.5,num2str(round(PlotMatrix(CurrentRow,CurrentColumn),2)));
            
        end
    end
    
end

% Plot ROC Curves...

figure 
hold on

StorageAUC = zeros(11,1);
StorageMeanProb = zeros(11,1);

for CurrentCondition = 1:11
    
    % ROC Curve
    
    TrueIndex = StorageTrueIndex{CurrentCondition,1};
    XV = StoragePosterior{CurrentCondition,1};
    
    diffscore = XV(:,1);
    
    % Relabel...
    
    Label = cell(size(TrueIndex,1),1);
    
    NewLabel = {'0','1'};
    
    for CurrentLabel = 1:2
        LabelLocation = find(TrueIndex == CurrentLabel);
        for CurrentLocation = LabelLocation'
            Label{CurrentLocation} = NewLabel{CurrentLabel};
        end
    end
    
    [X,Y,T,AUC,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,'1');
    
    
    plot(X,Y);
    axis square
    
    StorageAUC(CurrentCondition,1) = AUC;
    StorageMeanProb(CurrentCondition,1) = mean([mean(1-XV(TrueIndex == 1)),mean(XV(TrueIndex == 2))]);
        
end

legend('EGF alone','Cell state alone','Cell state + EGF','MMS','pERK + pAKT','pERK','pAKT')


figure
scatter(StorageMeanProb,StorageAUC,100,[1:11],'filled')
axis square
ylim([0.5 1])
xlim([0.5 1])



%% Figure 5E 

load('Z:\bkramer\210603_184A1_EGF_Drug_Fish_4i\ProcessedData\OC_5_Drug_960.mat')

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

NewResponseData = [ResponseData(:,:),real(log2(ResponseData(:,:)))];

ResponseZData = zscore(NewResponseData);

ResponseZData(isnan(ResponseZData)) = 0;

[PCCoeffSignaling,~,~,~,ExplainedVariance] = pca(ResponseZData);

Threshold = find(cumsum(ExplainedVariance) >= 97.5,1,'first');

PCResponseData = ResponseZData*PCCoeffSignaling(:,1:Threshold);

% Stacked bars of pRB fractions

EGFStorage = {'0.78nM'};
DrugStorage = {'No.Drug','AKT.1','MEK.1','MEK.AKT.1'};
TimeStorage = {'960min'};

OriginalWellIndex = [];
UMAPData = [];
StorageIndicator = [];

BarStorage = zeros(4,2);

for CurrentCondition = 1:size(DrugStorage,2)
    
    EGFString = EGFStorage{1,1};
    TimeString = TimeStorage{1,1};
    DrugString = DrugStorage{1,CurrentCondition};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellFeatureData = log2(FeatureData(WellIndex,120));
    
    BelowCells = find(WellFeatureData <= 5.5);
    AboveCells = find(WellFeatureData > 5.5);
    % Quantile Norm those data...
    
    BarStorage(CurrentCondition,1) = numel(BelowCells)/numel(WellIndex);
    BarStorage(CurrentCondition,2) = numel(AboveCells)/numel(WellIndex);
end

figure
bar(BarStorage,'stacked');
xlim([0.5 4.5])
ylim([0 1])
axis square

ExportPath = ['Z:\bkramer\210603_184A1_EGF_Drug_Fish_4i\Figures\Figure_5\DensityPlots\RB_StackedBar_Inhibition.pdf'];
export_fig(ExportPath,'-painters');

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

% Modeling in cellular state and signaling space

EGFStorage = {'0.78nM'};
DrugStorage = {'No.Drug','AKT.1','MEK.1','MEK.AKT.1'};
TimeStorage = {'960min'};

AccuracyStorageFeature = zeros(size(DrugStorage,2),size(DrugStorage,2));
AccuracyStorageResponse = zeros(size(DrugStorage,2),size(DrugStorage,2));
PosteriorStorageFeature = zeros(size(DrugStorage,2),size(DrugStorage,2));
PosteriorStorageResponse = zeros(size(DrugStorage,2),size(DrugStorage,2));


for CurrentCondition = 1:size(DrugStorage,2)
    
    EGFString = EGFStorage{1,1};
    TimeString = TimeStorage{1,1};
    DrugString = DrugStorage{1,CurrentCondition};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellFeatureData = PCFeatureData(WellIndex,:);
    WellResponseData = PCResponseData(WellIndex,:);
    
    CurrentTestFeature = 120;
    
    WellDecisionData = log2(FeatureData(WellIndex,CurrentTestFeature));
    
    BelowCells = find(WellDecisionData < 4);
    AboveCells = find(WellDecisionData > 7);
    
    % Train model
    
    % Balance Classes....
    
    NumberBelow = numel(BelowCells);
    NumberAbove = numel(AboveCells);
    
    MinNumber = min([NumberAbove,NumberBelow]);
    
    NonResponderFeatureData = WellFeatureData(BelowCells,:);
    ResponderFeatureData = WellFeatureData(AboveCells,:);
    
    NonResponderResponseData = WellResponseData(BelowCells,:);
    ResponderResponseData = WellResponseData(AboveCells,:);
    
    RandomCellsBelow = randperm(NumberBelow,MinNumber);
    RandomCellsAbove = randperm(NumberAbove,MinNumber);
    
    ModelFeatureData = [NonResponderFeatureData(RandomCellsBelow,:);ResponderFeatureData(RandomCellsAbove,:)];
    ModelResponseData = [NonResponderResponseData(RandomCellsBelow,:);ResponderResponseData(RandomCellsAbove,:)];
    ModelIndexData = [ones(MinNumber,1);ones(MinNumber,1)*2];
    
    % Model with Cellular State
    
    MDLFeature = cvglmnet(ModelFeatureData,ModelIndexData,'binomial');
    MDLResponse = cvglmnet(ModelResponseData,ModelIndexData,'binomial');
    
       
    for CurrentCounterCondition = 1:size(DrugStorage,2)
        
        EGFString = EGFStorage{1,1};
        TimeString = TimeStorage{1,1};
        DrugString = DrugStorage{1,CurrentCounterCondition};
        
        EGF = find(contains(ConditionNames,EGFString));
        Time = find(contains(ConditionNames,TimeString));
        Drug = find(contains(ConditionNames,DrugString));
        
        FirstI = intersect(EGF,Time);
        Wells = intersect(FirstI,Drug);
        
        NewWells = zeros(2,1);
        
        NewWells(1) = Wells(end-1);
        NewWells(2) = Wells(end);
        
        Wells = NewWells;
        
        WellIndex = find(ismember(LinearIndex,Wells));
        
        WellFeatureData = PCFeatureData(WellIndex,:);
        WellResponseData = PCResponseData(WellIndex,:);
        
        CurrentTestFeature = 120;
        
        WellDecisionData = log2(FeatureData(WellIndex,CurrentTestFeature));
        
        BelowCells = find(WellDecisionData < 4);
        AboveCells = find(WellDecisionData > 7);
        
        
        OriginalIndexBelow = WellIndex(BelowCells);
        OriginalIndexAbove = WellIndex(AboveCells);
        
        
        FullFeatureData = [WellFeatureData(BelowCells,:);WellFeatureData(AboveCells,:)];
        FullResponseData = [WellResponseData(BelowCells,:);WellResponseData(AboveCells,:)];
        FullIndexData = [ones(numel(BelowCells),1);ones(numel(AboveCells),1)*2];
        
        FitIndexFeature = cvglmnetPredict(MDLFeature,FullFeatureData,'lambda_1se','class');
        PosteriorFeature = cvglmnetPredict(MDLFeature,FullFeatureData,'lambda_1se','response');
        
        FitIndexResponse = cvglmnetPredict(MDLResponse,FullResponseData,'lambda_1se','class');
        PosteriorResponse = cvglmnetPredict(MDLResponse,FullResponseData,'lambda_1se','response');
        
        
        % Accuracy
        
        Delta = abs(FullIndexData - FitIndexFeature);
        Accuracy = 1-numel(find(Delta))./numel(FullIndexData);
        AccuracyStorageFeature(CurrentCondition,CurrentCounterCondition) = Accuracy;
        
        Delta = abs(FullIndexData - FitIndexResponse);
        Accuracy = 1-numel(find(Delta))./numel(FullIndexData);
        AccuracyStorageResponse(CurrentCondition,CurrentCounterCondition) = Accuracy;
        
        % Posterior
        
        PosteriorDelta = [1 - PosteriorFeature(FullIndexData == 1);PosteriorFeature(FullIndexData == 2)];
        PosteriorStorageFeature(CurrentCondition,CurrentCounterCondition) = mean(PosteriorDelta);
        
        PosteriorDelta = [1 - PosteriorResponse(FullIndexData == 1);PosteriorResponse(FullIndexData == 2)];
        PosteriorStorageResponse(CurrentCondition,CurrentCounterCondition) = mean(PosteriorDelta);
        
    end
end

% Plot Accuracy horizontal bars 

% No perturbation

FlippedBar = flipud(AccuracyStorageFeature);

figure
hold on
barh(FlippedBar(:,1))
xlim([0.5 1])
ylim([0.5 4.5])


figure
hold on
barh(FlippedBar(:,2))
xlim([0.5 1])
ylim([0.5 4.5])


figure
hold on
barh(FlippedBar(:,3))
xlim([0.5 1])
ylim([0.5 4.5])


figure
hold on
barh(FlippedBar(:,4))
xlim([0.5 1])
ylim([0.5 4.5])


FlippedBar = flipud(AccuracyStorageResponse);

figure
hold on
barh(FlippedBar(:,1))
xlim([0.5 1])
ylim([0.5 4.5])


figure
hold on
barh(FlippedBar(:,2))
xlim([0.5 1])
ylim([0.5 4.5])


figure
hold on
barh(FlippedBar(:,3))
xlim([0.5 1])
ylim([0.5 4.5])


figure
hold on
barh(FlippedBar(:,4))
xlim([0.5 1])
ylim([0.5 4.5])


%% Figure 5F 

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

NewResponseData = [ResponseData(:,:),real(log2(ResponseData(:,:)))];

ResponseZData = zscore(NewResponseData);

ResponseZData(isnan(ResponseZData)) = 0;

[PCCoeffSignaling,~,~,~,ExplainedVariance] = pca(ResponseZData);

Threshold = find(cumsum(ExplainedVariance) >= 97.5,1,'first');

PCResponseData = ResponseZData*PCCoeffSignaling(:,1:Threshold);


EGFStorage = {'0.78nM'};
DrugStorage = {'No.Drug','AKT.1','MEK.1','MEK.AKT.1'};
TimeStorage = {'960min'};

ResponseOriginalWellIndex = [];
UMAPData = [];
StorageIndicator = [];
OriginalWellIndex = [];

for CurrentCondition = 1:size(DrugStorage,2)
    
    EGFString = EGFStorage{1,1};
    TimeString = TimeStorage{1,1};
    DrugString = DrugStorage{1,CurrentCondition};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellFeatureData = PCResponseData(WellIndex,:);
    
    % Quantile Norm those data...
    
    
    ResponseOriginalWellIndex = [ResponseOriginalWellIndex;WellIndex];
    UMAPData = [UMAPData;WellFeatureData];
    StorageIndicator = [StorageIndicator;ones(numel(WellIndex),1)*CurrentCondition];
    OriginalWellIndex = [OriginalWellIndex;WellIndex];
end

ZeroWells = [find(StorageIndicator ==1)];
WellIndex = ResponseOriginalWellIndex(ZeroWells,:);
UmapData = ResponseReductionUmap(WellIndex,:);
FeatureDataWell = real(log2(FeatureData(WellIndex,120)));
PositiveCells = find(FeatureDataWell > 7);
PositiveUmap = UmapData(PositiveCells,:);
FullUmapData = ResponseReductionUmap(ResponseOriginalWellIndex,:);

pRBIndicator = zeros(size(UmapData,1),1);

pRBIndicator(PositiveCells,:) = 1;

% Find Neighbors

NeighborPositive = knnsearch(UmapData,FullUmapData,'K',15);

PlotRBIndicator = zeros(size(FullUmapData,1),15);

for CurrentCell = 1:size(NeighborPositive,1)
    CurrentNeighbors = NeighborPositive(CurrentCell,:);
    PlotRBIndicator(CurrentCell,:) = pRBIndicator(CurrentNeighbors,:);   
end

PlotRBIndicator = mean(PlotRBIndicator,2);



figure
h = scatter(FullUmapData(:,1),FullUmapData(:,2),20,PlotRBIndicator,'filled');
axis square
xlim([-7 5.3])
ylim([-7.3 8])
CustomColorMap = hot(200);
CustomColorMap = CustomColorMap(1:100,:).^2;
CustomColorMap = [CustomColorMap];
caxis([0 1])
colormap(CustomColorMap)


% Also Log Transform Feature Data
LogFeatureData = zeros(size(FeatureData,1),size(FeatureData,2));

for CurrentWell = 1:240
    WellIndex = find(ismember(LinearIndex,CurrentWell));
    for CurrentFeature = 1:size(FeatureData,2)
        
        CurrentFeatureData = FeatureData(WellIndex,CurrentFeature);
        
        if any(CurrentFeatureData <= 0) == 1
            CurrentFeatureData = CurrentFeatureData + 1;
        end
            
        LogFeatureData(WellIndex,CurrentFeature) = real(log2(CurrentFeatureData));
    
    end
end

% z-score all features per well...

FeatureZData = zeros(size(FeatureData,1),size(FeatureData,2));
LogFeatureZData = zeros(size(LogFeatureData,1),size(LogFeatureData,2));

for CurrentWell = 1:240
    WellIndex = find(ismember(LinearIndex,CurrentWell));
    for CurrentFeature = 1:size(FeatureData,2)
        CurrentFeatureData = FeatureData(WellIndex,CurrentFeature);
        CurrentFeatureData(isnan(CurrentFeatureData)) = nanmean(CurrentFeatureData);       
        FeatureZData(WellIndex,CurrentFeature) = zscore(CurrentFeatureData);
        CurrentLogFeatureData = LogFeatureData(WellIndex,CurrentFeature);
        CurrentLogFeatureData(isnan(CurrentFeatureData)) = nanmean(CurrentLogFeatureData);  
        LogFeatureZData(WellIndex,CurrentFeature) = zscore(CurrentLogFeatureData);
    end
end

% Train a proper model (balanced classes etc....) 

EGFStorage = {'0.78nM'};
DrugStorage = {'No.Drug'};
TimeStorage = {'960min'};

EGFString = EGFStorage{1,1};
TimeString = TimeStorage{1,1};
DrugString = DrugStorage{1,1};

EGF = find(contains(ConditionNames,EGFString));
Time = find(contains(ConditionNames,TimeString));
Drug = find(contains(ConditionNames,DrugString));

FirstI = intersect(EGF,Time);
Wells = intersect(FirstI,Drug);

NewWells = zeros(2,1);

NewWells(1) = Wells(end-1);
NewWells(2) = Wells(end);

Wells = NewWells;

WellIndex = find(ismember(LinearIndex,Wells));

WellFeatureData = PCFeatureData(WellIndex,:);
WellResponseData = PCResponseData(WellIndex,:);

CurrentTestFeature = 120;

WellDecisionData = log2(FeatureData(WellIndex,CurrentTestFeature));

BelowCells = find(WellDecisionData < 4);
AboveCells = find(WellDecisionData > 7);

% Balance Classes....

NumberBelow = numel(BelowCells);
NumberAbove = numel(AboveCells);

MinNumber = min([NumberAbove,NumberBelow]);

NonResponderFeatureData = WellFeatureData(BelowCells,:);
ResponderFeatureData = WellFeatureData(AboveCells,:);

NonResponderResponseData = WellResponseData(BelowCells,:);
ResponderResponseData = WellResponseData(AboveCells,:);

FullFeatureData = [WellFeatureData(BelowCells,:);WellFeatureData(AboveCells,:)];
FullResponseData = [WellResponseData(BelowCells,:);WellResponseData(AboveCells,:)];
FullIndexData = [ones(numel(BelowCells),1);ones(numel(AboveCells),1)*2];

RandomCellsBelow = randperm(NumberBelow,MinNumber);
RandomCellsAbove = randperm(NumberAbove,MinNumber);

ModelFeatureData = [NonResponderFeatureData(RandomCellsBelow,:);ResponderFeatureData(RandomCellsAbove,:)];
ModelResponseData = [NonResponderResponseData(RandomCellsBelow,:);ResponderResponseData(RandomCellsAbove,:)];
ModelIndexData = [ones(MinNumber,1);ones(MinNumber,1)*2];

% Model with Cellular State

MDLFeature = cvglmnet(ModelFeatureData,ModelIndexData,'binomial');

MDLResponse = cvglmnet(ModelResponseData,ModelIndexData,'binomial');


EGFStorage = {'0.78nM','0.78nM','0.78nM','0.78nM'};
DrugStorage = {'No.Drug','AKT.1','MEK.1','MEK.AKT.1'};
TimeStorage = {'960min','960min','960min','960min'};

TrueIndexStorage = cell(numel(EGFStorage),1);
PredictedIndexStorageFeature = cell(numel(EGFStorage),1);
PredictedIndexStorageResponse = cell(numel(EGFStorage),1);
PredictedPosteriorStorageFeature = cell(numel(EGFStorage),1);
PredictedPosteriorStorageResponse = cell(numel(EGFStorage),1);
OriginalWellIndex = cell(numel(EGFStorage),1);
UmapWellIndex = [];


for CurrentCondition = 1:numel(EGFStorage)
    
    EGFString = EGFStorage{1,CurrentCondition};
    TimeString = TimeStorage{1,CurrentCondition};
    DrugString = DrugStorage{1,CurrentCondition};
    
    EGF = find(contains(ConditionNames,EGFString));
    Time = find(contains(ConditionNames,TimeString));
    Drug = find(contains(ConditionNames,DrugString));
    
    FirstI = intersect(EGF,Time);
    Wells = intersect(FirstI,Drug);
    
    NewWells = zeros(2,1);
    
    NewWells(1) = Wells(end-1);
    NewWells(2) = Wells(end);
    
    Wells = NewWells;
    
    WellIndex = find(ismember(LinearIndex,Wells));
    
    WellFeatureData = PCFeatureData(WellIndex,:);
    WellResponseData = PCResponseData(WellIndex,:);
    
    CurrentTestFeature = 120;
    
    WellDecisionData = log2(FeatureData(WellIndex,CurrentTestFeature));
    
    BelowCells = find(WellDecisionData <= 5.5);
    AboveCells = find(WellDecisionData > 5.5);
    
    OriginalIndexBelow = WellIndex(BelowCells);
    OriginalIndexAbove = WellIndex(AboveCells);
    
    OriginalWellIndex{CurrentCondition,1} = [OriginalIndexBelow;OriginalIndexAbove];
    
    FullFeatureData = [WellFeatureData(BelowCells,:);WellFeatureData(AboveCells,:)];
    FullResponseData = [WellResponseData(BelowCells,:);WellResponseData(AboveCells,:)];
    FullIndexData = [ones(numel(BelowCells),1);ones(numel(AboveCells),1)*2];
    
    FitIndexFeature = cvglmnetPredict(MDLFeature,FullFeatureData,'lambda_1se','class');
    PosteriorFeature = cvglmnetPredict(MDLFeature,FullFeatureData,'lambda_1se','response');
    PosteriorFeature = [1 - PosteriorFeature,PosteriorFeature];
    
    FitIndexResponse = cvglmnetPredict(MDLResponse,FullResponseData,'lambda_1se','class');
    PosteriorResponse = cvglmnetPredict(MDLResponse,FullResponseData,'lambda_1se','response');
    PosteriorResponse = [1 - PosteriorResponse,PosteriorResponse];
    
    TrueIndexStorage{CurrentCondition,1} = FullIndexData;
    PredictedIndexStorageFeature{CurrentCondition,1} = FitIndexFeature;
    PredictedIndexStorageResponse{CurrentCondition,1} = FitIndexResponse;
    PredictedPosteriorStorageFeature{CurrentCondition,1} = PosteriorFeature;
    PredictedPosteriorStorageResponse{CurrentCondition,1} = PosteriorResponse;  
    UmapWellIndex = [UmapWellIndex;OriginalIndexBelow;OriginalIndexAbove];
end



% Find the right cells and then neighbors in the appropriate spaces.... 

CustomColorMap = hot(200);
CustomColorMap = CustomColorMap(1:100,:).^2;
CustomColorMap = [CustomColorMap];


PlotStorage = zeros(4,5);
StorageFeatureData = [];
StorageLogFeatureData = [];
StorageClassIndicator = [];
StorageRawFeatureData = [];


StorageProperWellIndex = [];


% % % % 

% Class 1 cells

CurrentCondition = 1;

CurrentIndexStorage = TrueIndexStorage{CurrentCondition,1};
CurrentWellIndex = OriginalWellIndex{CurrentCondition,1};

ResponderIndex = find(CurrentIndexStorage == 1);
WellIndexClass = CurrentWellIndex(ResponderIndex,:);

ReferenceFeatureData = ReductionUmap(WellIndexClass,:);


for CurrentCondition = 1:4
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    Neighbors = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');
    
        
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);
        
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    AboveThreshold = find(FractionResponder < 0.2);
    
    WellIndexAbove = ConditionIndex(AboveThreshold,:);
    
    
    ResponderIndex = ResponderIndex(AboveThreshold,:);
    WellIndexClass = WellIndexClass(AboveThreshold,:);
    ReferenceFeatureData = ReferenceFeatureData(AboveThreshold,:);
    
end

StorageCellIndex = cell(4,1);
StorageFraction = cell(4,1);
DistanceStorage = cell(4,1);

for CurrentCondition = 1:4
    
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    [Neighbors,Distance] = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');    
    MeanDistance = mean(Distance,2);
    
    DistanceStorage{CurrentCondition,1} = MeanDistance;
         
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);       
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    
    StorageFraction{CurrentCondition,1} = FractionResponder;
    
    OriginalIndexNeighbors = zeros(size(ReferenceFeatureData,1),25);
    
    for CurrentCell = 1:size(WellIndexAbove,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        OriginalIndexNeighbors(CurrentCell,:) = ConditionIndex(CurrentNeighbors);        
    end
    
    StorageCellIndex{CurrentCondition,1} = OriginalIndexNeighbors;
    
end

% Plot Fraction now

for CurrentCondition = 1:4
    CurrentCellIndex = StorageCellIndex{CurrentCondition,1};   
    NeighborStorage = [];
    for CurrentCell = 1:size(CurrentCellIndex,1)
    CellNeighborIndex = CurrentCellIndex(CurrentCell,:);
    NeighborStorage = [NeighborStorage;CellNeighborIndex];
    UniqueNeighbor = unique(NeighborStorage(:));
    end
    
    RBData = log2(FeatureData(UniqueNeighbor,120));
    RBData(RBData <= 5.5) = 0;
    RBData(RBData > 5.5) = 1;
    PlotStorage(CurrentCondition,5) = mean(RBData);
    StorageFeatureData = [StorageFeatureData;FeatureZData(UniqueNeighbor,:)];
    StorageLogFeatureData = [StorageFeatureData;LogFeatureZData(UniqueNeighbor,:)];
    StorageRawFeatureData = [StorageRawFeatureData;FeatureData(UniqueNeighbor,:)];
    StorageClassIndicator = [StorageClassIndicator;ones(numel(UniqueNeighbor),1)*5,ones(numel(UniqueNeighbor),1)*CurrentCondition];
    StorageProperWellIndex = [StorageProperWellIndex;UniqueNeighbor];
end




% Class 2 cells

CurrentCondition = 2;

CurrentIndexStorage = TrueIndexStorage{CurrentCondition,1};
CurrentWellIndex = OriginalWellIndex{CurrentCondition,1};

ResponderIndex = find(CurrentIndexStorage == 2);
WellIndexClass = CurrentWellIndex(ResponderIndex,:);

ReferenceFeatureData = ReductionUmap(WellIndexClass,:);


for CurrentCondition = 1:4
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    Neighbors = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');
    
        
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);
        
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    
    
    if CurrentCondition == 1
        AboveThreshold = find(FractionResponder < 0.4);
    elseif CurrentCondition == 2
        AboveThreshold = find(FractionResponder > 0.6);
    elseif CurrentCondition == 3
        AboveThreshold = find(FractionResponder < 0.4);
    elseif CurrentCondition == 4
        AboveThreshold = find(FractionResponder < 0.4);
    end
    
    WellIndexAbove = ConditionIndex(AboveThreshold,:);
    
    
    ResponderIndex = ResponderIndex(AboveThreshold,:);
    WellIndexClass = WellIndexClass(AboveThreshold,:);
    ReferenceFeatureData = ReferenceFeatureData(AboveThreshold,:);
    
end

StorageCellIndex = cell(4,1);
StorageFraction = cell(4,1);
DistanceStorage = cell(4,1);

for CurrentCondition = 1:4
    
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    [Neighbors,Distance] = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');    
    MeanDistance = mean(Distance,2);
    
    DistanceStorage{CurrentCondition,1} = MeanDistance;
         
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);       
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    
    StorageFraction{CurrentCondition,1} = FractionResponder;
    
    OriginalIndexNeighbors = zeros(size(ReferenceFeatureData,1),25);
    
    for CurrentCell = 1:size(WellIndexAbove,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        OriginalIndexNeighbors(CurrentCell,:) = ConditionIndex(CurrentNeighbors);        
    end
    
    StorageCellIndex{CurrentCondition,1} = OriginalIndexNeighbors;
    
end

% Plot Fraction now

for CurrentCondition = 1:4
    CurrentCellIndex = StorageCellIndex{CurrentCondition,1};   
    NeighborStorage = [];
    for CurrentCell = 1:size(CurrentCellIndex,1)
    CellNeighborIndex = CurrentCellIndex(CurrentCell,:);
    NeighborStorage = [NeighborStorage;CellNeighborIndex];
    UniqueNeighbor = unique(NeighborStorage(:));
    end
    
    RBData = log2(FeatureData(UniqueNeighbor,120));
    RBData(RBData <= 5.5) = 0;
    RBData(RBData > 5.5) = 1;
    PlotStorage(CurrentCondition,4) = mean(RBData);
    StorageFeatureData = [StorageFeatureData;FeatureZData(UniqueNeighbor,:)];
    StorageLogFeatureData = [StorageFeatureData;LogFeatureZData(UniqueNeighbor,:)];
    StorageRawFeatureData = [StorageRawFeatureData;FeatureData(UniqueNeighbor,:)];
    StorageClassIndicator = [StorageClassIndicator;ones(numel(UniqueNeighbor),1)*4,ones(numel(UniqueNeighbor),1)*CurrentCondition];
    StorageProperWellIndex = [StorageProperWellIndex;UniqueNeighbor];
end



% Class 3 cells

CurrentCondition = 2;

CurrentIndexStorage = TrueIndexStorage{CurrentCondition,1};
CurrentWellIndex = OriginalWellIndex{CurrentCondition,1};

ResponderIndex = find(CurrentIndexStorage == 2);
WellIndexClass = CurrentWellIndex(ResponderIndex,:);

ReferenceFeatureData = ReductionUmap(WellIndexClass,:);


for CurrentCondition = 1:4
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    Neighbors = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');
    
        
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);
        
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    
    
    if CurrentCondition == 1
        AboveThreshold = find(FractionResponder > 0.7);
    elseif CurrentCondition == 2
        AboveThreshold = find(FractionResponder > 0.7);
    elseif CurrentCondition == 3
        AboveThreshold = find(FractionResponder < 0.3);
    elseif CurrentCondition == 4
        AboveThreshold = find(FractionResponder < 0.3);
    end
    
    WellIndexAbove = ConditionIndex(AboveThreshold,:);
    
    
    ResponderIndex = ResponderIndex(AboveThreshold,:);
    WellIndexClass = WellIndexClass(AboveThreshold,:);
    ReferenceFeatureData = ReferenceFeatureData(AboveThreshold,:);
    
end

StorageCellIndex = cell(4,1);
StorageFraction = cell(4,1);
DistanceStorage = cell(4,1);

for CurrentCondition = 1:4
    
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    [Neighbors,Distance] = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');    
    MeanDistance = mean(Distance,2);
    
    DistanceStorage{CurrentCondition,1} = MeanDistance;
         
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);       
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    
    StorageFraction{CurrentCondition,1} = FractionResponder;
    
    OriginalIndexNeighbors = zeros(size(ReferenceFeatureData,1),25);
    
    for CurrentCell = 1:size(WellIndexAbove,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        OriginalIndexNeighbors(CurrentCell,:) = ConditionIndex(CurrentNeighbors);        
    end
    
    StorageCellIndex{CurrentCondition,1} = OriginalIndexNeighbors;
    
end

% Plot Fraction now

for CurrentCondition = 1:4
    CurrentCellIndex = StorageCellIndex{CurrentCondition,1};   
    NeighborStorage = [];
    for CurrentCell = 1:size(CurrentCellIndex,1)
    CellNeighborIndex = CurrentCellIndex(CurrentCell,:);
    NeighborStorage = [NeighborStorage;CellNeighborIndex];
    UniqueNeighbor = unique(NeighborStorage(:));
    end
    
    RBData = log2(FeatureData(UniqueNeighbor,120));
    RBData(RBData <= 5.5) = 0;
    RBData(RBData > 5.5) = 1;
    PlotStorage(CurrentCondition,3) = mean(RBData);
    StorageFeatureData = [StorageFeatureData;FeatureZData(UniqueNeighbor,:)];
    StorageLogFeatureData = [StorageFeatureData;LogFeatureZData(UniqueNeighbor,:)];
    StorageRawFeatureData = [StorageRawFeatureData;FeatureData(UniqueNeighbor,:)];
    StorageClassIndicator = [StorageClassIndicator;ones(numel(UniqueNeighbor),1)*3,ones(numel(UniqueNeighbor),1)*CurrentCondition];
    StorageProperWellIndex = [StorageProperWellIndex;UniqueNeighbor];
end




% Class 4 cells

CurrentCondition = 2;

CurrentIndexStorage = TrueIndexStorage{CurrentCondition,1};
CurrentWellIndex = OriginalWellIndex{CurrentCondition,1};

ResponderIndex = find(CurrentIndexStorage == 2);
WellIndexClass = CurrentWellIndex(ResponderIndex,:);

ReferenceFeatureData = ReductionUmap(WellIndexClass,:);


for CurrentCondition = 1:4
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    Neighbors = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');
    
        
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);
        
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    
    
    if CurrentCondition == 1
        AboveThreshold = find(FractionResponder > 0.6);
    elseif CurrentCondition == 2
        AboveThreshold = find(FractionResponder > 0.6);
    elseif CurrentCondition == 3
        AboveThreshold = find(FractionResponder > 0.6);
    elseif CurrentCondition == 4
        AboveThreshold = find(FractionResponder < 0.4);
    end
    
    WellIndexAbove = ConditionIndex(AboveThreshold,:);
    
    
    ResponderIndex = ResponderIndex(AboveThreshold,:);
    WellIndexClass = WellIndexClass(AboveThreshold,:);
    ReferenceFeatureData = ReferenceFeatureData(AboveThreshold,:);
    
end

StorageCellIndex = cell(4,1);
StorageFraction = cell(4,1);
DistanceStorage = cell(4,1);

for CurrentCondition = 1:4
    
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    [Neighbors,Distance] = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');    
    MeanDistance = mean(Distance,2);
    
    DistanceStorage{CurrentCondition,1} = MeanDistance;
         
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);       
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    
    StorageFraction{CurrentCondition,1} = FractionResponder;
    
    OriginalIndexNeighbors = zeros(size(ReferenceFeatureData,1),25);
    
    for CurrentCell = 1:size(WellIndexAbove,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        OriginalIndexNeighbors(CurrentCell,:) = ConditionIndex(CurrentNeighbors);        
    end
    
    StorageCellIndex{CurrentCondition,1} = OriginalIndexNeighbors;
    
end

% Plot Fraction now

for CurrentCondition = 1:4
    CurrentCellIndex = StorageCellIndex{CurrentCondition,1};   
    NeighborStorage = [];
    for CurrentCell = 1:size(CurrentCellIndex,1)
    CellNeighborIndex = CurrentCellIndex(CurrentCell,:);
    NeighborStorage = [NeighborStorage;CellNeighborIndex];
    UniqueNeighbor = unique(NeighborStorage(:));
    end
    
    RBData = log2(FeatureData(UniqueNeighbor,120));
    RBData(RBData <= 5.5) = 0;
    RBData(RBData > 5.5) = 1;
    PlotStorage(CurrentCondition,2) = mean(RBData);
    StorageFeatureData = [StorageFeatureData;FeatureZData(UniqueNeighbor,:)];
    StorageLogFeatureData = [StorageFeatureData;LogFeatureZData(UniqueNeighbor,:)];
    StorageRawFeatureData = [StorageRawFeatureData;FeatureData(UniqueNeighbor,:)];
    StorageClassIndicator = [StorageClassIndicator;ones(numel(UniqueNeighbor),1)*2,ones(numel(UniqueNeighbor),1)*CurrentCondition];
    StorageProperWellIndex = [StorageProperWellIndex;UniqueNeighbor];
end




% Class 5 cells

CurrentCondition = 4;

CurrentIndexStorage = TrueIndexStorage{CurrentCondition,1};
CurrentWellIndex = OriginalWellIndex{CurrentCondition,1};

ResponderIndex = find(CurrentIndexStorage == 2);
WellIndexClass = CurrentWellIndex(ResponderIndex,:);

ReferenceFeatureData = ReductionUmap(WellIndexClass,:);


for CurrentCondition = 1:4
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    Neighbors = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');
    
        
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);
        
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    AboveThreshold = find(FractionResponder > 0.7);
    
    WellIndexAbove = ConditionIndex(AboveThreshold,:);
    
    
    ResponderIndex = ResponderIndex(AboveThreshold,:);
    WellIndexClass = WellIndexClass(AboveThreshold,:);
    ReferenceFeatureData = ReferenceFeatureData(AboveThreshold,:);
    
end

StorageCellIndex = cell(4,1);
StorageFraction = cell(4,1);
DistanceStorage = cell(4,1);

for CurrentCondition = 1:4
    
    ConditionIndex = OriginalWellIndex{CurrentCondition,1};
    CurrentIndex = TrueIndexStorage{CurrentCondition,1};
    ConditionFeatureData = ReductionUmap(ConditionIndex,:);
    
    ResponderFeatureData = ConditionFeatureData(:,:);
    
    [Neighbors,Distance] = knnsearch(ResponderFeatureData,ReferenceFeatureData,'K',25,'Distance','cityblock');    
    MeanDistance = mean(Distance,2);
    
    DistanceStorage{CurrentCondition,1} = MeanDistance;
         
    CurrentCellNeighbors = zeros(size(Neighbors));
    
    for CurrentCell = 1:size(Neighbors,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        CurrentCellNeighbors(CurrentCell,:) = CurrentIndex(CurrentNeighbors,:);       
    end
    
    CurrentCellNeighbors = CurrentCellNeighbors - 1;
    FractionResponder = mean(CurrentCellNeighbors,2);
    
    StorageFraction{CurrentCondition,1} = FractionResponder;
    
    OriginalIndexNeighbors = zeros(size(ReferenceFeatureData,1),25);
    
    for CurrentCell = 1:size(WellIndexAbove,1)
        CurrentNeighbors = Neighbors(CurrentCell,:);
        OriginalIndexNeighbors(CurrentCell,:) = ConditionIndex(CurrentNeighbors);        
    end
    
    StorageCellIndex{CurrentCondition,1} = OriginalIndexNeighbors;
    
end


for CurrentCondition = 1:4
    CurrentCellIndex = StorageCellIndex{CurrentCondition,1};   
    NeighborStorage = [];
    for CurrentCell = 1:size(CurrentCellIndex,1)
    CellNeighborIndex = CurrentCellIndex(CurrentCell,:);
    NeighborStorage = [NeighborStorage;CellNeighborIndex];
    UniqueNeighbor = unique(NeighborStorage(:));
    end
    
    RBData = log2(FeatureData(UniqueNeighbor,120));
    RBData(RBData <= 5.5) = 0;
    RBData(RBData > 5.5) = 1;
    PlotStorage(CurrentCondition,1) = mean(RBData);
    StorageFeatureData = [StorageFeatureData;FeatureZData(UniqueNeighbor,:)];
    StorageLogFeatureData = [StorageFeatureData;LogFeatureZData(UniqueNeighbor,:)];
    StorageRawFeatureData = [StorageRawFeatureData;FeatureData(UniqueNeighbor,:)];
    StorageClassIndicator = [StorageClassIndicator;ones(numel(UniqueNeighbor),1)*1,ones(numel(UniqueNeighbor),1)*CurrentCondition];
    StorageProperWellIndex = [StorageProperWellIndex;UniqueNeighbor];
end


PlotMatrix = [flipud(PlotStorage),zeros(4,1);zeros(1,6)];
figure
pcolor(PlotMatrix)
caxis([0 1])
colormap(CustomColorMap)
axis image


FullUmapData = ReductionUmap(UmapWellIndex,:);
ClassUmapData = ReductionUmap(StorageProperWellIndex,:);
ClassIndicator = StorageClassIndicator(:,1);

figure
hold on
scatter(FullUmapData(:,1),FullUmapData(:,2),10,'filled','MarkerFaceColor',[0.5 0.5 0.5]);
xlim([-5.2 4.3])
ylim([-4 7])
axis square

RandomShuffle = randperm(numel(ClassIndicator),numel(ClassIndicator));

scatter(ClassUmapData(RandomShuffle,1),ClassUmapData(RandomShuffle,2),18,ClassIndicator(RandomShuffle),'filled');
xlim([-5.2 4.3])
ylim([-4 7])


FullUmapData = ResponseReductionUmap(UmapWellIndex,:);
ClassUmapData = ResponseReductionUmap(StorageProperWellIndex,:);
ClassIndicator = StorageClassIndicator(:,1);

figure
hold on
scatter(FullUmapData(:,1),FullUmapData(:,2),10,'filled','MarkerFaceColor',[0.5 0.5 0.5]);
xlim([-7 5.3])
ylim([-7.3 8])
axis square
axis square

RandomShuffle = randperm(numel(ClassIndicator),numel(ClassIndicator));

scatter(ClassUmapData(RandomShuffle,1),ClassUmapData(RandomShuffle,2),18,ClassIndicator(RandomShuffle),'filled');
xlim([-7 5.3])
ylim([-7.3 8])
axis square



%% Figure 5G 

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

FullUmapData = ReductionUmap(UmapWellIndex,:);
ClassUmapData = ReductionUmap(StorageProperWellIndex,:);
ClassResponseUmapData = ResponseReductionUmap(StorageProperWellIndex,:);
FullResponseUmapData = ResponseReductionUmap(UmapWellIndex,:);
ClassIndicator = StorageClassIndicator(:,1);
ConditionIndicator = StorageClassIndicator(:,2);

% As Density because we are crazy......

% Cellular State

for CurrentCS = 1:5
    for CurrentCond = 1:4

    CurrentClass = find(ClassIndicator == CurrentCS);
    CurrentCondition = find(ConditionIndicator == CurrentCond);
    
    IntersectCells = intersect(CurrentClass,CurrentCondition);
    
    CurrentClassUmapData = ClassUmapData(IntersectCells,:);
    
    RawDensity = ksdensity(CurrentClassUmapData,FullUmapData);
    %figure
    Density = RawDensity./max(RawDensity);
    
    RandomShuffle = randperm(size(Density,1),size(Density,1));
    
    figure
    scatter(FullUmapData(RandomShuffle,1),FullUmapData(RandomShuffle,2),10,Density(RandomShuffle),'filled');
    caxis([0 1])
    %colormap(infernoColorMap(:,1:3))
    %colormap(jet(100))
    xlim([-5.2 4.3])
    ylim([-4 7])
    axis square
    
    end
end


% Response

for CurrentCS = 1:5
    for CurrentCond = 1:4

    CurrentClass = find(ClassIndicator == CurrentCS);
    CurrentCondition = find(ConditionIndicator == CurrentCond);
    
    IntersectCells = intersect(CurrentClass,CurrentCondition);
    
    CurrentClassUmapData = ClassResponseUmapData(IntersectCells,:);
    
    RawDensity = ksdensity(CurrentClassUmapData,FullResponseUmapData);
    %figure
    Density = RawDensity./max(RawDensity);
    
    RandomShuffle = randperm(size(Density,1),size(Density,1));
    
    figure
    scatter(FullResponseUmapData(RandomShuffle,1),FullResponseUmapData(RandomShuffle,2),10,Density(RandomShuffle),'filled');
    caxis([0 1])
    %colormap(infernoColorMap(:,1:3))
    %colormap(jet(100))
    xlim([-7 5.3])
    ylim([-7.3 8])
    axis square
    
    end
end
