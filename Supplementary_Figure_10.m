%% load data 
% Adjust path to wherever data and function folder is located
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\Functions\umapFileExchange (1.2.1)\umap\umap.jar');


%% Data description

% LinearIndex: Indicator to which condition each cell (i.e. row) belongs; Individual numbers denote replicates %
% 1,2,3,11,21,22,23,24,25,26,27,28,29,30 - 100ng/ml EGF
% 4,5,6 - 25ng/ml EGF
% 7,8,9 - 10ng/ml EGF
% 10,19,20 - 6.25ng/ml EGF
% 16,17,18 - 1ng/ml EGF
% 13,14,15 - 0ng/ml EGF
% 11,12,21,22,23,24,25,26,27,28,29,30 - 100ng/ml control for intensity decay and secondary antibody only controls after elution (see Gut et al. for details): 11: Cycle 1, 12: Cycle 2 etc... 30 always secondary only. Starting at 11... etc again when 29 was reached

% FeatureHeader: Descriptor of which cellular state feature (column) is represented in the corresponding double matrices %
% FeatureData: Contains raw (and transformed, see material and methods) single cell cellular state feature data; columns correspoding to cellular state features described in "FeatureHeader" %
% FeatureZData: Contains the z-scored (see material and methods) single cell cellular state feature data; columns corresponding to cellular state features described in "FeatureHeader" %

% MetaHeader: Descriptor of which MetaData (e.g. CentroidLocation in image, or which field in an image) is represented in the corresponding double matrices %
% MetaData: Contains single cell information on the Metadata; columns corresponding to information described in "MetaHeader"

% ResponseHeader: Descriptor of which response (column) is represented in the corresponding double matrices %
% ResponseData: Contains raw single cell data; columns corresponding to response features described in "ResponseHeader" %
% LogResponseData: Contains transformed (see material and methods) single cell data; columns corresponding to response features described in "ResponseHeader" %

% PCCoeff: Contains the loadings of each principal component from principal component analysis on cellular state features (FeatureZData)
% PCFeatureData: Contains single cell data of cellular state features (from FeatureZData) transformed to PCs). Only the PCs which together explain 97.5% of the variance are kept (hence only 157)

% MSTData: Relic from the past; not used in the paper %
% MSTHeader: Relic from the past; not used in the paper %

% WeightedClusterData: Data from PCFeatureData weighted as described in material and methods and used as input for fuzzy clustering. Columns correspond to the PCs used; further described in script for Figure 3; Only clustered on cells belong to LinearIndex 1,2,3,4,5,6,7,8,9,10,13,14,15 and 20 %
% ClusterCentor: Centroid locations for the individual cluster centers obtained from fuzzy clustering on cellular state features %
% MembershipData: Contains the Membership degree (Fuzzy clustering outputs degrees of membership, no clear assignement) for each single cell)

%% Supplementary Figure 10A

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following


WellIndex = ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,13,14,15,19,20]);
ReducedResponseData = LogResponseData(WellIndex,:);
ReducedLinearIndex = LinearIndex(WellIndex,:);
%ReducedFeatureData = FeatureZData(WellIndex,:);
%ReducedPCFeatureData = PCFeatureData(WellIndex,:);
%NeighborPhenotype = ReducedFeatureData(:,FeatureIndex);
NeighborPhenotype = WeightedClusterData(:,1:68);
%NeighborPhenotype = ReducedPCFeatureData(:,:);

WellStorage = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};

JaccardStorage = cell(13,5);


WellInsertIndex = 1;
FavoriteStains = [18,168,3,123,153,108,33,91,61,78];

for CurrentWellIndex = 1:size(WellStorage,2)
    GroupIndex = 1;
    % Multivariate...
    CurrentWells = WellStorage{1,CurrentWellIndex};
    
    
    WellIndex = find(ismember(ReducedLinearIndex,CurrentWells));
    NumNeighbors = round(size(WellIndex,1)*0.05);
    
    DistanceFunction = 'cityblock';
    
    
    % Multimodal
    
    WellResponseData = zscore(ReducedResponseData(WellIndex,FavoriteStains));
    WellNeighborPhenotype = NeighborPhenotype(WellIndex,:);
    %WellNeighborPhenotype = ReducedFeatureData(WellIndex,:);
    
    ResponseNeighbors = knnsearch(WellResponseData,WellResponseData,'K',NumNeighbors,'Distance',DistanceFunction);
    PhenoNeighbors = knnsearch(WellNeighborPhenotype,WellNeighborPhenotype,'K',NumNeighbors,'Distance',DistanceFunction);
    
    ResponseNeighbors(:,1) = [];
    PhenoNeighbors(:,1) = [];
    
    NumCommon = zeros(size(ResponseNeighbors,1),1);
    NumUnique = zeros(size(ResponseNeighbors,1),1);
    for CurrentCell = 1:size(ResponseNeighbors,1)
        NumCommon(CurrentCell,1) = numel(intersect(ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)));
        NumUnique(CurrentCell,1) = numel(unique([ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)]));
        
        
    end
    
    JaccardIndex = NumCommon./NumUnique;
    
    
    JaccardStorage{GroupIndex,CurrentWellIndex} = JaccardIndex;
    GroupIndex = GroupIndex + 1;
    
    % ERK + MTOR
    
    
    WellResponseData = zscore(ReducedResponseData(WellIndex,FavoriteStains([3,6])));
    WellNeighborPhenotype = NeighborPhenotype(WellIndex,:);
    %WellNeighborPhenotype = ReducedFeatureData(WellIndex,:);
    
    ResponseNeighbors = knnsearch(WellResponseData,WellResponseData,'K',NumNeighbors,'Distance',DistanceFunction);
    PhenoNeighbors = knnsearch(WellNeighborPhenotype,WellNeighborPhenotype,'K',NumNeighbors,'Distance',DistanceFunction);
    
    ResponseNeighbors(:,1) = [];
    PhenoNeighbors(:,1) = [];
    
    NumCommon = zeros(size(ResponseNeighbors,1),1);
    NumUnique = zeros(size(ResponseNeighbors,1),1);
    for CurrentCell = 1:size(ResponseNeighbors,1)
        NumCommon(CurrentCell,1) = numel(intersect(ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)));
        NumUnique(CurrentCell,1) = numel(unique([ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)]));
        
        
    end
    
    JaccardIndex = NumCommon./NumUnique;
    
    
    JaccardStorage{GroupIndex,CurrentWellIndex} = JaccardIndex;
    GroupIndex = GroupIndex + 1;
    
    
    for CurrentStain = 1:size(FavoriteStains,2)
        WellResponseData = zscore(ReducedResponseData(WellIndex,FavoriteStains(1,CurrentStain)));
        ResponseNeighbors = knnsearch(WellResponseData,WellResponseData,'K',NumNeighbors,'Distance',DistanceFunction);
        ResponseNeighbors(:,1) = [];
        NumCommon = zeros(size(ResponseNeighbors,1),1);
        NumUnique = zeros(size(ResponseNeighbors,1),1);
        for CurrentCell = 1:size(ResponseNeighbors,1)
            NumCommon(CurrentCell,1) = numel(intersect(ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)));
            NumUnique(CurrentCell,1) = numel(unique([ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)]));
            
            
        end
        
        JaccardIndex = NumCommon./NumUnique;
        JaccardStorage{GroupIndex,CurrentWellIndex} = JaccardIndex;
        
        
        GroupIndex = GroupIndex + 1;
        
    end
    
    % Random Sample...
    ResponseNeighbors = zeros(size(WellIndex,1),NumNeighbors);
    PhenoNeighbors = zeros(size(WellIndex,1),NumNeighbors);
    for CurrentCell = 1:size(WellIndex,1)
        ResponseNeighbors(CurrentCell,:) = randperm(size(WellIndex,1),NumNeighbors);
        PhenoNeighbors(CurrentCell,:) = randperm(size(WellIndex,1),NumNeighbors);
    end
    
    NumCommon = zeros(size(ResponseNeighbors,1),1);
    NumUnique = zeros(size(ResponseNeighbors,1),1);
    for CurrentCell = 1:size(ResponseNeighbors,1)
        NumCommon(CurrentCell,1) = numel(intersect(ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)));
        NumUnique(CurrentCell,1) = numel(unique([ResponseNeighbors(CurrentCell,:),PhenoNeighbors(CurrentCell,:)]));
    end
    
    JaccardIndex = NumCommon./NumUnique;
    
    
    JaccardStorage{GroupIndex,CurrentWellIndex} = JaccardIndex;
    GroupIndex = GroupIndex + 1;
    
    CurrentWellIndex
    WellInsertIndex = WellInsertIndex + 1;
end

% On UMAP

ReducedWells = [1,2,3,4,5,6,7,8,9,10,19,20,13,14,15];
WellIndex = find(ismember(LinearIndex,ReducedWells));

ReducedWellIndex = LinearIndex(WellIndex,:);

WellGroups = {[13,14,15],[10,19,20],[9,8,7],[6,5,4],[3,2,1]};
ConcentrationString = {'0ng','6.25ng','10ng','25ng','100ng'};

TextMatrix = {'Multimodal','pERK + pMTOR','pEGFR','pMEK','pERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6','Random'};


for CurrentWell = 1:size(WellStorage,2)
    Wells = WellStorage{1,CurrentWell};
    CurrentWellIndex = find(ismember(ReducedWellIndex,Wells));
    for CurrentModal = 1:13
        figure
        CurrentRatio = JaccardStorage{CurrentModal,CurrentWell}./mean(JaccardStorage{13,CurrentWell});
        scatter(ReductionUmap(CurrentWellIndex,1),ReductionUmap(CurrentWellIndex,2),10,CurrentRatio,'filled','MarkerEdgeColor','none')
        caxis([0 2.5])
        %colormap(flipud(getPyPlot_cMap('cubehelix',500)))
        colormap(rainbowColorMap(:,1:3))
        %colormap(getPyPlot_cMap('coolwarm',500))
        
        ylim([-4.3 6.8])
        xlim([-7.5 10.5])
        set(gcf,'position',[2963 -211 590.8 450])
        axis off
        
%         ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_Jaccard_',num2str(CurrentWell),'_',TextMatrix{1,CurrentModal},'.jpg'];
%         export_fig(ExportPath,'-r1200','-transparent')
%         
%         colorbar
%         axis on
%         ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_Jaccard_',num2str(CurrentWell),'_',TextMatrix{1,CurrentModal},'.pdf'];
%         export_fig(ExportPath,'-painters')
        
    end   
%     close all
end

%% Supplementary Figure 10B

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

%% load data 
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1_5.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));


WellIndex = ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,13,14,15,19,20]);
BGIndex = find([contains(FeatureHeader,'BG488');contains(FeatureHeader,'BG568');contains(FeatureHeader,'BG647')]);

MorphologyIndex = find(contains(FeatureHeader,'Morphology'));
MorphologyIndex = setdiff(MorphologyIndex,BGIndex);

IntensityRawIndex = find(contains(FeatureHeader,'Intensity'));
STDIndex = find(contains(FeatureHeader,'std'));
IntensityIndex = setdiff(IntensityRawIndex,STDIndex);
IntensityIndex = setdiff(IntensityIndex,BGIndex);

TextureIndex = find(contains(FeatureHeader,'Texture'));
TextureIndex = setdiff(TextureIndex,BGIndex);

PopulationIndex = 1288:1297;
PopulationIndex = setdiff(PopulationIndex,BGIndex);


PopulationPlotFeatures = [2,3,4,5];
MorphologyPlotFeatures = [1,14,15,20];
IntensityPlotFeatures = [27,31,35,39,43,51,55,59,63,65,71,75,77,81,95,97,103,107];
TexturePlotFeatures = [53,54,56,57,58,59,60,61,62,63,64,65,66,67];

%FeatureIndex = [PopulationIndex(PopulationPlotFeatures)';MorphologyIndex(MorphologyPlotFeatures);IntensityIndex(IntensityPlotFeatures);TextureIndex(TexturePlotFeatures)];
FeatureIndex = [PopulationIndex(PopulationPlotFeatures)';MorphologyIndex(MorphologyPlotFeatures);IntensityIndex(IntensityPlotFeatures)];

FeatureNames = cell(size(FeatureIndex,1),1);

for CurrentName = 1:size(FeatureIndex,1)
    FeatureNames{CurrentName,1} = FeatureHeader{FeatureIndex(CurrentName,1),1};   
end



WellIndex = ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,13,14,15,19,20]);
ReducedResponseData = LogResponseData(WellIndex,:);
ReducedLinearIndex = LinearIndex(WellIndex,:);
ReducedFeatureData = FeatureZData(WellIndex,:);
%ReducedPCFeatureData = PCFeatureData(WellIndex,:);
NeighborPhenotype = ReducedFeatureData(:,FeatureIndex);
%NeighborPhenotype = WeightedClusterData(:,1:68);
%NeighborPhenotype = ReducedPCFeatureData(:,:);



GroupIndex = 1;

WellStorage = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};

CosineStorage = cell(11,5);
EuclideanStorage = cell(11,5);
ManhattanStorage = cell(11,5);
ChebychevStorage = cell(11,5);

WellInsertIndex = 1;
FavoriteStains = [18,168,3,123,153,108,33,91,61,78];

for CurrentWellIndex = 1:size(WellStorage,2)
    
    % Multivariate...
    CurrentWells = WellStorage{1,CurrentWellIndex};
    
    IntermediateBoxStorage = [];
    IntermediateGroupStorage = [];
    WellIndex = find(ismember(ReducedLinearIndex,CurrentWells));
    NumNeighbors = round(size(WellIndex,1));
    
    DistanceFunction = 'cityblock';
    
    
    % Multimodal
    
    WellResponseData = zscore(ReducedResponseData(WellIndex,FavoriteStains));
    WellNeighborPhenotype = NeighborPhenotype(WellIndex,:);
    %WellNeighborPhenotype = ReducedFeatureData(WellIndex,:);
    
    ResponseNeighbors = knnsearch(WellResponseData,WellResponseData,'K',NumNeighbors,'Distance',DistanceFunction);
    
    %ResponseNeighbors(:,1) = [];
    
    % Get full Distance Matrix
    CosineSimilarity = 1-squareform(pdist(WellNeighborPhenotype,'cosine'));
    
    RowIndex = repmat(1:size(ResponseNeighbors,1),size(ResponseNeighbors,1),1)';
    
    IndLinearIndex = sub2ind(size(RowIndex),RowIndex,ResponseNeighbors);
    SortedDistance = CosineSimilarity(IndLinearIndex);
    
    ClosestDistance = SortedDistance(:,2:51);
    
    CosineStorage{1,WellInsertIndex} = ClosestDistance;
    
    EuclideanDistance = squareform(pdist(WellNeighborPhenotype,'euclidean'));
    SortedDistance = EuclideanDistance(IndLinearIndex);
    ClosestDistance = SortedDistance(:,2:51);
    
    EuclideanStorage{1,WellInsertIndex} = ClosestDistance;
    
%     ManhattanDistance = squareform(pdist(WellNeighborPhenotype,'cityblock'));
%     SortedDistance = ManhattanDistance(IndLinearIndex);
%     ClosestDistance = SortedDistance(:,2:51);
%     
%     ManhattanStorage{1,WellInsertIndex} = ClosestDistance;
    
%     ChebychevDistance = squareform(pdist(WellNeighborPhenotype,'chebychev'));
%     SortedDistance = ChebychevDistance(IndLinearIndex);
%     ClosestDistance = SortedDistance(:,2:51);
%     
%     ChebychevStorage{1,WellInsertIndex} = ClosestDistance;
    
    
    % UniModal
    
    for CurrentStain = 1:size(FavoriteStains,2)
        WellResponseData = zscore(ReducedResponseData(WellIndex,FavoriteStains(1,CurrentStain)));
        ResponseNeighbors = knnsearch(WellResponseData,WellResponseData,'K',NumNeighbors,'Distance',DistanceFunction);
        RowIndex = repmat(1:size(ResponseNeighbors,1),size(ResponseNeighbors,1),1)';
        
        IndLinearIndex = sub2ind(size(RowIndex),RowIndex,ResponseNeighbors);
        SortedDistance = CosineSimilarity(IndLinearIndex);
        ClosestDistance = SortedDistance(:,2:51);
        
        
        CosineStorage{CurrentStain + 1,WellInsertIndex} = ClosestDistance;
              
        SortedDistance = EuclideanDistance(IndLinearIndex);
        ClosestDistance = SortedDistance(:,2:51);
        
        EuclideanStorage{CurrentStain + 1,WellInsertIndex} = ClosestDistance;
        
%         SortedDistance = ManhattanDistance(IndLinearIndex);
%         ClosestDistance = SortedDistance(:,2:51);
%     
%         ManhattanStorage{CurrentStain + 1,WellInsertIndex} = ClosestDistance;
        

%         SortedDistance = ChebychevDistance(IndLinearIndex);
%         ClosestDistance = SortedDistance(:,2:51);
%     
%         ChebychevStorage{CurrentStain + 1,WellInsertIndex} = ClosestDistance;
        
    end
    
    WellInsertIndex = WellInsertIndex + 1;
end

figure
hold on
BoxPos = 1;
for CurrentStain = 1:11
    for CurrentConcentration = 1:5
        CurrentData = CosineStorage{CurrentStain,CurrentConcentration};
        MeanData = mean(CurrentData,2);
        boxplot(MeanData,'Positions',BoxPos)
        BoxPos = BoxPos + 1;
    end
end

xlim([0 56])

%% Supplementary Figure 10C

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following


WellIndex = ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,13,14,15,19,20]);
ReducedResponseData = LogResponseData(WellIndex,:);
ReducedLinearIndex = LinearIndex(WellIndex,:);
NeighborPhenotype = WeightedClusterData(:,1:68);


GroupIndex = 1;

WellStorage = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};

AllCombinations = dec2bin(0:1023)-'0';
AllCombinations = logical(AllCombinations);
AllCombinations(1,:) = [];

CosineStorage = cell(size(AllCombinations,1),5);

WellInsertIndex = 1;
FavoriteStains = [18,168,3,123,153,108,33,91,61,78];

%parpool(4)

for CurrentWellIndex = 1:size(WellStorage,2)
    
    % Multivariate...
    CurrentWells = WellStorage{1,CurrentWellIndex};
    
    
    WellIndex = find(ismember(ReducedLinearIndex,CurrentWells));
    NumNeighbors = round(size(WellIndex,1));
    
    DistanceFunction = 'cityblock';
    WellNeighborPhenotype = NeighborPhenotype(WellIndex,:);
    CosineSimilarity = 1-squareform(pdist(WellNeighborPhenotype,'cosine'));
    RowIndex = repmat(1:NumNeighbors,NumNeighbors,1)';
    
    for CurrentCombination = 1:size(AllCombinations,1)
        
        CombinationIndex = AllCombinations(CurrentCombination,:);
        WellResponseData = zscore(ReducedResponseData(WellIndex,FavoriteStains(CombinationIndex)));
             
        ResponseNeighbors = knnsearch(WellResponseData,WellResponseData,'K',NumNeighbors,'Distance',DistanceFunction);

        IndLinearIndex = sub2ind(size(RowIndex),RowIndex,ResponseNeighbors);
        CosineStorage{CurrentCombination,CurrentWellIndex} = mean(CosineSimilarity(IndLinearIndex(:,2:51)),2);
        
        CurrentCombination
             
    end
    CurrentWellIndex
end


BootStrapNum = 500;
RandomCells = 50;

StorageDistance = cell(10,5);
StorageGroup = cell(10,5);
SumCombinations = sum(AllCombinations,2);

MaxStorage = zeros(10,5);

for CurrentConcentration = 1:5
    for CurrentType = 1:10
        IndexCombinations = find(SumCombinations == CurrentType);
        IntermediateStorage = [];
        for CurrentCombination = 1:size(IndexCombinations,1)
            CurrentIndex = IndexCombinations(CurrentCombination);
            CurrentData = CosineStorage{CurrentIndex,CurrentConcentration};
            MoreIntermediate = zeros(BootStrapNum,1);
            for CurrentStrap = 1:BootStrapNum
                MoreIntermediate(CurrentStrap,1) = mean(CurrentData(randperm(size(CurrentData,1),RandomCells)));
            end
            IntermediateStorage = [IntermediateStorage;MoreIntermediate];
        end
        StorageDistance{CurrentType,CurrentConcentration} = IntermediateStorage;
        StorageGroup{CurrentType,CurrentConcentration} = repmat(CurrentType,size(IntermediateStorage,1),1);
        MaxStorage(CurrentType,CurrentConcentration) = max(IntermediateStorage);
    end
end

LinDistance = cell2mat(StorageDistance);
LinGroup = cell2mat(StorageGroup);
NormedDistance = LinDistance./max(max(MaxStorage));

figure
boxchart(LinGroup(:),abs(NormedDistance(:)),'MarkerStyle','none');
ylim([0 1])
xlim([0.2 10.7])




%% Supplementary Figure 10D

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

% Remove Nan

NaNCells = ~isnan(max(MembershipData,[],2));

CleanMembershipData = MembershipData(NaNCells,:);
CleanResponseData = LogResponseData(NaNCells,:);
CleanLinearIndex = LinearIndex(NaNCells,:);

% Get UMAP data
ReducedIndex = find(ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,19,20,13,14,15]));
ReducedMember = MembershipData(ReducedIndex,:);
NaNCellsReduced = ~isnan(max(ReducedMember,[],2));

CleanReductionUMAP = ReductionUmap(NaNCellsReduced,:);

% Find Cells with at least 0.5

MaxMember = max(CleanMembershipData,[],2);
KeepCells = find(MaxMember > -0.1);

KeepMembershipData = CleanMembershipData(KeepCells,:);
KeepResponseData = CleanResponseData(KeepCells,:);
KeepLinearIndex = CleanLinearIndex(KeepCells,:);
KeepReductionUMAP = CleanReductionUMAP(KeepCells,:);

% Get Cluster ID

[~,KeepClusterID] = max(KeepMembershipData,[],2);

ResponseStain = [18,168,3,123,153,108,33,91,61,78];
WellCell = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};

StorageLikelihood = cell(size(ResponseStain,2)+2,size(WellCell,2));

for CurrentWellCounter = 1:size(WellCell,2)
    
    CurrentWell = WellCell{1,CurrentWellCounter};
    CurrentWellIndex = find(ismember(KeepLinearIndex,CurrentWell));
    
    CurrentMembershipData = KeepMembershipData(CurrentWellIndex,:);
    CurrentResponseData = KeepResponseData(CurrentWellIndex,:);
    CurrentClusterID = KeepClusterID(CurrentWellIndex,:);
    
    % Get minimal ClusterNumber...
    NumClusterMember = zeros(18,1);
    
    for CurrentID = 1:18
        NumClusterMember(CurrentID,1) = numel(find(CurrentClusterID == CurrentID));
    end
    
    MinimumMember = min(NumClusterMember);
    
    TestIndex = [];
    
    for CurrentID = 1:18
        CurrentMember = find(CurrentClusterID == CurrentID);
        RandomCells = randperm(size(CurrentMember,1),MinimumMember);
        TestIndex = [TestIndex;CurrentMember(RandomCells)];
    end
    
    
    for CurrentResponse = 1:size(ResponseStain,2)
        
        CurrentStains = ResponseStain(CurrentResponse);
        TestResponseData = CurrentResponseData(:,CurrentStains);
        TrainingResponseData = CurrentResponseData(TestIndex,CurrentStains);
        TrainingClusterID = CurrentClusterID(TestIndex,:);
        
        
        MDL = cvglmnet(TrainingResponseData,TrainingClusterID,'multinomial');
        
        PosteriorClass = cvglmnetPredict(MDL,TestResponseData,'lambda_1se','response');
        
        StorageLikelihood{CurrentResponse,CurrentWellCounter} = PosteriorClass;
        CurrentResponse
    end
    
    
    CurrentStains = ResponseStain(:);
    TestResponseData = CurrentResponseData(:,CurrentStains);
    TrainingResponseData = CurrentResponseData(TestIndex,CurrentStains);
    TrainingClusterID = CurrentClusterID(TestIndex,:);
    
    
    MDL = cvglmnet(TrainingResponseData,TrainingClusterID,'multinomial');
    
    PosteriorClass = cvglmnetPredict(MDL,TestResponseData,'lambda_1se','response');
    
    StorageLikelihood{11,CurrentWellCounter} = PosteriorClass;
    
    CurrentStains = ResponseStain([3,6]);
    TestResponseData = CurrentResponseData(:,CurrentStains);
    TrainingResponseData = CurrentResponseData(TestIndex,CurrentStains);
    TrainingClusterID = CurrentClusterID(TestIndex,:);
    
    
    MDL = cvglmnet(TrainingResponseData,TrainingClusterID,'multinomial');
    
    PosteriorClass = cvglmnetPredict(MDL,TestResponseData,'lambda_1se','response');
    
    StorageLikelihood{12,CurrentWellCounter} = PosteriorClass;
    
end




WellCell = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};
ConcentrationString = {'0ng','6.25ng','10ng','25ng','100ng'};
TitleCell = {'pEGFR','pMEK','pERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6','Multimodal','Bimodal'};


for CurrentWellCounter = 1:size(WellCell,2)
    
    CurrentWells = WellCell{1,CurrentWellCounter};
    
    CurrentIndex = find(ismember(KeepLinearIndex,CurrentWells));
    CurrentUMAP = KeepReductionUMAP(CurrentIndex,:);
    CustomColor = tab20ColorMap([1:7,9:13,15:20],1:3);
    MembershipTrue = KeepMembershipData(CurrentIndex,:);
    [~,TrueIndex] = max(MembershipTrue,[],2);
    
    for CurrentModal = 1:12%1:11
        
        CurrentClusterID = KeepClusterID(CurrentIndex,:);
        CurrentLikelihood = StorageLikelihood{CurrentModal,CurrentWellCounter};
        
        StorageTrue = zeros(size(CurrentLikelihood,1),1);
        
        for CurrentCluster = 1:18
            CurrentMember = find(CurrentClusterID == CurrentCluster);
            CurrentLikelihoodID = CurrentLikelihood(CurrentMember,:);
            CurrentTrue = TrueIndex(CurrentMember,:);
            [~,SortedID] = sort(CurrentLikelihoodID,2,'descend');
            TopThree = SortedID(:,1:2);
            [~,MaxID] = max(CurrentLikelihoodID,[],2);
            StorageTrue(CurrentMember,1) = MaxID;
            
            MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
            MemberSum = find(sum(MemberOfTop,2));
            StorageTrue(CurrentMember(MemberSum),1) = CurrentCluster;
        end
        
        if CurrentModal == 11
            CorrectCells = find(TrueIndex-StorageTrue == 0);
            Incorrect = setdiff(1:size(TrueIndex,1),CorrectCells);
            
            figure
            hold on
            scatter(CurrentUMAP(:,1),CurrentUMAP(:,2),10,StorageTrue(:),'filled','MarkerEdgeColor','none')
        else
            figure
            hold on
            scatter(CurrentUMAP(:,1),CurrentUMAP(:,2),10,StorageTrue(:),'filled','MarkerEdgeColor','none')
        end
        colormap(CustomColor)
        ylim([-4.3 6.8])
        xlim([-7.5 10.5])
        set(gcf,'position',[2963 -211 590.8 450])
        axis off
        
%         ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_Predicted_',num2str(CurrentModal),'.jpg'];
%         export_fig(ExportPath,'-r1200','-transparent')
%         
%         colorbar
%         axis on
%         ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_Predicted_',num2str(CurrentModal),'.pdf'];
%         export_fig(ExportPath,'-painters')
    end
    
    figure
    scatter(CurrentUMAP(:,1),CurrentUMAP(:,2),4,TrueIndex,'filled','MarkerEdgeColor','none')
    ylim([-4.3 6.8])
    xlim([-7.5 10.5])
    set(gcf,'position',[2963 -211 590.8 450])
    axis off
    
%     ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_True.jpg'];
%     export_fig(ExportPath,'-r1200')
%     
%     colorbar
%     axis on
%     ExportPath = ['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\UMAP_True.pdf'];
%     export_fig(ExportPath,'-painters')
%     close all
end





ConcentrationString = {'0ng','6.25ng','10ng','25ng','100ng'};
WellCell = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};
for CurrentWellCounter = 1:5
    
    CurrentWell = WellCell{1,CurrentWellCounter};
    CurrentWellIndex = find(ismember(KeepLinearIndex,CurrentWell));
    
    CurrentMembershipData = KeepMembershipData(CurrentWellIndex,:);
    CurrentResponseData = KeepResponseData(CurrentWellIndex,:);
    CurrentClusterID = KeepClusterID(CurrentWellIndex,:);
    
    TitleCell = {'pEGFR','pMEK','pERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6','Multimodal','Bimodal'};
    
    for CurrentModal = 1:size(StorageLikelihood,1)
        CurrentLikelihood = StorageLikelihood{CurrentModal,CurrentWellCounter};
        
        StorageMean = zeros(18,18);
        StorageCorrect = zeros(18,18);
        
        for CurrentCluster = 1:18
            CurrentTrue = CurrentClusterID;
            CurrentClusterTrue = find(CurrentTrue == CurrentCluster);
            CurrentData = CurrentLikelihood(CurrentClusterTrue,:);
            MeanLikelihood = mean(CurrentData);
            StorageMean(CurrentCluster,:) = normalize(MeanLikelihood,1);
            
            [~,SortedID] = sort(CurrentData,2,'descend');
            TopThree = SortedID(:,1:2);
            [~,MaxPrediction] = max(CurrentData,[],2);
            StorageTrue = MaxPrediction;
            
%                         if CurrentModal == 3
%                             MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
%                             MemberSum = find(sum(MemberOfTop,2));
%                             StorageTrue(MemberSum,1) = CurrentCluster;
%                         elseif CurrentModal == 6
%                             MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
%                             MemberSum = find(sum(MemberOfTop,2));
%                             StorageTrue(MemberSum,1) = CurrentCluster;
%             
%                         elseif CurrentModal == 11
%                             MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
%                             MemberSum = find(sum(MemberOfTop,2));
%                             StorageTrue(MemberSum,1) = CurrentCluster;
%             
%                         elseif CurrentModal == 12
%                             MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
%                             MemberSum = find(sum(MemberOfTop,2));
%                             StorageTrue(MemberSum,1) = CurrentCluster;
%                         end
            
            
            MemberOfTop = [ismember(TopThree(:,1),CurrentCluster),ismember(TopThree(:,2),CurrentCluster)];%,ismember(TopThree(:,3),CurrentCluster)];
            MemberSum = find(sum(MemberOfTop,2));
            StorageTrue(MemberSum,1) = CurrentCluster;
            
            IntermediateStorage = zeros(1,18);
            for CurrentCounter = 1:18
                IntermediateStorage(1,CurrentCounter) = numel(find(StorageTrue == CurrentCounter))./numel(StorageTrue);
                
            end
            StorageCorrect(CurrentCluster,:) = normalize(IntermediateStorage,1);
        end
        figure
        hold on
        YValues = fliplr(1:18);
        for CurrentCluster = 1:18
            for CurrentCounter = 1:18
                scatter(CurrentCluster,YValues(CurrentCounter),(StorageMean(CurrentCounter,CurrentCluster)+0.0001).^2*200,StorageCorrect(CurrentCounter,CurrentCluster),'filled','square','MarkerEdgeColor','none')
            end
        end
        
        % Add lines...
        % X Lines
        
        for CurrentX = 0.5:18.5
            line([CurrentX CurrentX],[0.5 18.5],'Color','k')
            line([0.5 18.5],[CurrentX CurrentX],'Color','k')
        end
        
        XTickVector = 1:18;
        xticks(XTickVector);
        yticks(XTickVector);
        xticklabels({'1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18'});
        yticklabels(fliplr({'1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18'}));
        axis square
        xlim([0 20])
        ylim([0 20])
        ylabel('Measured Cluster ID')
        xlabel('Predicted Cluster ID')
        colormap(brewermap(500,'greens'))
        title([TitleCell{1,CurrentModal},' ',ConcentrationString{1,CurrentWellCounter}])
        colorbar
        
%         ExportName = char(join(['Z:\bkramer\190218_184A1_EGF\Figures\RevisionFigures\Figure_4\Raw_Figures\Cluster_Prediction_EdgeC_',num2str(CurrentModal),'.pdf'],''));
%         export_fig(ExportName,'-painters')
        
    end
%     close all
end

%% Supplementary Figure 10E

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following


load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1_5.mat')


NaNCells = ~isnan(max(MembershipData,[],2));

CleanMembershipData = MembershipData(NaNCells,:);
CleanResponseData = LogResponseData(NaNCells,:);
CleanLinearIndex = LinearIndex(NaNCells,:);

% Find Cells with at least 0.5

MaxMember = max(CleanMembershipData,[],2);
KeepCells = find(MaxMember > 0.5);

KeepMembershipData = CleanMembershipData(KeepCells,:);
KeepResponseData = CleanResponseData(KeepCells,:);
KeepLinearIndex = CleanLinearIndex(KeepCells,:);

% Get Cluster ID

[~,KeepClusterID] = max(KeepMembershipData,[],2);

ResponseStain = [18,168,3,123,153,108,33,91,61,78];
WellCell = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};

AllCombinations = dec2bin(0:1023)-'0';
AllCombinations = logical(AllCombinations);
AllCombinations(1,:) = [];

PosteriorStorage = cell(1,size(WellCell,2));

for CurrentWellCounter = 1:size(WellCell,2)
    
    CurrentWell = WellCell{1,CurrentWellCounter};
    CurrentWellIndex = find(ismember(KeepLinearIndex,CurrentWell));
    
    CurrentMembershipData = KeepMembershipData(CurrentWellIndex,:);
    CurrentResponseData = KeepResponseData(CurrentWellIndex,:);
    CurrentClusterID = KeepClusterID(CurrentWellIndex,:);
    
    % Get minimal ClusterNumber...
    NumClusterMember = zeros(18,1);
    
    for CurrentID = 1:18
        NumClusterMember(CurrentID,1) = numel(find(CurrentClusterID == CurrentID));
    end
    
    MinimumMember = min(NumClusterMember);
    
    TestIndex = [];
    
    for CurrentID = 1:18
        CurrentMember = find(CurrentClusterID == CurrentID);
        RandomCells = randperm(size(CurrentMember,1),MinimumMember);
        TestIndex = [TestIndex;CurrentMember(RandomCells)];
    end
    
    IntermediateStorage = cell(size(AllCombinations,1),1);
    
    for CurrentResponse = 1:5%1:size(AllCombinations,1)
        CurrentCombination = AllCombinations(CurrentResponse,:);
        CurrentStains = ResponseStain(CurrentCombination);
        TestResponseData = CurrentResponseData(:,CurrentStains);
        TrainingResponseData = CurrentResponseData(TestIndex,CurrentStains);
        TrainingClusterID = CurrentClusterID(TestIndex,:);
        
        
        MDL = cvglmnet(TrainingResponseData,TrainingClusterID,'multinomial');
        
        PosteriorClass = cvglmnetPredict(MDL,TestResponseData,'lambda_1se','response');
        
        IntermediateStorage{CurrentResponse,1} = PosteriorClass;
        
    end
    
    
    PosteriorStorage{1,CurrentWellCounter} = IntermediateStorage;
      
      
end

% Perform PR Curves for all modalities

CustomColor = brewermap(10,'paired');

WellCell = {[13,14,15],[19,20,10],[7,8,9],[4,5,6],[1,2,3]};
ConcentrationString = {'0ng','6.25ng','10ng','25ng','100ng'};

NaNCells = ~isnan(max(MembershipData,[],2));

CleanMembershipData = MembershipData(NaNCells,:);
%CleanResponseData = LogResponseData(NaNCells,:);
CleanLinearIndex = LinearIndex(NaNCells,:);

% Find Cells with at least 0.5

MaxMember = max(CleanMembershipData,[],2);
KeepCells = find(MaxMember > 0.5);

KeepMembershipData = CleanMembershipData(KeepCells,:);
%KeepResponseData = CleanResponseData(KeepCells,:);
KeepLinearIndex = CleanLinearIndex(KeepCells,:);

% Get Cluster ID

[~,KeepClusterID] = max(KeepMembershipData,[],2);


for CurrentWellCounter = 1:5

CurrentWell = WellCell{1,CurrentWellCounter};
CurrentWellIndex = find(ismember(KeepLinearIndex,CurrentWell));

CurrentMembershipData = KeepMembershipData(CurrentWellIndex,:);
%CurrentResponseData = KeepResponseData(CurrentWellIndex,:);
CurrentClusterID = KeepClusterID(CurrentWellIndex,:);

XTowards = linspace(0,1,5000);

figure
hold on

AUCStorage = zeros(10,1);

for CurrentModality = 1:10

CurrentRows = find(sum(AllCombinations,2) == CurrentModality);
WellLikelihood = PosteriorStorage{1,CurrentWellCounter};
TrueIndex = CurrentClusterID;

YData = zeros(size(XTowards,2),size(CurrentRows,1));

for CurrentType = 1:size(CurrentRows,1)
    
    XV = WellLikelihood{CurrentRows(CurrentType,1),1};
    
    IntermediateStorage = zeros(size(XTowards,2),18);
    
    for CurrentClass = 1:18
        
        RestClasses = setdiff(1:18,CurrentClass);
        
        diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2)),XV(:,RestClasses(3)),XV(:,RestClasses(4)),XV(:,RestClasses(5)),XV(:,RestClasses(6)),XV(:,RestClasses(7)),XV(:,RestClasses(8)),XV(:,RestClasses(9))...
            ,XV(:,RestClasses(10)),XV(:,RestClasses(11)),XV(:,RestClasses(12)),XV(:,RestClasses(13)),XV(:,RestClasses(14)),XV(:,RestClasses(15)),XV(:,RestClasses(16)),XV(:,RestClasses(17))],[],2);
        
        % Relabel...
        
        Label = cell(size(TrueIndex,1),1);
        
        NewLabel = {'1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18'};
        
        for CurrentLabel = 1:18
            LabelLocation = find(TrueIndex == CurrentLabel);
            for CurrentLocation = LabelLocation'
                Label{CurrentLocation} = NewLabel{CurrentLabel};
            end
        end
        
        [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass),'XCrit','reca','YCrit','prec');
        
        ClosestX = knnsearch(X,XTowards','K',1);
        YLinked = Y(ClosestX,:);
        
        IntermediateStorage(:,CurrentClass) = YLinked;
             
    end
    
    YData(:,CurrentType) = mean(IntermediateStorage,2);

end

    plot(XTowards,nanmean(YData,2),'Color',CustomColor(CurrentModality,:));
    

end

ylabel('Precision')
xlabel('Recall')
axis square
title(['PR Curve - ',ConcentrationString{1,CurrentWellCounter}]);
legend({'1','2','3','4','5','6','7','8','9','10'},'Location','northeast')
ylim([0 0.6])


end















