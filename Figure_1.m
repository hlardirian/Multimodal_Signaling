%% load data 
%load('C:\Paper_Data\WorkingData_7_2.mat');
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Functions\umapFileExchange (1.2.1)\umap\umap.jar');

%% Data description

% LinearIndex: Indicator to which condition each cell (i.e. row) belongs; Individual numbers denote replicates %
% 1,2,3,11,21,22,23,24,25,26,27,28,29,30 - 100ng/ml EGF
% 4,5,6 - 25ng/ml EGF
% 7,8,9 - 10ng/ml EGF
% 10,19,20 - 6.25ng/ml EGF
% 16,17,18 - 1ng/ml EGF
% 13,14,15 - 0ng/ml EGF
% 11,12,21,22,23,24,25,26,27,28,29,30 - 100ng/ml control for intensity decay and secondary antibody only controls after elution (see Gut et al. for details): 12: Cycle 01, 11: Cycle 02, 21: Cycle 03, 22: Cycle 04 etc... 30 always secondary only. Starting at 12... etc again when 29 was reached

% FeatureHeader: Descriptor of which cellular state feature (column) is represented in the corresponding double matrices %
% FeatureData: Contains raw (and transformed, see material and methods) single cell cellular state feature data; columns correspoding to cellular state features described in "FeatureHeader" %
% FeatureZData: Contains the z-scored (see material and methods) single cell cellular state feature data; columns corresponding to cellular state features described in "FeatureHeader" %

% MetaHeader: Descriptor of which MetaData (e.g. CentroidLocation in image, or which field in an image) is represented in the corresponding double matrices %
% MetaData: Contains single cell information on the Metadata; columns corresponding to information described in "MetaHeader"

% ResponseHeader: Descriptor of which response (column) is represented in the corresponding double matrices %
% ResponseData: Contains raw single cell data; columns corresponding to response features described in "ResponseHeader" %
% LogResponseData: Contains transformed (see material and methods) single cell data; columns corresponding to response features described in "ResponseHeader" %

% PCCoeff: Contains the loadings of each principal component from principal component analysis on cellular state features (FeatureZData)
% PCFeatureData: Contains single cell data of cellular state features (from FeatureZData) transformed to PCs). Only the PCs which together explain 97.5% of the variance are kept (hence only 157)

% WeightedClusterData: Data from PCFeatureData weighted as described in material and methods and used as input for fuzzy clustering. Columns correspond to the PCs used; further described in script for Figure 3; Only clustered on cells belong to LinearIndex 1,2,3,4,5,6,7,8,9,10,13,14,15 and 20 %
% ClusterCenter: Centroid locations for the individual cluster centers obtained from fuzzy clustering on cellular state features %
% MembershipData: Contains the Membership degree (Fuzzy clustering outputs degrees of membership, no clear assignement) for each single cell)

%% Figure 1A

% Assembled in Adobe Illustrator; ai. can be shared

%% Figure 1B

% Assembled in Adobe Illustrator and with Fiji; ai. can be shared

%% Figure 1C

% Assembled in Adobe Illustrator and with Fiji; ai. and raw images can be shared

%% Figure 1D

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PreData_1.mat')

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

GreenFeatures = {'R08_Actin','R09_EEA1','R10_ERGIC53','R14_Sec13','R15_Dynamin','R16_HSP60','R17_PCNA','R18_BG488','R19_VPS35','R20_Tubulin'};
RedFeatures = {'R03_Paxillin','R05_GM130','R12_Calreticulin','R14_ABCD3','R15_YAP','R16_CyclinB','R18_BG568','R19_pRB','R20_DDX6'};
FarRedFeatures = {'R17_PolII','R18_BG647'};

RawFeatures = FeatureData(:,483:1297);
BackupFeatures = FeatureData(:,483:1297);

RawFeatureHeader = cell(815,1);

InsertIndex = 1;

for CurrentFeature = 483:size(FeatureData,2)
    RawFeatureHeader{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;
    
end

% Green Features

for CurrentFeature = 1:size(GreenFeatures,2)
    CurrentString = GreenFeatures{1,CurrentFeature};
    StainString = find(contains(RawFeatureHeader,CurrentString));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectStringFeature = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawFeatures(:,IntersectStringFeature);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG488'));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    
    IntersectString = intersect(StainString,IntensityString);
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawFeatures(:,IntersectStringFeature) = CorrectedData;
    
end

% Red Features

for CurrentFeature = 1:size(RedFeatures,2)
    CurrentString = RedFeatures{1,CurrentFeature};
    StainString = find(contains(RawFeatureHeader,CurrentString));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectStringFeature = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawFeatures(:,IntersectStringFeature);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG568'));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectString = intersect(StainString,IntensityString);
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawFeatures(:,IntersectStringFeature) = CorrectedData;
    
end

% FarRed Features

for CurrentFeature = 1:size(FarRedFeatures,2)
    CurrentString = FarRedFeatures{1,CurrentFeature};
    StainString = find(contains(RawFeatureHeader,CurrentString));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectString = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawFeatures(:,IntersectString);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG647'));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectString = intersect(StainString,IntensityString);
    
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawFeatures(:,IntersectString) = CorrectedData;
    
end



GreenFeatures = {'R01_pERK','R02_pAKT','R03_FoxO3a','R04_pS6','R05_pMTOR','R06_pRSK','R07_pERK','R12_pS6K','R13_pERK'};
RedFeatures = {'R01_pEGFR','R02_pFAK','R04_FoxO1','R08_pGSK3B','R09_pMEK','R10_pPI3K'};

RawResponseData = ResponseData(:,:);

% Cytoplasm

% Green Features

for CurrentFeature = 1:size(GreenFeatures,2)
    CurrentString = GreenFeatures{1,CurrentFeature};
    StainString = find(contains(ResponseHeader,CurrentString));
    IntensityString = find(contains(ResponseHeader,'Cytoplasm_Intensity_mean'));
    IntersectStringResponse = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawResponseData(:,IntersectStringResponse);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG488'));
    IntensityString = find(contains(RawFeatureHeader,'Cytoplasm_Intensity_mean'));
    IntersectString = intersect(StainString,IntensityString);
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*1;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawResponseData(:,IntersectStringResponse) = CorrectedData;
    
end

% Red Features

for CurrentFeature = 1:size(RedFeatures,2)
    CurrentString = RedFeatures{1,CurrentFeature};
    StainString = find(contains(ResponseHeader,CurrentString));
    IntensityString = find(contains(ResponseHeader,'Cytoplasm_Intensity_mean'));
    IntersectStringResponse = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawResponseData(:,IntersectStringResponse);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG568'));
    IntensityString = find(contains(RawFeatureHeader,'Cytoplasm_Intensity_mean'));
    IntersectString = intersect(StainString,IntensityString);
    
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*1;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawResponseData(:,IntersectStringResponse) = CorrectedData;
end

% Nucleus

% Green Features

for CurrentFeature = 1:size(GreenFeatures,2)
    CurrentString = GreenFeatures{1,CurrentFeature};
    StainString = find(contains(ResponseHeader,CurrentString));
    IntensityString = find(contains(ResponseHeader,'Nucleus_Intensity_mean'));
    IntersectStringResponse = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawResponseData(:,IntersectStringResponse);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG488'));
    IntensityString = find(contains(RawFeatureHeader,'Nucleus_Intensity_mean'));
    IntersectString = intersect(StainString,IntensityString);
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*1;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawResponseData(:,IntersectStringResponse) = CorrectedData;
    
end

% Red Features

for CurrentFeature = 1:size(RedFeatures,2)
    CurrentString = RedFeatures{1,CurrentFeature};
    StainString = find(contains(ResponseHeader,CurrentString));
    IntensityString = find(contains(ResponseHeader,'Nucleus_Intensity_mean'));
    IntersectStringResponse = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawResponseData(:,IntersectStringResponse);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG568'));
    IntensityString = find(contains(RawFeatureHeader,'Nucleus_Intensity_mean'));
    IntersectString = intersect(StainString,IntensityString);
    
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*1;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawResponseData(:,IntersectStringResponse) = CorrectedData;
end

Eval = [0:0.05:12];
WellGroups = {[13,14,15],[10,19,20],[7,8,9],[4,5,6],[1,2,3]};

% pS6

figure
hold on
for CurrentWell = 1:size(WellGroups,2)
    WellIndex = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    WellResponseData = LogResponseData(WellIndex,78);
    DensityData = ksdensity(WellResponseData,Eval);
    plot(Eval,DensityData);
    
end

xlim([0 9])
legend('0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml');
xlabel('log2 signal (a.u.)')
ylabel('density')
title('pS6')

% pERK

figure
hold on
for CurrentWell = 1:size(WellGroups,2)
    WellIndex = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    WellResponseData = LogResponseData(WellIndex,3);
    DensityData = ksdensity(WellResponseData,Eval);
    plot(Eval,DensityData);
    
end

xlim([0 12])
legend('0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml');
xlabel('log2 signal (a.u.)')
ylabel('density')
title('pERK')

% FoxO3a

figure
hold on
for CurrentWell = 1:size(WellGroups,2)
    WellIndex = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    WellResponseData = LogResponseData(WellIndex,61);
    DensityData = ksdensity(WellResponseData,Eval);
    plot(Eval,DensityData);
    
end

xlim([4 10])
legend('0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml');
xlabel('log2 signal (a.u.)')
ylabel('density')
title('FoxO3a')


% HSP60

figure
hold on
for CurrentWell = 1:size(WellGroups,2)
    WellIndex = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    WellResponseData = log2(RawFeatures(WellIndex,136));
    DensityData = ksdensity(WellResponseData,Eval);
    plot(Eval,DensityData);
    
end

xlim([6.5 10.5])
legend('0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml');
xlabel('log2 signal (a.u.)')
ylabel('density')
title('HSP60')

% Sec13

figure
hold on
for CurrentWell = 1:size(WellGroups,2)
    WellIndex = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    WellResponseData = log2(RawFeatures(WellIndex,120));
    DensityData = ksdensity(WellResponseData,Eval);
    plot(Eval,DensityData);
    
end

xlim([7 10.5])
legend('0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml');
xlabel('log2 signal (a.u.)')
ylabel('density')
title('Sec13')

% Yap1

figure
hold on
for CurrentWell = 1:size(WellGroups,2)
    WellIndex = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    WellResponseData = log2(RawFeatures(WellIndex,130));
    DensityData = ksdensity(WellResponseData,Eval);
    plot(Eval,DensityData);
    
end

xlim([6.3 9.3])
legend('0ng/ml','6.25ng/ml','10ng/ml','25ng/ml','100ng/ml');
xlabel('log2 signal (a.u.)')
ylabel('density')
title('Yap1')



%% Figure 1E

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

GreenFeatures = {'R08_Actin','R09_EEA1','R10_ERGIC53','R14_Sec13','R15_Dynamin','R16_HSP60','R17_PCNA','R18_BG488','R19_VPS35','R20_Tubulin'};
RedFeatures = {'R03_Paxillin','R05_GM130','R12_Calreticulin','R14_ABCD3','R15_YAP','R16_CyclinB','R18_BG568','R19_pRB','R20_DDX6'};
FarRedFeatures = {'R17_PolII','R18_BG647'};

RawFeatures = FeatureData(:,483:1297);
BackupFeatures = FeatureData(:,483:1297);

RawFeatureHeader = cell(815,1);

InsertIndex = 1;

for CurrentFeature = 483:size(FeatureData,2)
    RawFeatureHeader{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;
    
end

% Green Features

for CurrentFeature = 1:size(GreenFeatures,2)
    CurrentString = GreenFeatures{1,CurrentFeature};
    StainString = find(contains(RawFeatureHeader,CurrentString));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectStringFeature = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawFeatures(:,IntersectStringFeature);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG488'));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    
    IntersectString = intersect(StainString,IntensityString);
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawFeatures(:,IntersectStringFeature) = CorrectedData;
    
end

% Red Features

for CurrentFeature = 1:size(RedFeatures,2)
    CurrentString = RedFeatures{1,CurrentFeature};
    StainString = find(contains(RawFeatureHeader,CurrentString));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectStringFeature = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawFeatures(:,IntersectStringFeature);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG568'));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectString = intersect(StainString,IntensityString);
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawFeatures(:,IntersectStringFeature) = CorrectedData;
    
end

% FarRed Features

for CurrentFeature = 1:size(FarRedFeatures,2)
    CurrentString = FarRedFeatures{1,CurrentFeature};
    StainString = find(contains(RawFeatureHeader,CurrentString));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectString = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawFeatures(:,IntersectString);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG647'));
    IntensityString = find(contains(RawFeatureHeader,'Intensity'));
    IntersectString = intersect(StainString,IntensityString);
    
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawFeatures(:,IntersectString) = CorrectedData;
    
end



GreenFeatures = {'R01_pERK','R02_pAKT','R03_FoxO3a','R04_pS6','R05_pMTOR','R06_pRSK','R07_pERK','R12_pS6K','R13_pERK'};
RedFeatures = {'R01_pEGFR','R02_pFAK','R04_FoxO1','R08_pGSK3B','R09_pMEK','R10_pPI3K'};

RawResponseData = ResponseData(:,:);

% Cytoplasm

% Green Features

for CurrentFeature = 1:size(GreenFeatures,2)
    CurrentString = GreenFeatures{1,CurrentFeature};
    StainString = find(contains(ResponseHeader,CurrentString));
    IntensityString = find(contains(ResponseHeader,'Cytoplasm_Intensity_mean'));
    IntersectStringResponse = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawResponseData(:,IntersectStringResponse);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG488'));
    IntensityString = find(contains(RawFeatureHeader,'Cytoplasm_Intensity_mean'));
    IntersectString = intersect(StainString,IntensityString);
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawResponseData(:,IntersectStringResponse) = CorrectedData;
    
end

% Red Features

for CurrentFeature = 1:size(RedFeatures,2)
    CurrentString = RedFeatures{1,CurrentFeature};
    StainString = find(contains(ResponseHeader,CurrentString));
    IntensityString = find(contains(ResponseHeader,'Cytoplasm_Intensity_mean'));
    IntersectStringResponse = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawResponseData(:,IntersectStringResponse);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG568'));
    IntensityString = find(contains(RawFeatureHeader,'Cytoplasm_Intensity_mean'));
    IntersectString = intersect(StainString,IntensityString);
    
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawResponseData(:,IntersectStringResponse) = CorrectedData;
end

% Nucleus

% Green Features

for CurrentFeature = 1:size(GreenFeatures,2)
    CurrentString = GreenFeatures{1,CurrentFeature};
    StainString = find(contains(ResponseHeader,CurrentString));
    IntensityString = find(contains(ResponseHeader,'Nucleus_Intensity_mean'));
    IntersectStringResponse = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawResponseData(:,IntersectStringResponse);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG488'));
    IntensityString = find(contains(RawFeatureHeader,'Nucleus_Intensity_mean'));
    IntersectString = intersect(StainString,IntensityString);
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawResponseData(:,IntersectStringResponse) = CorrectedData;
    
end

% Red Features

for CurrentFeature = 1:size(RedFeatures,2)
    CurrentString = RedFeatures{1,CurrentFeature};
    StainString = find(contains(ResponseHeader,CurrentString));
    IntensityString = find(contains(ResponseHeader,'Nucleus_Intensity_mean'));
    IntersectStringResponse = intersect(StainString,IntensityString);
    % Get CurrentData
    CurrentData = RawResponseData(:,IntersectStringResponse);
    % Get BackgroundSignal
    StainString = find(contains(RawFeatureHeader,'R18_BG568'));
    IntensityString = find(contains(RawFeatureHeader,'Nucleus_Intensity_mean'));
    IntersectString = intersect(StainString,IntensityString);
    
    BackgroundIntersect = intersect(StainString,IntensityString);
    BackgroundData = RawFeatures(:,BackgroundIntersect).*0.65;
    CorrectedData = CurrentData - BackgroundData;
    CorrectedData(CorrectedData <= 0) = 1;
    RawResponseData(:,IntersectStringResponse) = CorrectedData;
end

% Feature Independence on BG corrected Data


MaxEGF = [12,11,21,22,23,24,25,26,27,28,29];
ZeroEGF = [13,14,15];

RoundStringOne = {'R01','R02','R03','R04','R05','R06','R07','R08','R09','R10'};
RoundStringTwo = {'R11','R12','R13','R14','R15','R16','R17','R18','R19','R20'};


Indicator = zeros(815,1);


StorageFoldChange = zeros(815,1);
StoragePValue = zeros(815,1);
GroupIndexStorage = zeros(815,1);

ReducedFeatureHeader = cell(815,1);

InsertIndex = 1;

for CurrentFeature = 483:size(FeatureData,2)
    ReducedFeatureHeader{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;
end

InsertIndex = 1;

for CurrentFeature = 1:size(RawFeatures,2)
    
    CurrentFeatureName = ReducedFeatureHeader{CurrentFeature,1};
    
    StorageIndicator = zeros(10,2);
    
    for CurrentCycle = 1:10
        StorageIndicator(CurrentCycle,1) = contains(CurrentFeatureName,RoundStringOne{1,CurrentCycle});
        StorageIndicator(CurrentCycle,2) = contains(CurrentFeatureName,RoundStringTwo{1,CurrentCycle});
    end
    
    CycleIndicator = find(sum(StorageIndicator,2));
    
    CurrentMaxEGF = MaxEGF;
    CurrentMaxEGF(CycleIndicator) = [];
    
    MeanDataMax = zeros(size(CurrentMaxEGF,2),1);
    for CurrentWell = 1:size(CurrentMaxEGF,2)
        WellIndex = find(ismember(LinearIndex,CurrentMaxEGF(CurrentWell)));
        MeanDataMax(CurrentWell,1) = median(RawFeatures(WellIndex,CurrentFeature));       
    end
      
    
    MeanDataZero = zeros(3,1);
    for CurrentWell = 1:size(ZeroEGF,2)
        WellIndex = find(ismember(LinearIndex,ZeroEGF(CurrentWell)));
        MeanDataZero(CurrentWell,1) = median(RawFeatures(WellIndex,CurrentFeature));        
    end
    
    LogFoldChange = log2(mean(MeanDataMax)./mean(MeanDataZero));
    
    % NormalityTest
    

        
    [~,p] = ttest2(MeanDataZero,MeanDataMax);
    
    TestGroup = [MeanDataZero;MeanDataMax];
    GroupIndex = [ones(3,1);ones(size(MeanDataMax,1),1)*2];
    


    StorageFoldChange(InsertIndex,1) = LogFoldChange;
    StoragePValue(InsertIndex,1) = log10(p)*-1;
    
    InsertIndex = InsertIndex + 1;
      
end

GroupIndexStorage(1:480,:) = 1;
GroupIndexStorage(481:805,:) = 2;
GroupIndexStorage(806:815) = 3;

AboveP = find(StoragePValue > 3);
AboveF = find(abs(StorageFoldChange) > 1);
AboveP = unique([AboveP;AboveF]);
BelowP = setdiff(1:815,AboveP);


% Plot relevant signaling stains
figure
hold on


RandomShuffle = randperm(size(AboveP,1));
GroupAbove = GroupIndexStorage(AboveP);
FoldAbove = StorageFoldChange(AboveP);
PAbove = StoragePValue(AboveP);
scatter(FoldAbove(RandomShuffle),PAbove(RandomShuffle),30,GroupAbove(RandomShuffle),'v','filled')

RandomShuffle = randperm(size(BelowP,2));
GroupBelow = GroupIndexStorage(BelowP);
FoldBelow = StorageFoldChange(BelowP);
PBelow = StoragePValue(BelowP);

scatter(FoldBelow(RandomShuffle),PBelow(RandomShuffle),30,GroupBelow(RandomShuffle),'o','filled')
scatter(StorageFoldChange(806:815,:),StoragePValue(806:815),30,'filled','MarkerFaceColor','r')


line([-1 -1],[0 16.5]);
line([1 1],[0 16.5]);

line([-4 8],[3 3]);
axis square


ReducedFeatureHeader = cell(815,1);

InsertIndex = 1;

for CurrentFeature = 483:size(FeatureData,2)
    ReducedFeatureHeader{InsertIndex,1} = FeatureHeader{CurrentFeature,1};
    InsertIndex = InsertIndex + 1;
end



MaxEGF = [12,11,21,22,23,24,25,26,27,28,29];
ZeroEGF = [13,14,15];

InsertIndex = 1;

StorageFoldChange = zeros(10,1);
StoragePValue = zeros(10,1);
GroupIndexStorage = zeros(10,1);

for CurrentFeature = [19,168,3,123,153,108,33,91,61,78]
    
    CurrentFeatureName = ResponseHeader{CurrentFeature,1};
    
    StorageIndicator = zeros(10,2);
    
    for CurrentCycle = 1:10
        StorageIndicator(CurrentCycle,1) = contains(CurrentFeatureName,RoundStringOne{1,CurrentCycle});
        StorageIndicator(CurrentCycle,2) = contains(CurrentFeatureName,RoundStringTwo{1,CurrentCycle});
    end
    
    CycleIndicator = find(sum(StorageIndicator,2));
    
    CurrentMaxEGF = MaxEGF;
    CurrentMaxEGF(CycleIndicator) = [];
    
    MeanDataMax = zeros(size(CurrentMaxEGF,2),1);
    for CurrentWell = 1:size(CurrentMaxEGF,2)
        WellIndex = find(ismember(LinearIndex,CurrentMaxEGF(CurrentWell)));
        MeanDataMax(CurrentWell,1) = median(RawResponseData(WellIndex,CurrentFeature));       
    end
    
   
    
    MeanDataZero = zeros(3,1);
    for CurrentWell = 1:size(ZeroEGF,2)
        WellIndex = find(ismember(LinearIndex,ZeroEGF(CurrentWell)));
        MeanDataZero(CurrentWell,1) = median(RawResponseData(WellIndex,CurrentFeature));
    end
    
    LogFoldChange = log2(mean(MeanDataMax)./mean(MeanDataZero));
    
    % NormalityTest
    

        
    [~,p] = ttest2(MeanDataZero,MeanDataMax);
    
    TestGroup = [MeanDataZero;MeanDataMax];
    GroupIndex = [ones(3,1);ones(size(MeanDataMax,1),1)*2];
    


    StorageFoldChange(InsertIndex,1) = LogFoldChange;
    StoragePValue(InsertIndex,1) = log10(p)*-1;
    
    InsertIndex = InsertIndex + 1;
end

scatter(StorageFoldChange,StoragePValue,30,'filled','MarkerFaceColor','k')

axis square
xlim([-4 8])
ylim([0 16.5])



%% Figure 1F

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

% clear all
% 
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')


% Generate UMAP - CAVEAT!!!!! EVERY UMAP RUN CAN DIFFER
WellIndex = find(ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,19,20,13,14,15]));
% NumberNeighbors = 30;
% DistanceMetric = 'cityblock';
% [ReductionUmap,UMAPCoord] = run_umap(PCFeatureData(WellIndex,:),'n_neighbors',NumberNeighbors,'metric',DistanceMetric);
ReducedLinearIndex = LinearIndex(WellIndex);


ReducedWellIndex = find(ismember(ReducedLinearIndex,[1,2,3,4,5,6,7,8,9,10,19,20,13,14,15]));
NewLinearIndex = ReducedLinearIndex(ReducedWellIndex,:);
DoseLinearIndex = ReducedLinearIndex(ReducedWellIndex,:);
DoseLinearIndex(NewLinearIndex == 1) = 1;
DoseLinearIndex(NewLinearIndex == 2) = 1;
DoseLinearIndex(NewLinearIndex == 3) = 1;
DoseLinearIndex(NewLinearIndex == 4) = 2;
DoseLinearIndex(NewLinearIndex == 5) = 2;
DoseLinearIndex(NewLinearIndex == 6) = 2;
DoseLinearIndex(NewLinearIndex == 7) = 3;
DoseLinearIndex(NewLinearIndex == 8) = 3;
DoseLinearIndex(NewLinearIndex == 9) = 3;
DoseLinearIndex(NewLinearIndex == 10) = 4;
DoseLinearIndex(NewLinearIndex == 19) = 4;
DoseLinearIndex(NewLinearIndex == 20) = 4;
DoseLinearIndex(NewLinearIndex == 13) = 5;
DoseLinearIndex(NewLinearIndex == 14) = 5;
DoseLinearIndex(NewLinearIndex == 15) = 5;

RandShuffle = randperm(length(DoseLinearIndex));

ColorMap = [hex2rgb('984EA3');hex2rgb('E41A1C');hex2rgb('FF7F00');hex2rgb('4DAF4A');hex2rgb('377EB8')];

% Dose Mixing

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,DoseLinearIndex(RandShuffle),'filled','MarkerEdgeColor','none');
colormap(ColorMap)
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])

% Multicellular scale

% LCD

CurrentFeature = 1293;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])

% Isolated Location

CurrentFeature = 1298;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])



% Num Neighbors

CurrentFeature = 1291;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])


% Population Density

CurrentFeature = 1294;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])


% Cellular Scale

% DAPI

CurrentFeature = 299;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])



% HSP60

CurrentFeature = 125;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])



% Sec13

CurrentFeature = 111;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])



% Yap1

CurrentFeature = 121;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])


% Subcellular scale

% Texture PCNA

CurrentFeature = 1275;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])


% Texture EEA1

CurrentFeature = 1281;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])


% Texture Calreticulin

CurrentFeature = 1283;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])


% Texture GM130

CurrentFeature = 1279;

figure
scatter(ReductionUmap(ReducedWellIndex(RandShuffle),1),ReductionUmap(ReducedWellIndex(RandShuffle),2),4,FeatureZData(RandShuffle,CurrentFeature),'filled','MarkerEdgeColor','none');
%colorbar
caxis([-2 2])
colormap(flipud(brewermap(500,'RdBu')));
axis off
ylim([-4.3 6.8])
xlim([-7.5 10.5])


