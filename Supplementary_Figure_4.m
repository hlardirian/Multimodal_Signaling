%% load data 
% Adjust path to wherever data and function folder is located
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Functions\umapFileExchange (1.2.1)\umap\umap.jar');
load('Z:\bkramer\190218_184A1_EGF\Processed_Data\gistColorMap.mat');

%% Data description

% LinearIndex: Indicator to which condition each cell (i.e. row) belongs; Individual numbers denote replicates %
% 1,2,3,11,21,22,23,24,25,26,27,28,29,30 - 100ng/ml EGF
% 4,5,6 - 25ng/ml EGF
% 7,8,9 - 10ng/ml EGF
% 10,19,20 - 6.25ng/ml EGF
% 16,17,18 - 1ng/ml EGF
% 13,14,15 - 0ng/ml EGF
% 11,12,21,22,23,24,25,26,27,28,29,30 - 100ng/ml control for intensity decay and secondary antibody only controls after elution (see Gut et al. for details): 11: Cycle 1, 12: Cycle 2 etc... 30 always secondary only. Starting at 11... etc again when 29 was reached

% FeatureHeader: Descriptor of which cellular state feature (column) is represented in the corresponding double matrices %
% FeatureData: Contains raw (and transformed, see material and methods) single cell cellular state feature data; columns correspoding to cellular state features described in "FeatureHeader" %
% FeatureZData: Contains the z-scored (see material and methods) single cell cellular state feature data; columns corresponding to cellular state features described in "FeatureHeader" %

% MetaHeader: Descriptor of which MetaData (e.g. CentroidLocation in image, or which field in an image) is represented in the corresponding double matrices %
% MetaData: Contains single cell information on the Metadata; columns corresponding to information described in "MetaHeader"

% ResponseHeader: Descriptor of which response (column) is represented in the corresponding double matrices %
% ResponseData: Contains raw single cell data; columns corresponding to response features described in "ResponseHeader" %
% LogResponseData: Contains transformed (see material and methods) single cell data; columns corresponding to response features described in "ResponseHeader" %

% PCCoeff: Contains the loadings of each principal component from principal component analysis on cellular state features (FeatureZData)
% PCFeatureData: Contains single cell data of cellular state features (from FeatureZData) transformed to PCs). Only the PCs which together explain 97.5% of the variance are kept (hence only 157)

% MSTData: Relic from the past; not used in the paper %
% MSTHeader: Relic from the past; not used in the paper %

% WeightedClusterData: Data from PCFeatureData weighted as described in material and methods and used as input for fuzzy clustering. Columns correspond to the PCs used; further described in script for Figure 3; Only clustered on cells belong to LinearIndex 1,2,3,4,5,6,7,8,9,10,13,14,15 and 20 %
% ClusterCentor: Centroid locations for the individual cluster centers obtained from fuzzy clustering on cellular state features %
% MembershipData: Contains the Membership degree (Fuzzy clustering outputs degrees of membership, no clear assignement) for each single cell)





%% Supplementary Figure 4A

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

% Generate UMAP - CAVEAT!!!!! EVERY UMAP RUN CAN DIFFER
WellIndex = find(ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,19,20,13,14,15]));
ReducedLinearIndex = LinearIndex(WellIndex);
ReducedResponseData = LogResponseData(WellIndex,:);
ReducedFeatureData = PCFeatureData(WellIndex,:);
CurrentResponseVector = [18,168,123,153,108,33,91];
NameCell = {'pEGFR','pMEK','pRSK','pGSK3b','pMTOR','pAKT','FoxO1'};

WellGroups = {[1,2,3],[4,5,6],[7,8,9],[10,19,20],[13,14,15]};
ConcentrationString = {'100ng','25ng','10ng','6.25ng','0ng'};
for CurrentResponseIndex = 1:7
    CurrentResponse = CurrentResponseVector(CurrentResponseIndex);
    for CurrentGroup = 1%1:5
        % Plot Measured
        CurrentWells = WellGroups{1,CurrentGroup};
        CurrentWellIndex = find(ismember(ReducedLinearIndex,CurrentWells));
        
        CellResponseData = zscore(ReducedResponseData(CurrentWellIndex,CurrentResponse));
        figure
        scatter(ReductionUmap(CurrentWellIndex,1),ReductionUmap(CurrentWellIndex,2),4,CellResponseData,'filled');
        caxis([-2 2])
        colormap(flipud(brewermap(500,'PiYG')))
        ylim([-5 7])
        xlim([-8 10])
        set(gcf,'position',[3.221800000000000e+03 -3.734000000000000e+02 600 528])
        axis off
        
        
        set(gcf,'position',[3.221800000000000e+03 -3.734000000000000e+02 600 528])
        axis on
        colorbar

        

        StoragePrediction = [];
        
        % Predict Replicate one
        TrueWell = CurrentWells(1);
        IndWell = CurrentWells(2:3);
        
        WellIndexTrue = find(ismember(ReducedLinearIndex,TrueWell));
        WellIndexInd = find(ismember(ReducedLinearIndex,IndWell));
        
        TrueResponseData = zscore(ReducedResponseData(WellIndexTrue,CurrentResponse));
        IndResponseData = zscore(ReducedResponseData(WellIndexInd,CurrentResponse));
        
        TrueFeatureData = ReducedFeatureData(WellIndexTrue,:);
        IndFeatureData = ReducedFeatureData(WellIndexInd,:);
        
        MDL = cvglmnet(IndFeatureData,IndResponseData);
        Prediction = cvglmnetPredict(MDL,TrueFeatureData);
        
        CurrentNormData = Prediction;

        Iterations = 20;
        
        for CurrentIteration = 1:Iterations
            NormedData = quantilenorm([TrueResponseData,CurrentNormData]);
            CurrentNormData = NormedData(:,2);
        end
        
        StoragePrediction = [StoragePrediction;CurrentNormData];
        
        % Predict Replicate two
        TrueWell = CurrentWells(2);
        IndWell = CurrentWells([1,3]);
        
        WellIndexTrue = find(ismember(ReducedLinearIndex,TrueWell));
        WellIndexInd = find(ismember(ReducedLinearIndex,IndWell));
        
        TrueResponseData = zscore(ReducedResponseData(WellIndexTrue,CurrentResponse));
        IndResponseData = zscore(ReducedResponseData(WellIndexInd,CurrentResponse));
        
        TrueFeatureData = ReducedFeatureData(WellIndexTrue,:);
        IndFeatureData = ReducedFeatureData(WellIndexInd,:);
        
        MDL = cvglmnet(IndFeatureData,IndResponseData);
        Prediction = cvglmnetPredict(MDL,TrueFeatureData);
        
        CurrentNormData = Prediction;

        Iterations = 20;
        
        for CurrentIteration = 1:Iterations
            NormedData = quantilenorm([TrueResponseData,CurrentNormData]);
            CurrentNormData = NormedData(:,2);
        end
        
        StoragePrediction = [StoragePrediction;CurrentNormData];
        
        % Predict Replicate three
        TrueWell = CurrentWells(3);
        IndWell = CurrentWells(1:2);
        
        WellIndexTrue = find(ismember(ReducedLinearIndex,TrueWell));
        WellIndexInd = find(ismember(ReducedLinearIndex,IndWell));
        
        TrueResponseData = zscore(ReducedResponseData(WellIndexTrue,CurrentResponse));
        IndResponseData = zscore(ReducedResponseData(WellIndexInd,CurrentResponse));
        
        TrueFeatureData = ReducedFeatureData(WellIndexTrue,:);
        IndFeatureData = ReducedFeatureData(WellIndexInd,:);
        
        MDL = cvglmnet(IndFeatureData,IndResponseData);
        Prediction = cvglmnetPredict(MDL,TrueFeatureData);
        
        CurrentNormData = Prediction;

        Iterations = 20;
        
        for CurrentIteration = 1:Iterations
            NormedData = quantilenorm([TrueResponseData,CurrentNormData]);
            CurrentNormData = NormedData(:,2);
        end
        
        StoragePrediction = [StoragePrediction;CurrentNormData];
        
        figure
        scatter(ReductionUmap(CurrentWellIndex,1),ReductionUmap(CurrentWellIndex,2),4,StoragePrediction,'filled');
        caxis([-2 2])
        colormap(flipud(brewermap(500,'PiYG')))      
        
        ylim([-5 7])
        xlim([-8 10])
        set(gcf,'position',[3.221800000000000e+03 -3.734000000000000e+02 600 528])
        axis off
        
        
        set(gcf,'position',[3.221800000000000e+03 -3.734000000000000e+02 600 528])
        axis on
        colorbar

                        
        colorbar
        
        % Calculation of RSquared - Depends on the way it's calculated and the crossevaluation set(varies by about ~0.03 for each stain); here we use the most "canonical" definition
        CurrentWellIndex = find(ismember(LinearIndex,CurrentWells));
        CellFeatureData = PCFeatureData(CurrentWellIndex,:);
        CellResponseData = zscore(LogResponseData(CurrentWellIndex,CurrentResponse));
        MDL = cvglmnet(CellFeatureData,CellResponseData);
        Prediction = cvglmnetPredict(MDL,CellFeatureData);
        
        SSTotal = sum((CellResponseData - mean(CellResponseData)).^2);
        Residuals = CellResponseData - Prediction;
        SSResidual = sum(Residuals.^2);
        RSquared = 1 - SSResidual/SSTotal
        
    end
end

%% Supplementary Figure 4B

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

%%%  Do Dominance Analysis - Running it will consume substantial amount of computational time %%%
% Define Scales

% BGIndex = find([contains(FeatureHeader,'BG488');contains(FeatureHeader,'BG568');contains(FeatureHeader,'BG647')]);
% MorphologyIndex = find(contains(FeatureHeader,'Morphology'));
% MorphologyIndex = setdiff(MorphologyIndex,BGIndex);
% 
% IntensityRawIndex = find(contains(FeatureHeader,'Intensity'));
% STDIndex = find(contains(FeatureHeader,'std'));
% IntensityIndex = setdiff(IntensityRawIndex,STDIndex);
% IntensityIndex = setdiff(IntensityIndex,BGIndex);
% 
% TextureIndex = find(contains(FeatureHeader,'Texture'));
% TextureIndex = setdiff(TextureIndex,BGIndex);
% 
% PopulationIndex = [641:650,1291:1300];
% PopulationIndex = setdiff(PopulationIndex,BGIndex);
% 
% CellularIndex = [MorphologyIndex;IntensityIndex];
% 
% 
% PopulationPlotFeatures = [11:20];
% %PopulationPlotFeatures = [11:15];
% CellularPlotFeatures = [1,14,244,150,154,158,161,164,171,174,182,184,188,192,193,206,214,222];
% %CellularPlotFeatures = [1,14,244,150,154];%,158,161,164,171,174,182,184,188,192,193,206,214,222];
% TexturePlotFeatures = [437,438,440,441,442,443,444,445,446,447,448,449,450,451];
% 
% FeatureIndex = [PopulationIndex(PopulationPlotFeatures),CellularIndex(CellularPlotFeatures)',TextureIndex(TexturePlotFeatures)'];
% 
% PlotFeatureHeader = cell(42,1);
% 
% for CurrentFeature = 1:42
%     PlotFeatureHeader{CurrentFeature,1} = FeatureHeader{FeatureIndex(CurrentFeature),1};
% end
% 
% FavoriteStains = [18,168,3,123,153,108,33,61,91,78];
% 
% PopulationFeatures = PopulationIndex(PopulationPlotFeatures);
% CellularFeatures = CellularIndex(CellularPlotFeatures)';
% TextureFeatures = TextureIndex(TexturePlotFeatures)';
% 
% 
% WellGroups = {[1,2,3],[4,5,6],[7,8,9],[10,19,20],[13,14,15]};%{[13,14,15],[10,19,20],[7,8,9],[4,5,6],[3,2,1]};
% 
% for CurrentWell = 1%1:size(WellGroups,2)
%     
%     PopulationImportance = zeros(size(FavoriteStains,2),size(PopulationFeatures,2));
%     CellularImportance = zeros(size(FavoriteStains,2),size(CellularFeatures,2));
%     TextureImportance = zeros(size(FavoriteStains,2),size(TextureFeatures,2));
%     CurrentWells = WellGroups{1,CurrentWell};
%     
%     for CurrentResponse = 1:size(FavoriteStains,2)
%         CurrentStain = FavoriteStains(CurrentResponse);
%         
%         % Dominance analysis for Population Scale
%         
%         CombinationFeatures = logical(ff2n(size(PopulationFeatures,2)));
%         CurrentWellIndex = find(ismember(LinearIndex,CurrentWells));
%         
%         RSquareStorage = zeros(size(CombinationFeatures,1),1);
%         
%         parfor CurrentCombination = 1:size(CombinationFeatures,1)
%             
%             WellFeatureData = FeatureZData(CurrentWellIndex,PopulationFeatures(CombinationFeatures(CurrentCombination,:)));
%             WellResponseData = zscore(LogResponseData(CurrentWellIndex,CurrentStain));
%             MDL = fitlm(WellFeatureData,WellResponseData);
%             %Prediction = cvglmnetPredict(MDL,WellFeatureData);
%             %RSquareStorage(CurrentCombination,1) = corr(Prediction,WellResponseData).^2;
%             RSquareStorage(CurrentCombination,1) = MDL.Rsquared.Ordinary;
%             
%         end
%         
%         % Calculate Deltas..
%         
%         NumberFeatures = fliplr(2:size(PopulationFeatures,2));
%         
%         FeatureContribution = nan(size(RSquareStorage,1),size(PopulationFeatures,2));
%         
%         
%         for CurrentNumber = NumberFeatures
%             
%             AllParentCombinations = find(sum(CombinationFeatures,2) == CurrentNumber);
%             
%             for CurrentParent = 1:size(AllParentCombinations,1)
%                 
%                 ParentCombinations = AllParentCombinations(CurrentParent);
%                 CurrentLogical = CombinationFeatures;
%                 ParentLogical = CombinationFeatures(ParentCombinations,:);
%                 
%                 
%                 % Zero in parent
%                 
%                 [~,ZeroIndex] = find(ParentLogical == 0);
%                 
%                 
%                 RSquareParent = RSquareStorage(ParentCombinations,:);
%                 
%                 ChildrenCombinations = find(sum(CurrentLogical,2) == CurrentNumber-1);
%                 %ChildrenCombinations = intersect(find(sum(CurrentLogical,2) == CurrentNumber-1),find(sum(NewCurrentLogical,2) == CurrentNumber-1));
%                 
%                 
%                 
%                 
%                 ChildrenLogical = CombinationFeatures(ChildrenCombinations,:);
%                 
%                 NewChildrenLogical = ChildrenLogical;
%                 NewChildrenLogical(:,ZeroIndex) = [];
%                 TrueSubset = find(sum(NewChildrenLogical,2) == CurrentNumber-1);
%                 
%                 ChildrenLogical = ChildrenLogical(TrueSubset,:);
%                 
%                 ChildrenCombinationsIndex = ChildrenCombinations(TrueSubset,:);
%                 
%                 RSquareChildren = RSquareStorage(ChildrenCombinationsIndex);
%                 [~,DeltaCombinations] = find((ChildrenLogical - ParentLogical)*-1);
%                 
%                 DeltaRSquare = (RSquareChildren - RSquareParent)*-1;
%                 
%                 Pairs = [ChildrenCombinationsIndex,DeltaCombinations];
%                 LinIdx = sub2ind(size(FeatureContribution),Pairs(:,1),Pairs(:,2));
%                 
%                 FeatureContribution(LinIdx) = DeltaRSquare;
%                 
%             end
%             
%             
%         end
%         
%         OnlyFeature = find(sum(CombinationFeatures,2) == 1);
%         
%         for CurrentOnly = OnlyFeature'
%             FeatureContribution(1,CombinationFeatures(CurrentOnly,:)) = RSquareStorage(CurrentOnly,1);
%         end
%         
%         PopulationImportance(CurrentResponse,:) = mean(FeatureContribution,1,'omitnan');
%         1
%         
%         % Dominance analysis for Cellular scale
%         
%         CombinationFeatures = logical(ff2n(size(CellularFeatures,2)));
%         CurrentWellIndex = find(ismember(LinearIndex,CurrentWells));
%         
%         RSquareStorage = zeros(size(CombinationFeatures,1),1);
%         
%         parfor CurrentCombination = 1:size(CombinationFeatures,1)
%             
%             WellFeatureData = FeatureZData(CurrentWellIndex,CellularFeatures(CombinationFeatures(CurrentCombination,:)));
%             WellResponseData = zscore(LogResponseData(CurrentWellIndex,CurrentStain));
%             MDL = fitlm(WellFeatureData,WellResponseData);
%             %Prediction = cvglmnetPredict(MDL,WellFeatureData);
%             %RSquareStorage(CurrentCombination,1) = corr(Prediction,WellResponseData).^2;
%             RSquareStorage(CurrentCombination,1) = MDL.Rsquared.Ordinary;
%             
%         end
%         
%         % Calculate Deltas..
%         
%         NumberFeatures = fliplr(2:size(CellularFeatures,2));
%         
%         FeatureContribution = nan(size(RSquareStorage,1),size(CellularFeatures,2));
%         
%         
%         for CurrentNumber = NumberFeatures
%             
%             AllParentCombinations = find(sum(CombinationFeatures,2) == CurrentNumber);
%             
%             for CurrentParent = 1:size(AllParentCombinations,1)
%                 
%                 ParentCombinations = AllParentCombinations(CurrentParent);
%                 CurrentLogical = CombinationFeatures;
%                 ParentLogical = CombinationFeatures(ParentCombinations,:);
%                 
%                 
%                 % Zero in parent
%                 
%                 [~,ZeroIndex] = find(ParentLogical == 0);
%                 
%                 
%                 RSquareParent = RSquareStorage(ParentCombinations,:);
%                 
%                 ChildrenCombinations = find(sum(CurrentLogical,2) == CurrentNumber-1);
%                 %ChildrenCombinations = intersect(find(sum(CurrentLogical,2) == CurrentNumber-1),find(sum(NewCurrentLogical,2) == CurrentNumber-1));
%                 
%                 
%                 
%                 
%                 ChildrenLogical = CombinationFeatures(ChildrenCombinations,:);
%                 
%                 NewChildrenLogical = ChildrenLogical;
%                 NewChildrenLogical(:,ZeroIndex) = [];
%                 TrueSubset = find(sum(NewChildrenLogical,2) == CurrentNumber-1);
%                 
%                 ChildrenLogical = ChildrenLogical(TrueSubset,:);
%                 
%                 ChildrenCombinationsIndex = ChildrenCombinations(TrueSubset,:);
%                 
%                 RSquareChildren = RSquareStorage(ChildrenCombinationsIndex);
%                 [~,DeltaCombinations] = find((ChildrenLogical - ParentLogical)*-1);
%                 
%                 DeltaRSquare = (RSquareChildren - RSquareParent)*-1;
%                 
%                 Pairs = [ChildrenCombinationsIndex,DeltaCombinations];
%                 LinIdx = sub2ind(size(FeatureContribution),Pairs(:,1),Pairs(:,2));
%                 
%                 FeatureContribution(LinIdx) = DeltaRSquare;
%                 
%             end
%             
%             
%         end
%         
%         OnlyFeature = find(sum(CombinationFeatures,2) == 1);
%         
%         for CurrentOnly = OnlyFeature'
%             FeatureContribution(1,CombinationFeatures(CurrentOnly,:)) = RSquareStorage(CurrentOnly,1);
%         end
%         
%         CellularImportance(CurrentResponse,:) = mean(FeatureContribution,1,'omitnan');
%         2
%         
%         
%         % Dominance analysis for Texture scale
%         
%         CombinationFeatures = logical(ff2n(size(TextureFeatures,2)));
%         CurrentWellIndex = find(ismember(LinearIndex,CurrentWells));
%         
%         RSquareStorage = zeros(size(CombinationFeatures,1),1);
%         
%         parfor CurrentCombination = 1:size(CombinationFeatures,1)
%             
%             WellFeatureData = FeatureZData(CurrentWellIndex,TextureFeatures(CombinationFeatures(CurrentCombination,:)));
%             WellResponseData = zscore(LogResponseData(CurrentWellIndex,CurrentStain));
%             MDL = fitlm(WellFeatureData,WellResponseData);
%             %Prediction = cvglmnetPredict(MDL,WellFeatureData);
%             %RSquareStorage(CurrentCombination,1) = corr(Prediction,WellResponseData).^2;
%             RSquareStorage(CurrentCombination,1) = MDL.Rsquared.Ordinary;
%             
%         end
%         
%         % Calculate Deltas..
%         
%         NumberFeatures = fliplr(2:size(TextureFeatures,2));
%         
%         FeatureContribution = nan(size(RSquareStorage,1),size(TextureFeatures,2));
%         
%         
%         for CurrentNumber = NumberFeatures
%             
%             AllParentCombinations = find(sum(CombinationFeatures,2) == CurrentNumber);
%             
%             for CurrentParent = 1:size(AllParentCombinations,1)
%                 
%                 ParentCombinations = AllParentCombinations(CurrentParent);
%                 CurrentLogical = CombinationFeatures;
%                 ParentLogical = CombinationFeatures(ParentCombinations,:);
%                 
%                 
%                 % Zero in parent
%                 
%                 [~,ZeroIndex] = find(ParentLogical == 0);
%                 
%                 
%                 RSquareParent = RSquareStorage(ParentCombinations,:);
%                 
%                 ChildrenCombinations = find(sum(CurrentLogical,2) == CurrentNumber-1);
%                 %ChildrenCombinations = intersect(find(sum(CurrentLogical,2) == CurrentNumber-1),find(sum(NewCurrentLogical,2) == CurrentNumber-1));
%                 
%                 
%                 
%                 
%                 ChildrenLogical = CombinationFeatures(ChildrenCombinations,:);
%                 
%                 NewChildrenLogical = ChildrenLogical;
%                 NewChildrenLogical(:,ZeroIndex) = [];
%                 TrueSubset = find(sum(NewChildrenLogical,2) == CurrentNumber-1);
%                 
%                 ChildrenLogical = ChildrenLogical(TrueSubset,:);
%                 
%                 ChildrenCombinationsIndex = ChildrenCombinations(TrueSubset,:);
%                 
%                 RSquareChildren = RSquareStorage(ChildrenCombinationsIndex);
%                 [~,DeltaCombinations] = find((ChildrenLogical - ParentLogical)*-1);
%                 
%                 DeltaRSquare = (RSquareChildren - RSquareParent)*-1;
%                 
%                 Pairs = [ChildrenCombinationsIndex,DeltaCombinations];
%                 LinIdx = sub2ind(size(FeatureContribution),Pairs(:,1),Pairs(:,2));
%                 
%                 FeatureContribution(LinIdx) = DeltaRSquare;
%                 
%             end
%             
%             
%         end
%         
%         OnlyFeature = find(sum(CombinationFeatures,2) == 1);
%         
%         for CurrentOnly = OnlyFeature'
%             FeatureContribution(1,CombinationFeatures(CurrentOnly,:)) = RSquareStorage(CurrentOnly,1);
%         end
%         
%         TextureImportance(CurrentResponse,:) = mean(FeatureContribution,1,'omitnan');
%         3
%         CurrentResponse
%     end
%     
%     
%     CurrentWell
%     
% end

% Feature Importance all together... Population

NormedPopulation = PopulationImportance./max(PopulationImportance,[],2);


PlotMatrix = [flipud(NormedPopulation),zeros(10,1);zeros(1,11)];
figure
pcolor(PlotMatrix)
axis image
caxis([0 1]);
colormap(sqrt(brewermap(500,'reds')))

% Feature Importance all together... Cell

NormedCellular = CellularImportance./max(CellularImportance,[],2);


PlotMatrix = [flipud(NormedCellular),zeros(10,1);zeros(1,19)];
figure
pcolor(PlotMatrix)
axis image
caxis([0 1]);
colormap(sqrt(brewermap(500,'reds')))

% Feature Importance all together... Texture

NormedTexture = TextureImportance./max(TextureImportance,[],2);


PlotMatrix = [flipud(NormedTexture),zeros(10,1);zeros(1,15)];
figure
pcolor(PlotMatrix)
axis image
caxis([0 1]);
colormap(sqrt(brewermap(500,'reds')))



%% Supplementary Figure 4C

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

% Do Minimal modeling 100ng/ml

RSquareAllConcentrations = cell(5,1);

FavoriteStains = [18,168,3,123,153,108,33,91,61,78];

FeatureVector = {[1293,87,95,1278],[1293,101,125,1281],[1293,111,98,1283],[1293,87,14,1278],[1293,87,98,1283],[1293,91,125,1283],[1295,111,125,1286],[1293,1,121,1282],[1293,1,130,1282],[1293,87,95,1283]};

FeatureNames = cell(size(FavoriteStains,2),1);

for CurrentStain = 1:size(FavoriteStains,2)
    CurrentVector = FeatureVector{1,CurrentStain};
    NameStorage = cell(4,1);
    for CurrentFeature = 1:4
        NameStorage{CurrentFeature,1} = FeatureHeader{CurrentVector(CurrentFeature),1};
    end
    FeatureNames{CurrentStain,1} = NameStorage;
end

RSquareStorage = zeros(10,1);
RSquareFullStorage = zeros(10,1);

CurrentWells = [1,2,3];
WellIndex = find(ismember(LinearIndex,CurrentWells));


for CurrentResponseIndex = 1:10
    CurrentResponse = FavoriteStains(CurrentResponseIndex);
    CurrentFeatures = FeatureVector{1,CurrentResponseIndex};

    CurrentResponseData = LogResponseData(WellIndex,CurrentResponse);
    CurrentFeatureData = FeatureZData(WellIndex,CurrentFeatures);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;
    
    RSquareStorage(CurrentResponseIndex,1) = RSquare;


    CurrentFeatureData = PCFeatureData(WellIndex,:);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;

    RSquareFullStorage(CurrentResponseIndex,1) = RSquare;
end

RSquareAllConcentrations{5,1} = [RSquareStorage,RSquareFullStorage];

% Plot as stacked bars

figure

bar([RSquareStorage,[RSquareFullStorage-RSquareStorage]],'stacked')
ylim([0 1])

title('Minimal Modeling Approach - 100ng/ml')
legend('4 Cellular state features','full model')

xticklabels({'pEGFR','pMEK','ERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6'})
ylabel('R2')



% Do Minimal modeling 6.25


FavoriteStains = [18,168,3,123,153,108,33,91,61,78];

FeatureVector = {[1293,119,154,1288],[1292,95,98,1280],[1294,95,98,1280],[1292,95,98,1280],[1296,95,98,1280],[1293,95,98,1280],[1292,95,98,1280],[1293,1,95,1280],[1293,1,299,1282],[1293,95,98,1280]};


FeatureNames = cell(size(FavoriteStains,2),1);

for CurrentStain = 1:size(FavoriteStains,2)
    CurrentVector = FeatureVector{1,CurrentStain};
    NameStorage = cell(4,1);
    for CurrentFeature = 1:4
        NameStorage{CurrentFeature,1} = FeatureHeader{CurrentVector(CurrentFeature),1};
    end
    FeatureNames{CurrentStain,1} = NameStorage;
end

RSquareStorage = zeros(10,1);
RSquareFullStorage = zeros(10,1);

CurrentWells = [19,20,10];
WellIndex = find(ismember(LinearIndex,CurrentWells));


for CurrentResponseIndex = 1:10
    CurrentResponse = FavoriteStains(CurrentResponseIndex);
    CurrentFeatures = FeatureVector{1,CurrentResponseIndex};

    CurrentResponseData = LogResponseData(WellIndex,CurrentResponse);
    CurrentFeatureData = FeatureZData(WellIndex,CurrentFeatures);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;
    
    RSquareStorage(CurrentResponseIndex,1) = RSquare;


    CurrentFeatureData = PCFeatureData(WellIndex,:);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;

    RSquareFullStorage(CurrentResponseIndex,1) = RSquare;
end

RSquareAllConcentrations{2,1} = [RSquareStorage,RSquareFullStorage];

% Plot as stacked bars

figure

bar([RSquareStorage,[RSquareFullStorage-RSquareStorage]],'stacked')
ylim([0 1])

title('Minimal Modeling Approach - 6.25ng/ml')
legend('4 Cellular state features','full model')

xticklabels({'pEGFR','pMEK','ERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6'})
ylabel('R2')


% Original Space

PopulationSpace = 1291:1300;
CellSpace = [1,14,299,87,91,95,98,101,108,111,119,121,125,129,130,146,154,162];
SubSpace = 1275:1289;


% Do Minimal modeling 25


FavoriteStains = [18,168,3,123,153,108,33,91,61,78];



FeatureVector = {[PopulationSpace(3),CellSpace(8),CellSpace(17),SubSpace(13)],[PopulationSpace(3),CellSpace(6),CellSpace(7),SubSpace(6)],[PopulationSpace(3),CellSpace(6),CellSpace(7),SubSpace(6)],[PopulationSpace(5),CellSpace(7),CellSpace(18),SubSpace(6)],[PopulationSpace(3),CellSpace(6),CellSpace(7),SubSpace(6)],...
    [PopulationSpace(3),CellSpace(7),CellSpace(8),SubSpace(8)],[PopulationSpace(5),CellSpace(6),CellSpace(7),SubSpace(6)],[PopulationSpace(3),CellSpace(1),CellSpace(18),SubSpace(14)],[PopulationSpace(3),CellSpace(1),CellSpace(3),SubSpace(14)],[PopulationSpace(3),CellSpace(4),CellSpace(7),SubSpace(8)]};


FeatureNames = cell(size(FavoriteStains,2),1);

for CurrentStain = 1:size(FavoriteStains,2)
    CurrentVector = FeatureVector{1,CurrentStain};
    NameStorage = cell(4,1);
    for CurrentFeature = 1:4
        NameStorage{CurrentFeature,1} = FeatureHeader{CurrentVector(CurrentFeature),1};
    end
    FeatureNames{CurrentStain,1} = NameStorage;
end

RSquareStorage = zeros(10,1);
RSquareFullStorage = zeros(10,1);

CurrentWells = [4,5,6];
WellIndex = find(ismember(LinearIndex,CurrentWells));


for CurrentResponseIndex = 1:10
    CurrentResponse = FavoriteStains(CurrentResponseIndex);
    CurrentFeatures = FeatureVector{1,CurrentResponseIndex};

    CurrentResponseData = LogResponseData(WellIndex,CurrentResponse);
    CurrentFeatureData = FeatureZData(WellIndex,CurrentFeatures);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;
    
    RSquareStorage(CurrentResponseIndex,1) = RSquare;


    CurrentFeatureData = PCFeatureData(WellIndex,:);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;

    RSquareFullStorage(CurrentResponseIndex,1) = RSquare;
end

RSquareAllConcentrations{4,1} = [RSquareStorage,RSquareFullStorage];

% Plot as stacked bars

figure

bar([RSquareStorage,[RSquareFullStorage-RSquareStorage]],'stacked')
ylim([0 1])

title('Minimal Modeling Approach - 25ng/ml')
legend('4 Cellular state features','full model')

xticklabels({'pEGFR','pMEK','ERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6'})
ylabel('R2')





% Do Minimal modeling 10


FavoriteStains = [18,168,3,123,153,108,33,91,61,78];



FeatureVector = {[PopulationSpace(3),CellSpace(11),CellSpace(17),SubSpace(13)],[PopulationSpace(2),CellSpace(6),CellSpace(7),SubSpace(5)],[PopulationSpace(6),CellSpace(6),CellSpace(7),SubSpace(5)],[PopulationSpace(6),CellSpace(6),CellSpace(7),SubSpace(5)],[PopulationSpace(3),CellSpace(6),CellSpace(7),SubSpace(5)],...
    [PopulationSpace(5),CellSpace(6),CellSpace(7),SubSpace(6)],[PopulationSpace(5),CellSpace(6),CellSpace(7),SubSpace(5)],[PopulationSpace(3),CellSpace(1),CellSpace(7),SubSpace(5)],[PopulationSpace(3),CellSpace(1),CellSpace(7),SubSpace(14)],[PopulationSpace(3),CellSpace(6),CellSpace(7),SubSpace(5)]};

FeatureNames = cell(size(FavoriteStains,2),1);

for CurrentStain = 1:size(FavoriteStains,2)
    CurrentVector = FeatureVector{1,CurrentStain};
    NameStorage = cell(4,1);
    for CurrentFeature = 1:4
        NameStorage{CurrentFeature,1} = FeatureHeader{CurrentVector(CurrentFeature),1};
    end
    FeatureNames{CurrentStain,1} = NameStorage;
end


RSquareStorage = zeros(10,1);
RSquareFullStorage = zeros(10,1);

CurrentWells = [7,8,9];
WellIndex = find(ismember(LinearIndex,CurrentWells));


for CurrentResponseIndex = 1:10
    CurrentResponse = FavoriteStains(CurrentResponseIndex);
    CurrentFeatures = FeatureVector{1,CurrentResponseIndex};

    CurrentResponseData = LogResponseData(WellIndex,CurrentResponse);
    CurrentFeatureData = FeatureZData(WellIndex,CurrentFeatures);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;
    
    RSquareStorage(CurrentResponseIndex,1) = RSquare;


    CurrentFeatureData = PCFeatureData(WellIndex,:);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;

    RSquareFullStorage(CurrentResponseIndex,1) = RSquare;
end

RSquareAllConcentrations{3,1} = [RSquareStorage,RSquareFullStorage];

% Plot as stacked bars

figure

bar([RSquareStorage,[RSquareFullStorage-RSquareStorage]],'stacked')
ylim([0 1])

title('Minimal Modeling Approach - 10ng/ml')
legend('4 Cellular state features','full model')

xticklabels({'pEGFR','pMEK','ERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6'})
ylabel('R2')



% Do Minimal modeling 0


FavoriteStains = [18,168,3,123,153,108,33,91,61,78];



FeatureVector = {[PopulationSpace(3),CellSpace(11),CellSpace(17),SubSpace(5)],[PopulationSpace(3),CellSpace(6),CellSpace(11),SubSpace(5)],[PopulationSpace(2),CellSpace(6),CellSpace(17),SubSpace(5)],[PopulationSpace(3),CellSpace(6),CellSpace(7),SubSpace(5)],[PopulationSpace(3),CellSpace(6),CellSpace(8),SubSpace(5)],...
    [PopulationSpace(5),CellSpace(18),CellSpace(8),SubSpace(5)],[PopulationSpace(5),CellSpace(6),CellSpace(8),SubSpace(5)],[PopulationSpace(3),CellSpace(1),CellSpace(12),SubSpace(5)],[PopulationSpace(3),CellSpace(1),CellSpace(3),SubSpace(5)],[PopulationSpace(3),CellSpace(6),CellSpace(18),SubSpace(5)]};

FeatureNames = cell(size(FavoriteStains,2),1);

for CurrentStain = 1:size(FavoriteStains,2)
    CurrentVector = FeatureVector{1,CurrentStain};
    NameStorage = cell(4,1);
    for CurrentFeature = 1:4
        NameStorage{CurrentFeature,1} = FeatureHeader{CurrentVector(CurrentFeature),1};
    end
    FeatureNames{CurrentStain,1} = NameStorage;
end

RSquareStorage = zeros(10,1);
RSquareFullStorage = zeros(10,1);

CurrentWells = [13,14,15];
WellIndex = find(ismember(LinearIndex,CurrentWells));


for CurrentResponseIndex = 1:10
    CurrentResponse = FavoriteStains(CurrentResponseIndex);
    CurrentFeatures = FeatureVector{1,CurrentResponseIndex};

    CurrentResponseData = LogResponseData(WellIndex,CurrentResponse);
    CurrentFeatureData = FeatureZData(WellIndex,CurrentFeatures);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;
    
    RSquareStorage(CurrentResponseIndex,1) = RSquare;


    CurrentFeatureData = PCFeatureData(WellIndex,:);
    

    MDL = cvglmnet(CurrentFeatureData,CurrentResponseData);
    Prediction = cvglmnetPredict(MDL,CurrentFeatureData);
    RSquare = corr(Prediction,CurrentResponseData).^2;

    RSquareFullStorage(CurrentResponseIndex,1) = RSquare;
end

RSquareAllConcentrations{1,1} = [RSquareStorage,RSquareFullStorage];

% Plot as stacked bars

figure

bar([RSquareStorage,[RSquareFullStorage-RSquareStorage]],'stacked')
ylim([0 1])

title('Minimal Modeling Approach - 0ng/ml')
legend('4 Cellular state features','full model')

xticklabels({'pEGFR','pMEK','ERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6'})
ylabel('R2')

% Plot Everything combined

PlotMatrix = zeros(59,2);

InsertIndex = 1;

for CurrentStain = 1:10

    for CurrentConcentration = 1:5
        CurrentRSquare = RSquareAllConcentrations{CurrentConcentration,1};
        PlotMatrix(InsertIndex,:) = CurrentRSquare(CurrentStain,:);
        InsertIndex = InsertIndex + 1;
    end
    InsertIndex = InsertIndex + 1;
end

figure

bar([PlotMatrix(:,1),PlotMatrix(:,2)-PlotMatrix(:,1)],'stacked')
ylim([0 1])




%% Supplementary Figure 4D

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

% R Increase as function of PCs added to the model

StainCell = [3,18,33,61,78,91,108,123,153,168];
PercentileCell = {99.7;99.7;99.7;99.7;99.7;99.7;99.7;99.7;99.7;99.3};

NameVector = {'pERK','pEGFR','pAKT','FoxO3a','pS6','pMTOR','pGSK3B','pMEK','pRSK','FoxO1'};

WellCell = {[1,2,3],[4,5,6],[7,8,9],[10,19,20],[13,14,15]};

CellStorageBoundary = cell(5,1);
CellStoragePCOrdering = cell(5,1);
CellRSquareStorage = cell(5,1);

for CurrentWellIndex = 1:size(WellCell,2)
    
    Wells = WellCell{1,CurrentWellIndex};
    WellIndex = find(ismember(LinearIndex,Wells));
    StorageBoundary = zeros(10,1);
    PCOrdering = zeros(10,143);
    RSquareStorageFull = zeros(10,143);
    CurrentWellIndex
    
    for CurrentResponseIndex = 1:size(StainCell,2)
        
        CurrentResponse = StainCell(1,CurrentResponseIndex);
        WellResponseData = LogResponseData(WellIndex,CurrentResponse);
        WellFeatureData = PCFeatureData(WellIndex,:);
        
        PCsIncluded = 1:size(PCFeatureData,2);
        
        PCinModel = [];
        RSquareStorage = zeros(143,1);
        
        %parpool(6)
        
        for NumberPCs = 1:size(PCFeatureData,2)
            TempPC = PCsIncluded;
            TempRSquare = zeros(size(TempPC,2),1);
            parfor CurrentPC = 1:size(TempPC,2)
                IncludedPC = [PCinModel,TempPC(CurrentPC)];
                ModelFeatureData = WellFeatureData(:,IncludedPC);
                MDL = cvglmnet(ModelFeatureData,WellResponseData);
                Prediction = cvglmnetPredict(MDL,ModelFeatureData);
                CurrentRSquare = corr(WellResponseData,Prediction).^2;
                TempRSquare(CurrentPC,1) = CurrentRSquare;
            end
            [~,MaxIndex] = max(TempRSquare);
            RSquareStorage(NumberPCs,1) = max(TempRSquare);
            NewPC = TempPC(MaxIndex);
            PCsIncluded = setdiff(PCsIncluded,NewPC);
            PCinModel = [PCinModel,NewPC];
            NumberPCs
        end
        
        RSquareStorageFull(CurrentResponseIndex,:) = RSquareStorage;
        
        
        % 80% of max
        
        MaxRSquare = max(RSquareStorage);
        Boundary = MaxRSquare*0.8;
        
        NumPCs = knnsearch(RSquareStorage,Boundary);
        StorageBoundary(CurrentResponseIndex,1) = NumPCs;
        PCOrdering(CurrentResponseIndex,:) = PCinModel;
        
    end
    close all
    CellStorageBoundary{CurrentWellIndex,1} = StorageBoundary;
    CellStoragePCOrdering{CurrentWellIndex,1} = PCOrdering;
    CellRSquareStorage{CurrentWellIndex,1} = RSquareStorageFull;
    CurrentWellIndex
end

StainCell = [3,18,33,61,78,91,108,123,153,168];
PercentileCell = {99.7;99.7;99.7;99.7;99.7;99.7;99.7;99.7;99.7;99.3};

IndexStorage = [];

NameVector = {'pERK','pEGFR','pAKT','FoxO3a','pS6','pMTOR','pGSK3B','pMEK','pRSK','FoxO1'};

PlotOrder = [2,8,1,9,7,6,3,4,10,5];
WellOrder = [5,4,3,2,1];

for CurrentStain = 1:10
    for CurrentWell = 1:5
        
        CurrentRSquareStorage = CellRSquareStorage{WellOrder(CurrentWell),1};
        
        RawRSquareStorage = CurrentRSquareStorage(PlotOrder(CurrentStain),:);
        RSquareStorage = RawRSquareStorage./max(RawRSquareStorage);
        
        Thresh = 0.8;
        
        IndexThresh = knnsearch(RSquareStorage',Thresh);
        
        IndexStorage = [IndexStorage,IndexThresh];
        
    end
    IndexStorage = [IndexStorage,0];
end

% PCs Retained

WellBatches = {[13,14,15],[20,19,10],[7,8,9],[4,5,6],[1,2,3]};
ResponseStain = [18,168,3,123,153,108,33,91,61,78];

RetainedPCs = [];

for CurrentStain = 1:size(ResponseStain,2)
    for CurrentWell = 1:5
        WellIndex = find(ismember(LinearIndex,WellBatches{1,CurrentWell}));
        WellFeatureData = zscore(PCFeatureData(WellIndex,:));
        WellResponseData = LogResponseData(WellIndex,ResponseStain(CurrentStain));
        MDL = cvglmnet(WellFeatureData,WellResponseData);
        ModelCoeff = cvglmnetCoef(MDL);
        ModelCoeff(1) = [];
        NonZero = find(ModelCoeff ~= 0);
        [RetainedPCs] = [RetainedPCs,numel(NonZero)];       
    end
    RetainedPCs = [RetainedPCs,0];
end

MinusPCs = RetainedPCs - IndexStorage;

BarPlot = [IndexStorage;MinusPCs];


figure
bar(BarPlot','stacked')
ylim([0 143])
xlim([-1 61])


%% Supplementary Figure 4E

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

% Fit three gaussians... the outer two are used to define High and Low responder


ResponseCell = [10,19,20];

CurrentStain = 5;
Eval = 0:0.01:12;

% Outline Distributions

figure
hold on

WellIndex = find(ismember(LinearIndex,ResponseCell));
WellResponseData = LogResponseData(WellIndex,CurrentStain);
%     if CurrentWellCell == 1
%         WellResponseData(WellResponseData >= 4) = [];
%     end
DensityEstimate = ksdensity(WellResponseData,Eval);
plot(Eval,DensityEstimate);

GMModel = fitgmdist(WellResponseData,3);

PDF = pdf(GMModel,Eval');

Sigma = GMModel.Sigma;
Mu = GMModel.mu;
Contribution = GMModel.ComponentProportion;
PDFOne = normpdf(Eval',Mu(1),Sigma(1,1,1)).*Contribution(1);
PDFTwo = normpdf(Eval',Mu(2),Sigma(1,1,2)).*Contribution(2);
PDFThree = normpdf(Eval',Mu(3),Sigma(1,1,3)).*Contribution(3);

%plot(Eval,PDF);
plot(Eval,PDFOne);
plot(Eval,PDFTwo);
plot(Eval,PDFThree);



ResponseCell = [10,19,20];
CurrentStain = 5;
WellIndex = find(ismember(LinearIndex,ResponseCell));
WellResponseData = LogResponseData(WellIndex,CurrentStain);

LowCells = intersect(find(WellResponseData  >= 0),find(WellResponseData < 5.13));
HighCells = intersect(find(WellResponseData  >= 8.15),find(WellResponseData <= 14));

LowIndex = WellIndex(LowCells);
HighIndex = WellIndex(HighCells);

NonResponderFeature = PCFeatureData(LowIndex,:);
ResponderFeature = PCFeatureData(HighIndex,:);

NonResponderOrigFeature = FeatureZData(LowIndex,:);
ResponderOrigFeature = FeatureZData(HighIndex,:);

BGIndex = find([contains(FeatureHeader,'BG488');contains(FeatureHeader,'BG568');contains(FeatureHeader,'BG647')]);

MorphologyIndex = find(contains(FeatureHeader,'Morphology'));
MorphologyIndex = setdiff(MorphologyIndex,BGIndex);

IntensityRawIndex = find(contains(FeatureHeader,'Intensity'));
STDIndex = find(contains(FeatureHeader,'std'));
IntensityIndex = setdiff(IntensityRawIndex,STDIndex);
IntensityIndex = setdiff(IntensityIndex,BGIndex);

CellularIndex = [IntensityIndex;MorphologyIndex];

TextureIndex = find(contains(FeatureHeader,'Texture'));
TextureIndex = setdiff(TextureIndex,BGIndex);

PopulationIndex = 1291:1300;
PopulationIndex = setdiff(PopulationIndex,BGIndex);

GroupIndex = [ones(size(LowIndex,1),1);repmat(2,size(HighIndex,1),1)];

% Get Random Balanced Cells....
IndexNo = find(GroupIndex == 1);
IndexYes = find(GroupIndex == 2);

AmountRandom = 7000;

ModelCellsNo = datasample(IndexNo,AmountRandom,'Replace',false);
ModelCellsYes = datasample(IndexYes,AmountRandom,'Replace',false);
ModelCells = [ModelCellsNo;ModelCellsYes];


% % Cellular Model
% 
% FeatureDataModel = [NonResponderOrigFeature(:,CellularIndex);ResponderOrigFeature(:,CellularIndex)];
% 
% % Perform PCA...
% [PCVariables,~,~,~,ExplainedVariance] = pca(FeatureDataModel);
% PCModelData = FeatureDataModel*PCVariables;
% % Find CumSUMstuff
% CumExplained = cumsum(ExplainedVariance);
% ExplainedThresh = find(CumExplained >= 95,1,'first');
% 
% MDL = cvglmnet(PCModelData(ModelCells,1:ExplainedThresh),GroupIndex(ModelCells),'binomial');
% FitIndex = cvglmnetPredict(MDL,PCModelData(:,1:ExplainedThresh),'lambda_1se','class');
% 
% ModelStatsCellular = confusionmatStats(GroupIndex,FitIndex);
% 
% % Texture Model
% 
% FeatureDataModel = [NonResponderOrigFeature(:,TextureIndex);ResponderOrigFeature(:,TextureIndex)];
% 
% % Perform PCA...
% [PCVariables,~,~,~,ExplainedVariance] = pca(FeatureDataModel);
% PCModelData = FeatureDataModel*PCVariables;
% % Find CumSUMstuff
% CumExplained = cumsum(ExplainedVariance);
% ExplainedThresh = find(CumExplained >= 95,1,'first');
% 
% MDL = cvglmnet(PCModelData(ModelCells,1:ExplainedThresh),GroupIndex(ModelCells),'binomial');
% FitIndex = cvglmnetPredict(MDL,PCModelData(:,1:ExplainedThresh),'lambda_1se','class');
% 
% ModelStatsTexture = confusionmatStats(GroupIndex,FitIndex);
% 
% % Population Model
% 
% FeatureDataModel = [NonResponderOrigFeature(:,PopulationIndex);ResponderOrigFeature(:,PopulationIndex)];
% 
% % Perform PCA...
% [PCVariables,~,~,~,ExplainedVariance] = pca(FeatureDataModel);
% PCModelData = FeatureDataModel*PCVariables;
% % Find CumSUMstuff
% CumExplained = cumsum(ExplainedVariance);
% ExplainedThresh = find(CumExplained >= 95,1,'first');
% 
% MDL = cvglmnet(PCModelData(ModelCells,1:ExplainedThresh),GroupIndex(ModelCells),'binomial');
% FitIndex = cvglmnetPredict(MDL,PCModelData(:,1:ExplainedThresh),'lambda_1se','class');
% 
% ModelStatsPopulation = confusionmatStats(GroupIndex,FitIndex);

% Full Model

FeatureDataModel = [NonResponderOrigFeature(:,[MorphologyIndex;IntensityIndex;PopulationIndex';TextureIndex]);ResponderOrigFeature(:,[MorphologyIndex;IntensityIndex;PopulationIndex';TextureIndex])];

% Perform PCA...
[PCVariables,~,~,~,ExplainedVariance] = pca(FeatureDataModel);
PCModelData = FeatureDataModel*PCVariables;
% Find CumSUMstuff
CumExplained = cumsum(ExplainedVariance);
ExplainedThresh = find(CumExplained >= 95,1,'first');

MDL = cvglmnet(PCModelData(ModelCells,1:ExplainedThresh),GroupIndex(ModelCells),'binomial');
FitIndex = cvglmnetPredict(MDL,PCModelData(ModelCells,1:ExplainedThresh),'lambda_1se','class');

ModelStatsFull = confusionmatStats(GroupIndex(ModelCells),FitIndex);

FScoreFull = ModelStatsFull.Fscore;

figure
hold on
scatter(FScoreFull(2),FScoreFull(1),'filled','MarkerFaceColor','k')
xlim([0 1])
ylim([0 1])

% EveryIndividual Feature... Sucellular

for CurrentFeatureIndex = 1:size(TextureIndex,1)

    CurrentFeature = TextureIndex(CurrentFeatureIndex);
    
    MDL = cvglmnet(FeatureZData(ModelCells,CurrentFeature),GroupIndex(ModelCells),'binomial');
    FitIndex = cvglmnetPredict(MDL,FeatureZData(ModelCells,CurrentFeature),'lambda_1se','class');

    ModelStats = confusionmatStats(GroupIndex(ModelCells),FitIndex);
    
    FScore = ModelStats.Fscore;
    scatter(FScore(2),FScore(1),'filled','MarkerFaceColor','r')
    xlim([0 1])
    ylim([0 1])
end


% EveryIndividual Feature... Cellular

for CurrentFeatureIndex = 1:size(CellularIndex,1)

    CurrentFeature = CellularIndex(CurrentFeatureIndex);
    
    MDL = cvglmnet(FeatureZData(ModelCells,CurrentFeature),GroupIndex(ModelCells),'binomial');
    FitIndex = cvglmnetPredict(MDL,FeatureZData(ModelCells,CurrentFeature),'lambda_1se','class');

    ModelStats = confusionmatStats(GroupIndex(ModelCells),FitIndex);
    
    FScore = ModelStats.Fscore;
    scatter(FScore(2),FScore(1),'filled','MarkerFaceColor','g')
    xlim([0 1])
    ylim([0 1])
end

% EveryIndividual Feature... Multicellular

for CurrentFeatureIndex = 1:size(PopulationIndex,2)

    CurrentFeature = PopulationIndex(CurrentFeatureIndex);
    
    MDL = cvglmnet(FeatureZData(ModelCells,CurrentFeature),GroupIndex(ModelCells),'binomial');
    FitIndex = cvglmnetPredict(MDL,FeatureZData(ModelCells,CurrentFeature),'lambda_1se','class');

    ModelStats = confusionmatStats(GroupIndex(ModelCells),FitIndex);
    
    FScore = ModelStats.Fscore;
    scatter(FScore(2),FScore(1),'filled','MarkerFaceColor','b')
    xlim([0 1])
    ylim([0 1])
end



%% Supplementary Figure 4F

% Assembled in Adobe Illustrar; ai. can be shared - Raw plots used are generated by the following

CurrentResponseVector = [18,168,3,123,153,108,33,91,61,78];
NameCell = {'pEGFR','pMEK','pERK','pRSK','pGSK3B','pMTOR','pAKT','FoxO1','FoxO3a','pS6'};

WellGroups = {[13,14,15],[10,19,20],[7,8,9],[4,5,6],[1,2,3]};

ConcentrationString = {'0ng','6.25ng','10ng','25ng','100ng'};
RSquareStorageCVAL = zeros(10,5);

for CurrentResponseIndex = 1:size(CurrentResponseVector,2)
    CurrentResponse = CurrentResponseVector(CurrentResponseIndex);

    StoragePrediction = [];
    StorageTrue = [];
    StorageGroup = [];

    for CurrentGroup = 1:size(WellGroups,2)
        
        CurrentWells = WellGroups{1,CurrentGroup};             
        CurrentWellIndex = find(ismember(LinearIndex,CurrentWells));
        CellFeatureData = PCFeatureData(CurrentWellIndex,:);
        CellResponseData = LogResponseData(CurrentWellIndex,CurrentResponse);
        MDL = cvglmnet(CellFeatureData,CellResponseData);
        Prediction = cvglmnetPredict(MDL,CellFeatureData);

        CurrentNormData = Prediction;

        Iterations = 20;
        
        for CurrentIteration = 1:Iterations
            NormedData = quantilenorm([CellResponseData,CurrentNormData]);
            CurrentNormData = NormedData(:,2);
        end

        Prediction = CurrentNormData;
        
        StorageTrue = [StorageTrue;CellResponseData];
        StoragePrediction = [StoragePrediction;Prediction];
        StorageGroup = [StorageGroup;repmat(CurrentGroup,size(StorageTrue,1),1)];
    
    end   
    
    RandomShuffle = randperm(size(StorageTrue,1),size(StorageTrue,1));

    figure
    scatter(StorageTrue(RandomShuffle),StoragePrediction(RandomShuffle),4,StorageGroup(RandomShuffle),'filled')
end

