%% load data 
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_1.mat')
addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));
javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\Functions\umapFileExchange (1.2.1)\umap\umap.jar');
load('Z:\bkramer\190218_184A1_EGF\Processed_Data\CubeHelixLong.mat');
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\SingleCellDR_Normed.mat');


%% Data description

% LinearIndex: Indicator to which condition each cell (i.e. row) belongs; Individual numbers denote replicates %
% 1,2,3,11,21,22,23,24,25,26,27,28,29,30 - 100ng/ml EGF
% 4,5,6 - 25ng/ml EGF
% 7,8,9 - 10ng/ml EGF
% 10,19,20 - 6.25ng/ml EGF
% 16,17,18 - 1ng/ml EGF
% 13,14,15 - 0ng/ml EGF
% 11,12,21,22,23,24,25,26,27,28,29,30 - 100ng/ml control for intensity decay and secondary antibody only controls after elution (see Gut et al. for details): 11: Cycle 1, 12: Cycle 2 etc... 30 always secondary only. Starting at 11... etc again when 29 was reached

% FeatureHeader: Descriptor of which cellular state feature (column) is represented in the corresponding double matrices %
% FeatureData: Contains raw (and transformed, see material and methods) single cell cellular state feature data; columns correspoding to cellular state features described in "FeatureHeader" %
% FeatureZData: Contains the z-scored (see material and methods) single cell cellular state feature data; columns corresponding to cellular state features described in "FeatureHeader" %

% MetaHeader: Descriptor of which MetaData (e.g. CentroidLocation in image, or which field in an image) is represented in the corresponding double matrices %
% MetaData: Contains single cell information on the Metadata; columns corresponding to information described in "MetaHeader"

% ResponseHeader: Descriptor of which response (column) is represented in the corresponding double matrices %
% ResponseData: Contains raw single cell data; columns corresponding to response features described in "ResponseHeader" %
% LogResponseData: Contains transformed (see material and methods) single cell data; columns corresponding to response features described in "ResponseHeader" %

% PCCoeff: Contains the loadings of each principal component from principal component analysis on cellular state features (FeatureZData)
% PCFeatureData: Contains single cell data of cellular state features (from FeatureZData) transformed to PCs). Only the PCs which together explain 97.5% of the variance are kept (hence only 143)

% MSTData: Relic from the past; not used in the paper %
% MSTHeader: Relic from the past; not used in the paper %

% WeightedClusterData: Data from PCFeatureData weighted as described in material and methods and used as input for fuzzy clustering. Columns correspond to the PCs used; further described in script for Figure 3; Only clustered on cells belong to LinearIndex 1,2,3,4,5,6,7,8,9,10,13,14,15 and 20 %
% ClusterCentor: Centroid locations for the individual cluster centers obtained from fuzzy clustering on cellular state features %
% MembershipData: Contains the Membership degree (Fuzzy clustering outputs degrees of membership, no clear assignement) for each single cell)

%% Figure 3A 

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

% Generate UMAP - CAVEAT!!!!! EVERY UMAP RUN CAN DIFFER
WellIndex = find(ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,19,20,13,14,15]));
% NumberNeighbors = 30;
% DistanceMetric = 'cityblock';
% [ReductionUmap,UMAPCoord] = run_umap(PCFeatureData(WellIndex,:),'n_neighbors',NumberNeighbors,'metric',DistanceMetric);
% ReducedLinearIndex = LinearIndex(WellIndex);


WellIndex = find(ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,19,20,13,14,15])); 
ReducedMembershipData = MembershipData(WellIndex,:);

[NaNRows,~] = find(isnan(ReducedMembershipData));
UniqueRows = unique(NaNRows);

ReductionUmap(UniqueRows,:) = [];
ReducedMembershipData(UniqueRows,:) = [];

[~,Maximum] = max(ReducedMembershipData');

Maximum = Maximum';

RandShuffle = randperm(length(ReductionUmap));

figure
scatter(ReductionUmap(RandShuffle,1),ReductionUmap(RandShuffle,2),4,Maximum(RandShuffle),'filled','MarkerEdgeColor','none')
Custom = tab20ColorMap([1:7,9:13,15:20],1:3);
colormap(Custom)


ylim([-4.3 6.8])
xlim([-7.5 10.5])
set(gcf,'position',[2963 -211 590.8 450])
axis off



colorbar
axis on


%% Figure 3B

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

CurrentStain = 3;
ClusterColorMap = tab20ColorMap([1:7,9:13,15:20],1:3);

% Cluster 2;
CurrentCluster = 2;

WellGroups = {[13,14,15],[10,19,20],[9,8,7],[6,5,4],[3,2,1]};

MeanResponse = zeros(size(WellGroups,2),1);
ReplicateResponse = zeros(size(WellGroups,2),3);

for CurrentWell = 1:size(WellGroups,2)
    WellMember = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    MeanResponse(CurrentWell,1) = nansum(ResponseData(WellMember,CurrentStain).*MembershipData(WellMember,CurrentCluster))/nansum(MembershipData(WellMember,CurrentCluster));
end

for CurrentGroup = 1:size(WellGroups,2)
    CurrentWellGroup = WellGroups{1,CurrentGroup};
    for CurrentWell = 1:size(CurrentWellGroup,2)
        WellMember = find(ismember(LinearIndex,CurrentWellGroup(CurrentWell)));
        ReplicateResponse(CurrentGroup,CurrentWell) = nansum(ResponseData(WellMember,CurrentStain).*MembershipData(WellMember,CurrentCluster))/nansum(MembershipData(WellMember,CurrentCluster));
    end
end

Doses = log2([1,6.25,10,25,100])';
[cfFull,~] = L4P(Doses,MeanResponse);

PlotVector = linspace(log2(1),log2(100));
Eval = cfFull(PlotVector);

EC50X = cfFull.C;
EC50Y = cfFull(EC50X);

% Normalize all values

Maximum = max(ReplicateResponse(:));
Minimum = min(ReplicateResponse(:)); 

NormReplicateResponse = (ReplicateResponse - Minimum)./(Maximum - Minimum);
NormEval = (Eval - Minimum)./(Maximum - Minimum);
figure
hold on
plot(PlotVector,NormEval,'Color',ClusterColorMap(CurrentCluster,:));
hold on
Doses = log2([1,6.25,10,25,100])';
% ylim([-0.1 1])
scatter(Doses,NormReplicateResponse(:,1),40,'filled','MarkerFaceColor',ClusterColorMap(CurrentCluster,:),'MarkerEdgeColor','k')
scatter(Doses,NormReplicateResponse(:,2),40,'filled','MarkerFaceColor',ClusterColorMap(CurrentCluster,:),'MarkerEdgeColor','k')
scatter(Doses,NormReplicateResponse(:,3),40,'filled','MarkerFaceColor',ClusterColorMap(CurrentCluster,:),'MarkerEdgeColor','k')
legend off


% CurrentCluster 15

CurrentCluster = 15;

WellGroups = {[13,14,15],[10,19,20],[9,8,7],[6,5,4],[3,2,1]};

MeanResponse = zeros(size(WellGroups,2),1);
ReplicateResponse = zeros(size(WellGroups,2),3);

for CurrentWell = 1:size(WellGroups,2)
    WellMember = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    MeanResponse(CurrentWell,1) = nansum(ResponseData(WellMember,CurrentStain).*MembershipData(WellMember,CurrentCluster))/nansum(MembershipData(WellMember,CurrentCluster));
end

for CurrentGroup = 1:size(WellGroups,2)
    CurrentWellGroup = WellGroups{1,CurrentGroup};
    for CurrentWell = 1:size(CurrentWellGroup,2)
        WellMember = find(ismember(LinearIndex,CurrentWellGroup(CurrentWell)));
        ReplicateResponse(CurrentGroup,CurrentWell) = nansum(ResponseData(WellMember,CurrentStain).*MembershipData(WellMember,CurrentCluster))/nansum(MembershipData(WellMember,CurrentCluster));
    end
end

Doses = log2([1,6.25,10,25,100])';
[cfFull,~] = L4P(Doses,MeanResponse);

PlotVector = linspace(log2(1),log2(100));
Eval = cfFull(PlotVector);

EC50X = cfFull.C;
EC50Y = cfFull(EC50X);

% Normalize all values

Maximum = max(ReplicateResponse(:));
Minimum = min(ReplicateResponse(:));

NormReplicateResponse = (ReplicateResponse - Minimum)./(Maximum - Minimum);
NormEval = (Eval - Minimum)./(Maximum - Minimum);
hold on
plot(PlotVector,NormEval,'Color',ClusterColorMap(CurrentCluster,:));
hold on
Doses = log2([1,6.25,10,25,100])';
% ylim([-0.1 1])
scatter(Doses,NormReplicateResponse(:,1),40,'filled','MarkerFaceColor',ClusterColorMap(CurrentCluster,:),'MarkerEdgeColor','k')
scatter(Doses,NormReplicateResponse(:,2),40,'filled','MarkerFaceColor',ClusterColorMap(CurrentCluster,:),'MarkerEdgeColor','k')
scatter(Doses,NormReplicateResponse(:,3),40,'filled','MarkerFaceColor',ClusterColorMap(CurrentCluster,:),'MarkerEdgeColor','k')
legend off


% CurrentCluster 18
CurrentCluster = 18;

WellGroups = {[13,14,15],[10,19,20],[9,8,7],[6,5,4],[3,2,1]};

MeanResponse = zeros(size(WellGroups,2),1);
ReplicateResponse = zeros(size(WellGroups,2),3);

for CurrentWell = 1:size(WellGroups,2)
    WellMember = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    MeanResponse(CurrentWell,1) = nansum(ResponseData(WellMember,CurrentStain).*MembershipData(WellMember,CurrentCluster))/nansum(MembershipData(WellMember,CurrentCluster));
end

for CurrentGroup = 1:size(WellGroups,2)
    CurrentWellGroup = WellGroups{1,CurrentGroup};
    for CurrentWell = 1:size(CurrentWellGroup,2)
        WellMember = find(ismember(LinearIndex,CurrentWellGroup(CurrentWell)));
        ReplicateResponse(CurrentGroup,CurrentWell) = nansum(ResponseData(WellMember,CurrentStain).*MembershipData(WellMember,CurrentCluster))/nansum(MembershipData(WellMember,CurrentCluster));
    end
end

Doses = log2([1,6.25,10,25,100])';
[cfFull,~] = L4P(Doses,MeanResponse);

PlotVector = linspace(log2(1),log2(100));
Eval = cfFull(PlotVector);

EC50X = cfFull.C;
EC50Y = cfFull(EC50X);

% Normalize all values

Maximum = max(ReplicateResponse(:));
Minimum = min(ReplicateResponse(:));

NormReplicateResponse = (ReplicateResponse - Minimum)./(Maximum - Minimum);
NormEval = (Eval - Minimum)./(Maximum - Minimum);
hold on
plot(PlotVector,NormEval,'Color',ClusterColorMap(CurrentCluster,:));
hold on
Doses = log2([1,6.25,10,25,100])';
ylim([0 1])
scatter(Doses,NormReplicateResponse(:,1),40,'filled','MarkerFaceColor',ClusterColorMap(CurrentCluster,:),'MarkerEdgeColor','k')
scatter(Doses,NormReplicateResponse(:,2),40,'filled','MarkerFaceColor',ClusterColorMap(CurrentCluster,:),'MarkerEdgeColor','k')
scatter(Doses,NormReplicateResponse(:,3),40,'filled','MarkerFaceColor',ClusterColorMap(CurrentCluster,:),'MarkerEdgeColor','k')
legend off

WellGroups = {[13,14,15],[10,19,20],[9,8,7],[6,5,4],[3,2,1]};
CurrentStain = 3;

MeanResponse = zeros(size(WellGroups,2),1);
ReplicateResponse = zeros(size(WellGroups,2),3);

for CurrentWell = 1:size(WellGroups,2)
    WellMember = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
    MeanResponse(CurrentWell,1) = mean(ResponseData(WellMember,CurrentStain));  
end

for CurrentGroup = 1:size(WellGroups,2)
    CurrentWellGroup = WellGroups{1,CurrentGroup};
    for CurrentWell = 1:size(CurrentWellGroup,2)
        WellMember = find(ismember(LinearIndex,CurrentWellGroup(CurrentWell)));
        ReplicateResponse(CurrentGroup,CurrentWell) = mean(ResponseData(WellMember,CurrentStain)); 
    end
end

Doses = log2([1,6.25,10,25,100])';

%[cfFull,~] = L4P(Doses,NormedResponse);
[cfFull,~] = L4P(Doses,MeanResponse);

PlotVector = linspace(log2(1),log2(100));
Eval = cfFull(PlotVector);

EC50X = cfFull.C;
EC50Y = cfFull(EC50X);

% Normalize all values

Maximum = max(ReplicateResponse(:));
Minimum = min(ReplicateResponse(:));

NormReplicateResponse = (ReplicateResponse - Minimum)./(Maximum - Minimum);
NormEval = (Eval - Minimum)./(Maximum - Minimum);
NormEC50Y = 0.5;

hold on
plot(PlotVector,NormEval,'Color','k');
hold on
Doses = log2([1,6.25,10,25,100])';
% ylim([-0.1 1])
scatter(Doses,NormReplicateResponse(:,1),40,'k','filled')
scatter(Doses,NormReplicateResponse(:,2),40,'k','filled')
scatter(Doses,NormReplicateResponse(:,3),40,'k','filled')
legend off

xlabel('Log2 [EGF] ng/ml')
ylabel('Mean signal (% of max)')




% Plot Features of individual classes

WellIndex = ismember(LinearIndex,[1,2,3,4,5,6,7,8,9,10,13,14,15,19,20]);
BGIndex = find([contains(FeatureHeader,'BG488');contains(FeatureHeader,'BG568');contains(FeatureHeader,'BG647')]);

MorphologyIndex = find(contains(FeatureHeader,'Morphology'));
MorphologyIndex = setdiff(MorphologyIndex,BGIndex);

IntensityRawIndex = find(contains(FeatureHeader,'Intensity'));
STDIndex = find(contains(FeatureHeader,'std'));
IntensityIndex = setdiff(IntensityRawIndex,STDIndex);
IntensityIndex = setdiff(IntensityIndex,BGIndex);

TextureIndex = find(contains(FeatureHeader,'Texture'));
TextureIndex = setdiff(TextureIndex,BGIndex);

PopulationIndex = [641:650,1291:1300];
PopulationIndex = setdiff(PopulationIndex,BGIndex);

CellularIndex = [MorphologyIndex;IntensityIndex];

% Population Scale

PopulationScaleMeans = zeros(18,size(PopulationIndex,2));
PopulationHeader = cell(size(PopulationIndex,2),1);

for CurrentCluster = 1:18
    for CurrentFeature = 1:size(PopulationIndex,2)
        PopulationScaleMeans(CurrentCluster,CurrentFeature) = nansum(FeatureZData(WellIndex,PopulationIndex(CurrentFeature)).*MembershipData(WellIndex,CurrentCluster))/nansum(MembershipData(WellIndex,CurrentCluster));
        PopulationHeader{CurrentFeature,1} = FeatureHeader{PopulationIndex(CurrentFeature),1};
    end
end


% Cellular Scale

CellularScaleMeans = zeros(18,size(CellularIndex,1));
CellularHeader = cell(size(CellularIndex,1),1);

for CurrentCluster = 1:18
    for CurrentFeature = 1:size(CellularIndex,1)
        CellularScaleMeans(CurrentCluster,CurrentFeature) = nansum(FeatureZData(WellIndex,CellularIndex(CurrentFeature)).*MembershipData(WellIndex,CurrentCluster))/nansum(MembershipData(WellIndex,CurrentCluster));
        CellularHeader{CurrentFeature,1} = FeatureHeader{CellularIndex(CurrentFeature),1};
    end
end

% Subcellular Scale

TextureScaleMeans = zeros(18,size(TextureIndex,1));
TextureHeader = cell(size(TextureIndex,1),1);

for CurrentCluster = 1:18
    for CurrentFeature = 1:size(TextureIndex,1)
        TextureScaleMeans(CurrentCluster,CurrentFeature) = nansum(FeatureZData(WellIndex,TextureIndex(CurrentFeature)).*MembershipData(WellIndex,CurrentCluster))/nansum(MembershipData(WellIndex,CurrentCluster));
        TextureHeader{CurrentFeature,1} = FeatureHeader{TextureIndex(CurrentFeature),1};
    end
end



PopulationPlotFeatures = [11:20];
CellularPlotFeatures = [1,14,244,150,154,158,161,164,171,174,178,182,184,188,192,193,196,206,208,214,218,222];
TexturePlotFeatures = [437,438,440,441,442,443,444,445,446,447,448,449,450,451];

ScaleColorMap = flipud(brewermap(500,'RdBu'));

% Population Scale

figure
PlotMatrix = [PopulationScaleMeans(2,PopulationPlotFeatures)];
PlotMatrix = [flipud(PlotMatrix),zeros(1,1);zeros(1,11)];
pcolor(PlotMatrix)
caxis([-1 1])
colormap(ScaleColorMap);
colorbar
axis image



% Cellular Scale

figure
PlotMatrix = [CellularScaleMeans(2,CellularPlotFeatures)];
PlotMatrix = [flipud(PlotMatrix),zeros(1,1);zeros(1,23)];
pcolor(PlotMatrix)
caxis([-1 1])
colormap(ScaleColorMap);
colorbar
axis image




% Subcellular scale

figure
PlotMatrix = [TextureScaleMeans(2,TexturePlotFeatures)];
PlotMatrix = [flipud(PlotMatrix),zeros(1,1);zeros(1,15)];
pcolor(PlotMatrix)
caxis([-1 1])
colormap(ScaleColorMap);
colorbar
axis image





% Population Scale

figure
PlotMatrix = [PopulationScaleMeans(15,PopulationPlotFeatures)];
PlotMatrix = [flipud(PlotMatrix),zeros(1,1);zeros(1,11)];
pcolor(PlotMatrix)
caxis([-1 1])
colormap(ScaleColorMap);
colorbar
axis image



% Cellular Scale

figure
PlotMatrix = [CellularScaleMeans(15,CellularPlotFeatures)];
PlotMatrix = [flipud(PlotMatrix),zeros(1,1);zeros(1,23)];
pcolor(PlotMatrix)
caxis([-1 1])
colormap(ScaleColorMap);
colorbar
axis image




% Subcellular scale

figure
PlotMatrix = [TextureScaleMeans(15,TexturePlotFeatures)];
PlotMatrix = [flipud(PlotMatrix),zeros(1,1);zeros(1,15)];
pcolor(PlotMatrix)
caxis([-1 1])
colormap(ScaleColorMap);
colorbar
axis image




% Population Scale

figure
PlotMatrix = [PopulationScaleMeans(18,PopulationPlotFeatures)];
PlotMatrix = [flipud(PlotMatrix),zeros(1,1);zeros(1,11)];
pcolor(PlotMatrix)
caxis([-1 1])
colormap(ScaleColorMap);
colorbar
axis image



% Cellular Scale

figure
PlotMatrix = [CellularScaleMeans(18,CellularPlotFeatures)];
PlotMatrix = [flipud(PlotMatrix),zeros(1,1);zeros(1,23)];
pcolor(PlotMatrix)
caxis([-1 1])
colormap(ScaleColorMap);
colorbar
axis image




% Subcellular scale

figure
PlotMatrix = [TextureScaleMeans(18,TexturePlotFeatures)];
PlotMatrix = [flipud(PlotMatrix),zeros(1,1);zeros(1,15)];
pcolor(PlotMatrix)
caxis([-1 1])
colormap(ScaleColorMap);
colorbar
axis image



%% Figure 3C

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following

% StorageFittedResponse = cell(10,1);
% StorageEC50 = cell(10,1);
% StorageEVAL = cell(10,1);
% 
% WellGroups = {[13,14,15],[10,19,20],[9,8,7],[6,5,4],[3,2,1]};
% FavoriteStains = [18,168,3,123,153,108,33,91,61,78];
% 
% FullWells = [1,2,3,4,5,6,7,8,9,10,13,14,15,19,20];
% 
% FullWellIndex = find(ismember(LinearIndex,FullWells));
% FullFeatureData = PCFeatureData(FullWellIndex,:);
% ReducedLinearIndex = LinearIndex(FullWellIndex,:);
% 
% %parpool(4)
% for CurrentResponseIndex = 1:10
%     CurrentResponse = FavoriteStains(CurrentResponseIndex);
%     
%     FittedResponse = zeros(size(FullWellIndex,1),size(WellGroups,2));
%     
%     
%     for CurrentWell = 1:size(WellGroups,2)
%         WellMember = find(ismember(LinearIndex,WellGroups{1,CurrentWell}));
%         WellResponseData = LogResponseData(WellMember,CurrentResponse);
%         WellFeatureData = PCFeatureData(WellMember,:);
%         MDL = cvglmnet(WellFeatureData,WellResponseData);
%         Prediction = cvglmnetPredict(MDL,FullFeatureData);
%         NonLogPrediction = 2.^Prediction;
%         FittedResponse(:,CurrentWell) = Prediction;
%     end
%     
%     NormedResponse = zeros(size(FittedResponse,1),5);
%     
%     parfor CurrentCell = 1:size(FittedResponse,1)
%         NormedResponse(CurrentCell,:) = normalize(FittedResponse(CurrentCell,:),1);    
%     end
%     
%     EC50SingleCell = zeros(size(FittedResponse,1),1);
%     Doses = log2([1,6.25,10,25,100])';
%     PlotVector = linspace(log2(1),log2(100));
%     EvalCell = zeros(size(FittedResponse,1),100);
%     parfor CurrentCell = 1:size(FittedResponse,1)
%         try
%             [cfFull,~] = L4P(Doses,NormedResponse(CurrentCell,:)');
%             EC50SingleCell(CurrentCell,1) = cfFull.C;
%             Eval = cfFull(PlotVector);
%             EvalCell(CurrentCell,:) = Eval;
%         catch
%             EC50SingleCell(CurrentCell,1) = NaN;
%             EvalCell(CurrentCell,:) = NaN;
%         end
%         
%     end
%     
%     StorageFittedResponse{CurrentResponseIndex,1} = NormedResponse;
%     StorageEC50{CurrentResponseIndex,1} = EC50SingleCell;
%     StorageEVAL{CurrentResponseIndex,1} = EvalCell;
%     
% %     save('StorageFittedResponse_Norm.mat','StorageFittedResponse');
% %     save('StorageEC50_Norm.mat','StorageEC50');
% %     save('StorageEVAL_Norm.mat','StorageEVAL');
% %     save('ReducedLinearIndex_Norm.mat','ReducedLinearIndex');
% end


% load('StorageFittedResponse_Norm.mat')
% load('StorageEC50_Norm.mat')
% load('StorageEVAL_Norm.mat')
% load('ReducedLinearIndex_Norm.mat')


CurrentEC50 = StorageEC50{2,1};
CurrentEC50(UniqueRows,:) = [];

figure
scatter(ReductionUmap(:,1),ReductionUmap(:,2),4,CurrentEC50,'filled','MarkerEdgeColor','none')
caxis([2.5 7.5]);
%colormap(getPyPlot_cMap('rainbow',500))
colormap(gistColorMap(:,1:3))

ylim([-4.3 6.8])
xlim([-7.5 10.5])
set(gcf,'position',[2963 -211 590.8 450])
axis off

colorbar
axis on



CurrentEC50 = StorageEC50{3,1};
CurrentEC50(UniqueRows,:) = [];
figure
scatter(ReductionUmap(:,1),ReductionUmap(:,2),4,CurrentEC50,'filled','MarkerEdgeColor','none')
caxis([2.5 7.5]);
%colormap(getPyPlot_cMap('rainbow',500))
colormap(gistColorMap(:,1:3))

ylim([-4.3 6.8])
xlim([-7.5 10.5])
set(gcf,'position',[2963 -211 590.8 450])
axis off

colorbar
axis on



CurrentEC50 = StorageEC50{6,1};
CurrentEC50(UniqueRows,:) = [];
figure
scatter(ReductionUmap(:,1),ReductionUmap(:,2),4,CurrentEC50,'filled','MarkerEdgeColor','none')
caxis([2.5 7.5]);
%colormap(getPyPlot_cMap('rainbow',500))
colormap(gistColorMap(:,1:3))

ylim([-4.3 6.8])
xlim([-7.5 10.5])
set(gcf,'position',[2963 -211 590.8 450])
axis off

colorbar
axis on



PlotIndex = 1;
ReducedEC50Storage = cell(10,1);
LowPercentileRange = 0.01;
HighPercentileRange = 0.15;

figure
hold on
for CurrentResponse = [10,2,4,6,5,7,3,9,8]
    SortedEC50 = sort(StorageEC50{CurrentResponse,1},'descend');
    TopIndex = round(size(SortedEC50,1)*HighPercentileRange);
    BotIndex = round(size(SortedEC50,1)*(1-LowPercentileRange));
    ReducedEC50Storage{CurrentResponse,1} = SortedEC50(TopIndex:BotIndex);
    if CurrentResponse == 9
        violin_scaledHighColor(PlotIndex,SortedEC50(TopIndex:BotIndex),'rotation','horizontal')
        boxplot(SortedEC50(TopIndex:BotIndex),'orientation','horizontal','Positions',PlotIndex,'OutlierSize',0.01,'Widths',0.3);
        h=findobj(gca,'tag','Outliers');
        delete(h)
    elseif CurrentResponse == 8
        violin_scaledHighColor(PlotIndex,SortedEC50(TopIndex:BotIndex),'rotation','horizontal');
        boxplot(SortedEC50(TopIndex:BotIndex),'orientation','horizontal','Positions',PlotIndex,'OutlierSize',0.01,'Widths',0.3);
        h=findobj(gca,'tag','Outliers');
        delete(h)
    else
        violin_scaledColor(PlotIndex,SortedEC50(TopIndex:BotIndex),'rotation','horizontal');
        boxplot(SortedEC50(TopIndex:BotIndex),'orientation','horizontal','Positions',PlotIndex,'OutlierSize',0.01,'Widths',0.3);
        h=findobj(gca,'tag','Outliers');
        delete(h)
    end
    PlotIndex = PlotIndex + 1;
end

caxis([2.5 7.5])
colormap(gistColorMap(:,1:3))
xlim([2.5 7.5])
ylim([0 11])
xlabel('Log2 EC50')
yticks([1:10])
yticklabels({'pS6','pMEK','pRSK','pMTOR','pGSK3B','pAKT','pERK','FoxO3a','FoxO1','pEGFR'})
text(3,10,'No Saturation in Dose Response')
colorbar


%% Figure 3D - Old

% Assembled in Adobe Illustrator; ai. can be shared - Raw plots used are generated by the following
load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\DoseProbabilityWithoutOne_Complete.mat');

TrueIndex = StorageGroupIndex{1,1};
XV = StorageProbability{1,1};

BoxPos = [1:5];
figure
hold on
for CurrentGroup = 1:5
    CurrentIndex = find(TrueIndex == CurrentGroup);
    boxplot(XV(CurrentIndex,:),'positions',BoxPos,'Widths',0.6,'Symbol','.','OutlierSize',0.03);
    BoxPos = BoxPos + 7;  
end

xlim([-1 35])
ylim([-0.05 1])
title('Non-contextual Unimodal perception of EGF')
ylabel('Probability')
xlabel('[EGF] received ng/ml')

TrueIndex = StorageGroupIndex{2,1};
XV = StorageProbability{2,1};

BoxPos = [1:5];
figure
hold on
for CurrentGroup = 1:5
    CurrentIndex = find(TrueIndex == CurrentGroup);
    boxplot(XV(CurrentIndex,:),'positions',BoxPos,'Widths',0.6,'Symbol','.','OutlierSize',0.03);
    BoxPos = BoxPos + 7;  
end

xlim([-1 35])
ylim([-0.05 1])
title('Contextual Unimodal perception of EGF')
ylabel('Probability')
xlabel('[EGF] received ng/ml')

TrueIndex = StorageGroupIndex{3,1};
XV = StorageProbability{3,1};

BoxPos = [1:5];
figure
hold on
for CurrentGroup = 1:5
    CurrentIndex = find(TrueIndex == CurrentGroup);
    boxplot(XV(CurrentIndex,:),'positions',BoxPos,'Widths',0.6,'Symbol','.','OutlierSize',0.03);
    BoxPos = BoxPos + 7;  
end

xlim([-1 35])
ylim([-0.05 1])
title('non-contextual Multimodal perception of EGF')
ylabel('Probability')
xlabel('[EGF] received ng/ml')

TrueIndex = StorageGroupIndex{4,1};
XV = StorageProbability{4,1};

BoxPos = [1:5];
figure
hold on
for CurrentGroup = 1:5
    CurrentIndex = find(TrueIndex == CurrentGroup);
    boxplot(XV(CurrentIndex,:),'positions',BoxPos,'Widths',0.6,'Symbol','.','OutlierSize',0.03);
    BoxPos = BoxPos + 7;  
end

xlim([-1 35])
ylim([-0.05 1])
title('Contextual Multimodal perception of EGF')
ylabel('Probability')
xlabel('[EGF] received ng/ml')


%% Figure 3E - Old

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\DoseProbabilityWithoutOne_Complete.mat');

figure
hold on

for CurrentType = 1:5
    
    TrueIndex = StorageGroupIndex{CurrentType,1};
    XV = StorageProbability{CurrentType,1};
    
    
    YStorage = [];
    
    for CurrentClass = 1:5
        
        RestClasses = setdiff(1:5,CurrentClass);
        
        diffscore = XV(:,CurrentClass) - max([XV(:,RestClasses(1)),XV(:,RestClasses(2)),XV(:,RestClasses(3)),XV(:,RestClasses(4))],[],2);
        
        % Relabel...
        
        Label = cell(size(TrueIndex,1),1);
        
        NewLabel = {'1','2','3','4','5'};
        
        for CurrentLabel = 1:5
            LabelLocation = find(TrueIndex == CurrentLabel);
            for CurrentLocation = LabelLocation'
                Label{CurrentLocation} = NewLabel{CurrentLabel};
            end
        end
        
        [X,Y,T,~,OPTROCPT,suby,subnames] = perfcurve(Label,diffscore,num2str(CurrentClass));
        
        YStorage = [YStorage,Y];
        
    end
    
   
    plot(X,mean(Y,2))
    
end

line([0 1],[0 1],'Color','K')
yticks([0 0.2 0.4 0.6 0.8 1])
xlim([0 1])
ylim([0 1])
ylabel('True positive rate')
xlabel('False positive rate')
leg = legend('Unimodal','Unimodal contextual','Multimodal','Multimodal contextual','Cellular state only');
axis square
set(leg,'position',[0.5286 0.1271 0.2882 0.1655])



%% Figure 3D and 3E - New

%%% To use different type of classifiers change fitcecoc into the different matlab function (e.g. fitcnn) %%% 

%StorageProbability = cell(5,1);
% StorageGroupIndex = cell(5,1);
% 
% HighWells = [1,2,3];
% HighMiddleWells = [4,5,6];
% MiddleWells = [7,8,9];
% LowWells = [10,19,20];
% NoneWells = [13,14,15];
% CombinationWell = [HighWells,HighMiddleWells,MiddleWells,LowWells,NoneWells];
% 
% NumIterations = 160;
% %NumTestCells = 20000;
% %NumModelCells = 40000;
% 
% LikelihoodStorageHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% 
% OriginalIndex = find(ismember(LinearIndex,CombinationWell));
% 
% 
% parfor CurrentIteration = 1:NumIterations
%     Rand1 = randi(3);
%     Rand2 = randi(3);
%     Rand3 = randi(3);
%     Rand4 = randi(3);
%     Rand5 = randi(3);
%     
%     Diff1 = setdiff(1:3,Rand1);
%     Diff2 = setdiff(1:3,Rand2);
%     Diff3 = setdiff(1:3,Rand3);
%     Diff4 = setdiff(1:3,Rand4);
%     Diff5 = setdiff(1:3,Rand5);
%     
%     TestWells = [HighWells(Rand1),HighMiddleWells(Rand2),MiddleWells(Rand3),LowWells(Rand4),NoneWells(Rand5)];   
%     ModelWells = [HighWells(Diff1),HighMiddleWells(Diff2),MiddleWells(Diff3),LowWells(Diff4),NoneWells(Diff5)];  
%     
%     % Everything with Random already...  
%     ModelIndex = [find(ismember(LinearIndex,ModelWells(1:2)));...
%         find(ismember(LinearIndex,ModelWells(3:4)));...
%         find(ismember(LinearIndex,ModelWells(5:6)));...
%         find(ismember(LinearIndex,ModelWells(7:8)));...
%         find(ismember(LinearIndex,ModelWells(9:10)))];
%     
%     GroupIndexModel = [repmat(5,size(find(ismember(LinearIndex,ModelWells(1:2))),1),1);repmat(4,size(find(ismember(LinearIndex,ModelWells(3:4))),1),1);repmat(3,size(find(ismember(LinearIndex,ModelWells(5:6))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,ModelWells(7:8))),1),1);repmat(1,size(find(ismember(LinearIndex,ModelWells(9:10))),1),1)];
%     
%     TestIndex = [find(ismember(LinearIndex,TestWells(1)));...
%         find(ismember(LinearIndex,TestWells(2)));...
%         find(ismember(LinearIndex,TestWells(3)));...
%         find(ismember(LinearIndex,TestWells(4)));...
%         find(ismember(LinearIndex,TestWells(5)))];
%     
%     GroupIndexTest = [repmat(5,size(find(ismember(LinearIndex,TestWells(1))),1),1);repmat(4,size(find(ismember(LinearIndex,TestWells(2))),1),1);repmat(3,size(find(ismember(LinearIndex,TestWells(3))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,TestWells(4))),1),1);repmat(1,size(find(ismember(LinearIndex,TestWells(5))),1),1)];
%       
%     % Get Index of RandomCells balanced classes;
%     RandomIndexModel = [datasample(find(GroupIndexModel == 5),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 4),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 3),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 2),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 1),2700,'Replace',false)];
%     
%     RandomIndexTest = [datasample(find(GroupIndexTest == 5),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 4),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 3),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 2),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 1),1400,'Replace',false)];
%     
%     
%     %RandomIndexModel = randsample(1:size(ModelIndex,1),NumModelCells,false);
%     %RandomIndexTest = randsample(1:size(TestIndex,1),NumTestCells,false);  
%     
%     MDL = fitcecoc(LogResponseData(ModelIndex(RandomIndexModel),3),GroupIndexModel(RandomIndexModel),'CrossVal','on','Holdout',0.2);
%     [PredictedLabel,PosteriorClass] = kfoldPredict(MDL);
%     
%     % FINE TILL HERE
%     
%     [SortedIndex,SortOrder] = sort(ModelIndex(RandomIndexModel),'ascend');
%     SortedPosteriorClass = PosteriorClass(SortOrder,:);
%     
%     PartOfWhole = ismember(OriginalIndex,SortedIndex);
%     
%     IntermediateHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     
%     IntermediateHigh(PartOfWhole,1) = SortedPosteriorClass(:,5); 
%     IntermediateHighMiddle(PartOfWhole,1) = SortedPosteriorClass(:,4); 
%     IntermediateMiddle(PartOfWhole,1) = SortedPosteriorClass(:,3); 
%     IntermediateLow(PartOfWhole,1) = SortedPosteriorClass(:,2); 
%     IntermediateNone(PartOfWhole,1) = SortedPosteriorClass(:,1);
%     
%     
%     LikelihoodStorageHigh(:,CurrentIteration) = IntermediateHigh; 
%     LikelihoodStorageHighMiddle(:,CurrentIteration) = IntermediateHighMiddle; 
%     LikelihoodStorageMiddle(:,CurrentIteration) = IntermediateMiddle; 
%     LikelihoodStorageLow(:,CurrentIteration) = IntermediateLow; 
%     LikelihoodStorageNone(:,CurrentIteration) = IntermediateNone; 
% %     CurrentIteration
% end
% 
% 
% XV = [nanmean(LikelihoodStorageNone,2),nanmean(LikelihoodStorageLow,2),nanmean(LikelihoodStorageMiddle,2),nanmean(LikelihoodStorageHighMiddle,2),nanmean(LikelihoodStorageHigh,2)];
% 
% TrueIndex = [repmat(5,size(find(ismember(LinearIndex,CombinationWell(1:3))),1),1);repmat(4,size(find(ismember(LinearIndex,CombinationWell(4:6))),1),1);repmat(3,size(find(ismember(LinearIndex,CombinationWell(7:9))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(10))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(13))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(14))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(15))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(11))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(12))),1),1)];
%     
% StorageProbability{1,1} = XV;
% StorageGroupIndex{1,1} = TrueIndex;
% 
% save('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PosteriorProbabilityPairwise_EGF.mat','StorageProbability','StorageGroupIndex','-v7.3')
% 
% 1
% 
% % With Features
% HighWells = [1,2,3];
% HighMiddleWells = [4,5,6];
% MiddleWells = [7,8,9];
% LowWells = [10,19,20];
% NoneWells = [13,14,15];
% CombinationWell = [HighWells,HighMiddleWells,MiddleWells,LowWells,NoneWells];
% 
% 
% LikelihoodStorageHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% 
% 
% parfor CurrentIteration = 1:NumIterations
%     
%     Rand1 = randi(3);
%     Rand2 = randi(3);
%     Rand3 = randi(3);
%     Rand4 = randi(3);
%     Rand5 = randi(3);
%     
%     Diff1 = setdiff(1:3,Rand1);
%     Diff2 = setdiff(1:3,Rand2);
%     Diff3 = setdiff(1:3,Rand3);
%     Diff4 = setdiff(1:3,Rand4);
%     Diff5 = setdiff(1:3,Rand5);
%     
%     TestWells = [HighWells(Rand1),HighMiddleWells(Rand2),MiddleWells(Rand3),LowWells(Rand4),NoneWells(Rand5)];   
%     ModelWells = [HighWells(Diff1),HighMiddleWells(Diff2),MiddleWells(Diff3),LowWells(Diff4),NoneWells(Diff5)];  
%     
%     % Everything with Random already...  
%     ModelIndex = [find(ismember(LinearIndex,ModelWells(1:2)));...
%         find(ismember(LinearIndex,ModelWells(3:4)));...
%         find(ismember(LinearIndex,ModelWells(5:6)));...
%         find(ismember(LinearIndex,ModelWells(7:8)));...
%         find(ismember(LinearIndex,ModelWells(9:10)))];
%     
%     GroupIndexModel = [repmat(5,size(find(ismember(LinearIndex,ModelWells(1:2))),1),1);repmat(4,size(find(ismember(LinearIndex,ModelWells(3:4))),1),1);repmat(3,size(find(ismember(LinearIndex,ModelWells(5:6))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,ModelWells(7:8))),1),1);repmat(1,size(find(ismember(LinearIndex,ModelWells(9:10))),1),1)];
%     
%     TestIndex = [find(ismember(LinearIndex,TestWells(1)));...
%         find(ismember(LinearIndex,TestWells(2)));...
%         find(ismember(LinearIndex,TestWells(3)));...
%         find(ismember(LinearIndex,TestWells(4)));...
%         find(ismember(LinearIndex,TestWells(5)))];
%     
%     GroupIndexTest = [repmat(5,size(find(ismember(LinearIndex,TestWells(1))),1),1);repmat(4,size(find(ismember(LinearIndex,TestWells(2))),1),1);repmat(3,size(find(ismember(LinearIndex,TestWells(3))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,TestWells(4))),1),1);repmat(1,size(find(ismember(LinearIndex,TestWells(5))),1),1)];
%       
%     % Get Index of RandomCells balanced classes;
%     RandomIndexModel = [datasample(find(GroupIndexModel == 5),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 4),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 3),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 2),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 1),2700,'Replace',false)];
%     
%     RandomIndexTest = [datasample(find(GroupIndexTest == 5),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 4),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 3),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 2),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 1),1400,'Replace',false)];
%     
%     
%     %RandomIndexModel = randsample(1:size(ModelIndex,1),NumModelCells,false);
%     %RandomIndexTest = randsample(1:size(TestIndex,1),NumTestCells,false);  
%    
% 
%     
%     MDL = fitcecoc([LogResponseData(ModelIndex(RandomIndexModel),3),PCFeatureData(ModelIndex(RandomIndexModel),:)],GroupIndexModel(RandomIndexModel),'CrossVal','on','Holdout',0.2);
%     [PredictedLabel,PosteriorClass] = kfoldPredict(MDL);
%     
%     % FINE TILL HERE
%     
%     [SortedIndex,SortOrder] = sort(ModelIndex(RandomIndexModel),'ascend');
%     SortedPosteriorClass = PosteriorClass(SortOrder,:);
%     
%     PartOfWhole = ismember(OriginalIndex,SortedIndex);
%     
%     IntermediateHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     
%     IntermediateHigh(PartOfWhole,1) = SortedPosteriorClass(:,5); 
%     IntermediateHighMiddle(PartOfWhole,1) = SortedPosteriorClass(:,4); 
%     IntermediateMiddle(PartOfWhole,1) = SortedPosteriorClass(:,3); 
%     IntermediateLow(PartOfWhole,1) = SortedPosteriorClass(:,2); 
%     IntermediateNone(PartOfWhole,1) = SortedPosteriorClass(:,1);
%     
%     
%     LikelihoodStorageHigh(:,CurrentIteration) = IntermediateHigh; 
%     LikelihoodStorageHighMiddle(:,CurrentIteration) = IntermediateHighMiddle; 
%     LikelihoodStorageMiddle(:,CurrentIteration) = IntermediateMiddle; 
%     LikelihoodStorageLow(:,CurrentIteration) = IntermediateLow; 
%     LikelihoodStorageNone(:,CurrentIteration) = IntermediateNone; 
% %     CurrentIteration
% end
% 
% 2
% XV = [nanmean(LikelihoodStorageNone,2),nanmean(LikelihoodStorageLow,2),nanmean(LikelihoodStorageMiddle,2),nanmean(LikelihoodStorageHighMiddle,2),nanmean(LikelihoodStorageHigh,2)];
% 
% TrueIndex = [repmat(5,size(find(ismember(LinearIndex,CombinationWell(1:3))),1),1);repmat(4,size(find(ismember(LinearIndex,CombinationWell(4:6))),1),1);repmat(3,size(find(ismember(LinearIndex,CombinationWell(7:9))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(10))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(13))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(14))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(15))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(11))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(12))),1),1)];
% 
% StorageProbability{2,1} = XV;
% StorageGroupIndex{2,1} = TrueIndex;
% 
% save('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PosteriorProbabilityPairwise_EGF.mat','StorageProbability','StorageGroupIndex','-v7.3')
% 
% % Only Response Network
% HighWells = [1,2,3];
% HighMiddleWells = [4,5,6];
% MiddleWells = [7,8,9];
% LowWells = [10,19,20];
% NoneWells = [13,14,15];
% CombinationWell = [HighWells,HighMiddleWells,MiddleWells,LowWells,NoneWells];
% 
% 
% FavoriteStains = [18,168,3,123,153,108,33,61,91,78];
% 
% LikelihoodStorageHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% 
% 
% parfor CurrentIteration = 1:NumIterations
%     
%    Rand1 = randi(3);
%     Rand2 = randi(3);
%     Rand3 = randi(3);
%     Rand4 = randi(3);
%     Rand5 = randi(3);
%     
%     Diff1 = setdiff(1:3,Rand1);
%     Diff2 = setdiff(1:3,Rand2);
%     Diff3 = setdiff(1:3,Rand3);
%     Diff4 = setdiff(1:3,Rand4);
%     Diff5 = setdiff(1:3,Rand5);
%     
%     TestWells = [HighWells(Rand1),HighMiddleWells(Rand2),MiddleWells(Rand3),LowWells(Rand4),NoneWells(Rand5)];   
%     ModelWells = [HighWells(Diff1),HighMiddleWells(Diff2),MiddleWells(Diff3),LowWells(Diff4),NoneWells(Diff5)];  
%     
%     % Everything with Random already...  
%     ModelIndex = [find(ismember(LinearIndex,ModelWells(1:2)));...
%         find(ismember(LinearIndex,ModelWells(3:4)));...
%         find(ismember(LinearIndex,ModelWells(5:6)));...
%         find(ismember(LinearIndex,ModelWells(7:8)));...
%         find(ismember(LinearIndex,ModelWells(9:10)))];
%     
%     GroupIndexModel = [repmat(5,size(find(ismember(LinearIndex,ModelWells(1:2))),1),1);repmat(4,size(find(ismember(LinearIndex,ModelWells(3:4))),1),1);repmat(3,size(find(ismember(LinearIndex,ModelWells(5:6))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,ModelWells(7:8))),1),1);repmat(1,size(find(ismember(LinearIndex,ModelWells(9:10))),1),1)];
%     
%     TestIndex = [find(ismember(LinearIndex,TestWells(1)));...
%         find(ismember(LinearIndex,TestWells(2)));...
%         find(ismember(LinearIndex,TestWells(3)));...
%         find(ismember(LinearIndex,TestWells(4)));...
%         find(ismember(LinearIndex,TestWells(5)))];
%     
%     GroupIndexTest = [repmat(5,size(find(ismember(LinearIndex,TestWells(1))),1),1);repmat(4,size(find(ismember(LinearIndex,TestWells(2))),1),1);repmat(3,size(find(ismember(LinearIndex,TestWells(3))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,TestWells(4))),1),1);repmat(1,size(find(ismember(LinearIndex,TestWells(5))),1),1)];
%       
%     % Get Index of RandomCells balanced classes;
%     RandomIndexModel = [datasample(find(GroupIndexModel == 5),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 4),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 3),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 2),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 1),2700,'Replace',false)];
%     
%     RandomIndexTest = [datasample(find(GroupIndexTest == 5),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 4),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 3),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 2),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 1),1400,'Replace',false)];
%     
%     
%     %RandomIndexModel = randsample(1:size(ModelIndex,1),NumModelCells,false);
%     %RandomIndexTest = randsample(1:size(TestIndex,1),NumTestCells,false);  
%     
%     
%     MDL = fitcecoc([LogResponseData(ModelIndex(RandomIndexModel),FavoriteStains)],GroupIndexModel(RandomIndexModel),'CrossVal','on','Holdout',0.2);
%     [PredictedLabel,PosteriorClass] = kfoldPredict(MDL);
%     
%     % FINE TILL HERE
%     
%     [SortedIndex,SortOrder] = sort(ModelIndex(RandomIndexModel),'ascend');
%     SortedPosteriorClass = PosteriorClass(SortOrder,:);
%     
%     PartOfWhole = ismember(OriginalIndex,SortedIndex);
%     
%     IntermediateHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     
%     IntermediateHigh(PartOfWhole,1) = SortedPosteriorClass(:,5); 
%     IntermediateHighMiddle(PartOfWhole,1) = SortedPosteriorClass(:,4); 
%     IntermediateMiddle(PartOfWhole,1) = SortedPosteriorClass(:,3); 
%     IntermediateLow(PartOfWhole,1) = SortedPosteriorClass(:,2); 
%     IntermediateNone(PartOfWhole,1) = SortedPosteriorClass(:,1);
%     
%     
%     LikelihoodStorageHigh(:,CurrentIteration) = IntermediateHigh; 
%     LikelihoodStorageHighMiddle(:,CurrentIteration) = IntermediateHighMiddle; 
%     LikelihoodStorageMiddle(:,CurrentIteration) = IntermediateMiddle; 
%     LikelihoodStorageLow(:,CurrentIteration) = IntermediateLow; 
%     LikelihoodStorageNone(:,CurrentIteration) = IntermediateNone; 
% %     CurrentIteration
% end
% 
% 3
% 
% XV = [nanmean(LikelihoodStorageNone,2),nanmean(LikelihoodStorageLow,2),nanmean(LikelihoodStorageMiddle,2),nanmean(LikelihoodStorageHighMiddle,2),nanmean(LikelihoodStorageHigh,2)];
% 
% TrueIndex = [repmat(5,size(find(ismember(LinearIndex,CombinationWell(1:3))),1),1);repmat(4,size(find(ismember(LinearIndex,CombinationWell(4:6))),1),1);repmat(3,size(find(ismember(LinearIndex,CombinationWell(7:9))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(10))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(13))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(14))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(15))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(11))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(12))),1),1)];
% 
% 
% StorageProbability{3,1} = XV;
% StorageGroupIndex{3,1} = TrueIndex;
% 
% save('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PosteriorProbabilityPairwise_EGF.mat','StorageProbability','StorageGroupIndex','-v7.3')
% 
% % With Features and all Responses
% HighWells = [1,2,3];
% HighMiddleWells = [4,5,6];
% MiddleWells = [7,8,9];
% LowWells = [10,19,20];
% NoneWells = [13,14,15];
% CombinationWell = [HighWells,HighMiddleWells,MiddleWells,LowWells,NoneWells];
% 
% 
% FavoriteStains = [18,168,3,123,153,108,33,61,91,78];
% 
% LikelihoodStorageHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% 
% 
% parfor CurrentIteration = 1:NumIterations
%     
%     Rand1 = randi(3);
%     Rand2 = randi(3);
%     Rand3 = randi(3);
%     Rand4 = randi(3);
%     Rand5 = randi(3);
%     
%     Diff1 = setdiff(1:3,Rand1);
%     Diff2 = setdiff(1:3,Rand2);
%     Diff3 = setdiff(1:3,Rand3);
%     Diff4 = setdiff(1:3,Rand4);
%     Diff5 = setdiff(1:3,Rand5);
%     
%     TestWells = [HighWells(Rand1),HighMiddleWells(Rand2),MiddleWells(Rand3),LowWells(Rand4),NoneWells(Rand5)];   
%     ModelWells = [HighWells(Diff1),HighMiddleWells(Diff2),MiddleWells(Diff3),LowWells(Diff4),NoneWells(Diff5)];  
%     
%     % Everything with Random already...  
%     ModelIndex = [find(ismember(LinearIndex,ModelWells(1:2)));...
%         find(ismember(LinearIndex,ModelWells(3:4)));...
%         find(ismember(LinearIndex,ModelWells(5:6)));...
%         find(ismember(LinearIndex,ModelWells(7:8)));...
%         find(ismember(LinearIndex,ModelWells(9:10)))];
%     
%     GroupIndexModel = [repmat(5,size(find(ismember(LinearIndex,ModelWells(1:2))),1),1);repmat(4,size(find(ismember(LinearIndex,ModelWells(3:4))),1),1);repmat(3,size(find(ismember(LinearIndex,ModelWells(5:6))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,ModelWells(7:8))),1),1);repmat(1,size(find(ismember(LinearIndex,ModelWells(9:10))),1),1)];
%     
%     TestIndex = [find(ismember(LinearIndex,TestWells(1)));...
%         find(ismember(LinearIndex,TestWells(2)));...
%         find(ismember(LinearIndex,TestWells(3)));...
%         find(ismember(LinearIndex,TestWells(4)));...
%         find(ismember(LinearIndex,TestWells(5)))];
%     
%     GroupIndexTest = [repmat(5,size(find(ismember(LinearIndex,TestWells(1))),1),1);repmat(4,size(find(ismember(LinearIndex,TestWells(2))),1),1);repmat(3,size(find(ismember(LinearIndex,TestWells(3))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,TestWells(4))),1),1);repmat(1,size(find(ismember(LinearIndex,TestWells(5))),1),1)];
%       
%     % Get Index of RandomCells balanced classes;
%     RandomIndexModel = [datasample(find(GroupIndexModel == 5),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 4),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 3),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 2),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 1),2700,'Replace',false)];
%     
%     RandomIndexTest = [datasample(find(GroupIndexTest == 5),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 4),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 3),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 2),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 1),1400,'Replace',false)];
%     
%     
%     %RandomIndexModel = randsample(1:size(ModelIndex,1),NumModelCells,false);
%     %RandomIndexTest = randsample(1:size(TestIndex,1),NumTestCells,false);  
%     
%     
%     MDL = fitcecoc([LogResponseData(ModelIndex(RandomIndexModel),FavoriteStains),PCFeatureData(ModelIndex(RandomIndexModel),:)],GroupIndexModel(RandomIndexModel),'CrossVal','on','Holdout',0.2);
%     [PredictedLabel,PosteriorClass] = kfoldPredict(MDL);
%     
%     % FINE TILL HERE
%     
%     [SortedIndex,SortOrder] = sort(ModelIndex(RandomIndexModel),'ascend');
%     SortedPosteriorClass = PosteriorClass(SortOrder,:);
%     
%     PartOfWhole = ismember(OriginalIndex,SortedIndex);
%     
%     IntermediateHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     
%     IntermediateHigh(PartOfWhole,1) = SortedPosteriorClass(:,5); 
%     IntermediateHighMiddle(PartOfWhole,1) = SortedPosteriorClass(:,4); 
%     IntermediateMiddle(PartOfWhole,1) = SortedPosteriorClass(:,3); 
%     IntermediateLow(PartOfWhole,1) = SortedPosteriorClass(:,2); 
%     IntermediateNone(PartOfWhole,1) = SortedPosteriorClass(:,1);
%     
%     
%     LikelihoodStorageHigh(:,CurrentIteration) = IntermediateHigh; 
%     LikelihoodStorageHighMiddle(:,CurrentIteration) = IntermediateHighMiddle; 
%     LikelihoodStorageMiddle(:,CurrentIteration) = IntermediateMiddle; 
%     LikelihoodStorageLow(:,CurrentIteration) = IntermediateLow; 
%     LikelihoodStorageNone(:,CurrentIteration) = IntermediateNone; 
% %     CurrentIteration
% end
% 
% 4
% 
% XV = [nanmean(LikelihoodStorageNone,2),nanmean(LikelihoodStorageLow,2),nanmean(LikelihoodStorageMiddle,2),nanmean(LikelihoodStorageHighMiddle,2),nanmean(LikelihoodStorageHigh,2)];
% 
% TrueIndex = [repmat(5,size(find(ismember(LinearIndex,CombinationWell(1:3))),1),1);repmat(4,size(find(ismember(LinearIndex,CombinationWell(4:6))),1),1);repmat(3,size(find(ismember(LinearIndex,CombinationWell(7:9))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(10))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(13))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(14))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(15))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(11))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(12))),1),1)];
% 
% 
% StorageProbability{4,1} = XV;
% StorageGroupIndex{4,1} = TrueIndex;
% 
% save('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PosteriorProbabilityPairwise_EGF.mat','StorageProbability','StorageGroupIndex','-v7.3')
% 
% 
% % Only Features
% 
% 
% % With Features
% HighWells = [1,2,3];
% HighMiddleWells = [4,5,6];
% MiddleWells = [7,8,9];
% LowWells = [10,19,20];
% NoneWells = [13,14,15];
% CombinationWell = [HighWells,HighMiddleWells,MiddleWells,LowWells,NoneWells];
% 
% 
% LikelihoodStorageHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% 
% 
% parfor CurrentIteration = 1:NumIterations
%     
%     Rand1 = randi(3);
%     Rand2 = randi(3);
%     Rand3 = randi(3);
%     Rand4 = randi(3);
%     Rand5 = randi(3);
%     
%     Diff1 = setdiff(1:3,Rand1);
%     Diff2 = setdiff(1:3,Rand2);
%     Diff3 = setdiff(1:3,Rand3);
%     Diff4 = setdiff(1:3,Rand4);
%     Diff5 = setdiff(1:3,Rand5);
%     
%     TestWells = [HighWells(Rand1),HighMiddleWells(Rand2),MiddleWells(Rand3),LowWells(Rand4),NoneWells(Rand5)];   
%     ModelWells = [HighWells(Diff1),HighMiddleWells(Diff2),MiddleWells(Diff3),LowWells(Diff4),NoneWells(Diff5)];  
%     
%     % Everything with Random already...  
%     ModelIndex = [find(ismember(LinearIndex,ModelWells(1:2)));...
%         find(ismember(LinearIndex,ModelWells(3:4)));...
%         find(ismember(LinearIndex,ModelWells(5:6)));...
%         find(ismember(LinearIndex,ModelWells(7:8)));...
%         find(ismember(LinearIndex,ModelWells(9:10)))];
%     
%     GroupIndexModel = [repmat(5,size(find(ismember(LinearIndex,ModelWells(1:2))),1),1);repmat(4,size(find(ismember(LinearIndex,ModelWells(3:4))),1),1);repmat(3,size(find(ismember(LinearIndex,ModelWells(5:6))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,ModelWells(7:8))),1),1);repmat(1,size(find(ismember(LinearIndex,ModelWells(9:10))),1),1)];
%     
%     TestIndex = [find(ismember(LinearIndex,TestWells(1)));...
%         find(ismember(LinearIndex,TestWells(2)));...
%         find(ismember(LinearIndex,TestWells(3)));...
%         find(ismember(LinearIndex,TestWells(4)));...
%         find(ismember(LinearIndex,TestWells(5)))];
%     
%     GroupIndexTest = [repmat(5,size(find(ismember(LinearIndex,TestWells(1))),1),1);repmat(4,size(find(ismember(LinearIndex,TestWells(2))),1),1);repmat(3,size(find(ismember(LinearIndex,TestWells(3))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,TestWells(4))),1),1);repmat(1,size(find(ismember(LinearIndex,TestWells(5))),1),1)];
%       
%     % Get Index of RandomCells balanced classes;
%     RandomIndexModel = [datasample(find(GroupIndexModel == 5),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 4),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 3),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 2),2700,'Replace',false);...
%         datasample(find(GroupIndexModel == 1),2700,'Replace',false)];
%     
%     RandomIndexTest = [datasample(find(GroupIndexTest == 5),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 4),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 3),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 2),1400,'Replace',false);...
%         datasample(find(GroupIndexTest == 1),1400,'Replace',false)];
%     
%     
%     %RandomIndexModel = randsample(1:size(ModelIndex,1),NumModelCells,false);
%     %RandomIndexTest = randsample(1:size(TestIndex,1),NumTestCells,false);  
%     
%     MDL = fitcecoc([PCFeatureData(ModelIndex(RandomIndexModel),:)],GroupIndexModel(RandomIndexModel),'CrossVal','on','Holdout',0.2);
%     [PredictedLabel,PosteriorClass] = kfoldPredict(MDL);
%     
%     % FINE TILL HERE
%     
%     [SortedIndex,SortOrder] = sort(ModelIndex(RandomIndexModel),'ascend');
%     SortedPosteriorClass = PosteriorClass(SortOrder,:);
%     
%     PartOfWhole = ismember(OriginalIndex,SortedIndex);
%     
%     IntermediateHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     IntermediateNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%     
%     IntermediateHigh(PartOfWhole,1) = SortedPosteriorClass(:,5); 
%     IntermediateHighMiddle(PartOfWhole,1) = SortedPosteriorClass(:,4); 
%     IntermediateMiddle(PartOfWhole,1) = SortedPosteriorClass(:,3); 
%     IntermediateLow(PartOfWhole,1) = SortedPosteriorClass(:,2); 
%     IntermediateNone(PartOfWhole,1) = SortedPosteriorClass(:,1);
%     
%     
%     LikelihoodStorageHigh(:,CurrentIteration) = IntermediateHigh; 
%     LikelihoodStorageHighMiddle(:,CurrentIteration) = IntermediateHighMiddle; 
%     LikelihoodStorageMiddle(:,CurrentIteration) = IntermediateMiddle; 
%     LikelihoodStorageLow(:,CurrentIteration) = IntermediateLow; 
%     LikelihoodStorageNone(:,CurrentIteration) = IntermediateNone; 
% %     CurrentIteration
% end
% 
% 5
% 
% XV = [nanmean(LikelihoodStorageNone,2),nanmean(LikelihoodStorageLow,2),nanmean(LikelihoodStorageMiddle,2),nanmean(LikelihoodStorageHighMiddle,2),nanmean(LikelihoodStorageHigh,2)];
% 
% TrueIndex = [repmat(5,size(find(ismember(LinearIndex,CombinationWell(1:3))),1),1);repmat(4,size(find(ismember(LinearIndex,CombinationWell(4:6))),1),1);repmat(3,size(find(ismember(LinearIndex,CombinationWell(7:9))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(10))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(13))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(14))),1),1);...
%     repmat(1,size(find(ismember(LinearIndex,CombinationWell(15))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(11))),1),1);...
%     repmat(2,size(find(ismember(LinearIndex,CombinationWell(12))),1),1)];
% 
% StorageProbability{5,1} = XV;
% StorageGroupIndex{5,1} = TrueIndex;
% 
% save('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PosteriorProbabilityPairwise_EGF.mat','StorageProbability','StorageGroupIndex','-v7.3')
% 
% StorageProbability = cell(10,1);
% StorageGroupIndex = cell(10,1);
% 
% HighWells = [1,2,3];
% HighMiddleWells = [4,5,6];
% MiddleWells = [7,8,9];
% LowWells = [10,19,20];
% NoneWells = [13,14,15];
% CombinationWell = [HighWells,HighMiddleWells,MiddleWells,LowWells,NoneWells];
% 
% 
% LikelihoodStorageHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% 
% OriginalIndex = find(ismember(LinearIndex,CombinationWell));
% FavoriteStains = [18,168,3,123,153,108,33,91,61,78];
% 
% for CurrentStainIndex = 1:size(FavoriteStains,2)
%     CurrentStain = FavoriteStains(1,CurrentStainIndex);
%     parfor CurrentIteration = 1:NumIterations
%         Rand1 = randi(3);
%         Rand2 = randi(3);
%         Rand3 = randi(3);
%         Rand4 = randi(3);
%         Rand5 = randi(3);
%         
%         Diff1 = setdiff(1:3,Rand1);
%         Diff2 = setdiff(1:3,Rand2);
%         Diff3 = setdiff(1:3,Rand3);
%         Diff4 = setdiff(1:3,Rand4);
%         Diff5 = setdiff(1:3,Rand5);
%         
%         TestWells = [HighWells(Rand1),HighMiddleWells(Rand2),MiddleWells(Rand3),LowWells(Rand4),NoneWells(Rand5)];
%         ModelWells = [HighWells(Diff1),HighMiddleWells(Diff2),MiddleWells(Diff3),LowWells(Diff4),NoneWells(Diff5)];
%         
%         % Everything with Random already...
%         ModelIndex = [find(ismember(LinearIndex,ModelWells(1:2)));...
%             find(ismember(LinearIndex,ModelWells(3:4)));...
%             find(ismember(LinearIndex,ModelWells(5:6)));...
%             find(ismember(LinearIndex,ModelWells(7:8)));...
%             find(ismember(LinearIndex,ModelWells(9:10)))];
%         
%         GroupIndexModel = [repmat(5,size(find(ismember(LinearIndex,ModelWells(1:2))),1),1);repmat(4,size(find(ismember(LinearIndex,ModelWells(3:4))),1),1);repmat(3,size(find(ismember(LinearIndex,ModelWells(5:6))),1),1);...
%             repmat(2,size(find(ismember(LinearIndex,ModelWells(7:8))),1),1);repmat(1,size(find(ismember(LinearIndex,ModelWells(9:10))),1),1)];
%         
%         TestIndex = [find(ismember(LinearIndex,TestWells(1)));...
%             find(ismember(LinearIndex,TestWells(2)));...
%             find(ismember(LinearIndex,TestWells(3)));...
%             find(ismember(LinearIndex,TestWells(4)));...
%             find(ismember(LinearIndex,TestWells(5)))];
%         
%         GroupIndexTest = [repmat(5,size(find(ismember(LinearIndex,TestWells(1))),1),1);repmat(4,size(find(ismember(LinearIndex,TestWells(2))),1),1);repmat(3,size(find(ismember(LinearIndex,TestWells(3))),1),1);...
%             repmat(2,size(find(ismember(LinearIndex,TestWells(4))),1),1);repmat(1,size(find(ismember(LinearIndex,TestWells(5))),1),1)];
%         
%         % Get Index of RandomCells balanced classes;
%         RandomIndexModel = [datasample(find(GroupIndexModel == 5),2700,'Replace',false);...
%             datasample(find(GroupIndexModel == 4),2700,'Replace',false);...
%             datasample(find(GroupIndexModel == 3),2700,'Replace',false);...
%             datasample(find(GroupIndexModel == 2),2700,'Replace',false);...
%             datasample(find(GroupIndexModel == 1),2700,'Replace',false)];
%         
%         RandomIndexTest = [datasample(find(GroupIndexTest == 5),1400,'Replace',false);...
%             datasample(find(GroupIndexTest == 4),1400,'Replace',false);...
%             datasample(find(GroupIndexTest == 3),1400,'Replace',false);...
%             datasample(find(GroupIndexTest == 2),1400,'Replace',false);...
%             datasample(find(GroupIndexTest == 1),1400,'Replace',false)];
%         
%         
%         %RandomIndexModel = randsample(1:size(ModelIndex,1),NumModelCells,false);
%         %RandomIndexTest = randsample(1:size(TestIndex,1),NumTestCells,false);
%         
% 
%         
%         MDL = fitcecoc(LogResponseData(ModelIndex(RandomIndexModel),CurrentStain),GroupIndexModel(RandomIndexModel),'CrossVal','on','Holdout',0.2);
%         [PredictedLabel,PosteriorClass] = kfoldPredict(MDL);
%     
%     % FINE TILL HERE
%     
%     [SortedIndex,SortOrder] = sort(ModelIndex(RandomIndexModel),'ascend');
%     SortedPosteriorClass = PosteriorClass(SortOrder,:);
%         
%         PartOfWhole = ismember(OriginalIndex,SortedIndex);
%         
%         IntermediateHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         IntermediateHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         IntermediateMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         IntermediateLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         IntermediateNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         
%         IntermediateHigh(PartOfWhole,1) = SortedPosteriorClass(:,5);
%         IntermediateHighMiddle(PartOfWhole,1) = SortedPosteriorClass(:,4);
%         IntermediateMiddle(PartOfWhole,1) = SortedPosteriorClass(:,3);
%         IntermediateLow(PartOfWhole,1) = SortedPosteriorClass(:,2);
%         IntermediateNone(PartOfWhole,1) = SortedPosteriorClass(:,1);
%         
%         
%         LikelihoodStorageHigh(:,CurrentIteration) = IntermediateHigh;
%         LikelihoodStorageHighMiddle(:,CurrentIteration) = IntermediateHighMiddle;
%         LikelihoodStorageMiddle(:,CurrentIteration) = IntermediateMiddle;
%         LikelihoodStorageLow(:,CurrentIteration) = IntermediateLow;
%         LikelihoodStorageNone(:,CurrentIteration) = IntermediateNone;
% %         CurrentIteration
%     end
%     
%     
%     XV = [nanmean(LikelihoodStorageNone,2),nanmean(LikelihoodStorageLow,2),nanmean(LikelihoodStorageMiddle,2),nanmean(LikelihoodStorageHighMiddle,2),nanmean(LikelihoodStorageHigh,2)];
%     
%     TrueIndex = [repmat(5,size(find(ismember(LinearIndex,CombinationWell(1:3))),1),1);repmat(4,size(find(ismember(LinearIndex,CombinationWell(4:6))),1),1);repmat(3,size(find(ismember(LinearIndex,CombinationWell(7:9))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,CombinationWell(10))),1),1);...
%         repmat(1,size(find(ismember(LinearIndex,CombinationWell(13))),1),1);...
%         repmat(1,size(find(ismember(LinearIndex,CombinationWell(14))),1),1);...
%         repmat(1,size(find(ismember(LinearIndex,CombinationWell(15))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,CombinationWell(11))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,CombinationWell(12))),1),1)];
%     
%     StorageProbability{CurrentStainIndex,1} = XV;
%     StorageGroupIndex{CurrentStainIndex,1} = TrueIndex;
%     
% end
% 
% save('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PosteriorProbabilityPairwise_EGF.mat','StorageProbability','StorageGroupIndex','-v7.3')
% 
% 6
% 
% StorageProbability = cell(10,1);
% StorageGroupIndex = cell(10,1);
% 
% HighWells = [1,2,3];
% HighMiddleWells = [4,5,6];
% MiddleWells = [7,8,9];
% LowWells = [10,19,20];
% NoneWells = [13,14,15];
% CombinationWell = [HighWells,HighMiddleWells,MiddleWells,LowWells,NoneWells];
% 
% 
% LikelihoodStorageHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% LikelihoodStorageNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),NumIterations);
% 
% OriginalIndex = find(ismember(LinearIndex,CombinationWell));
% FavoriteStains = [18,168,3,123,153,108,33,91,61,78];
% 
% for CurrentStainIndex = 1:size(FavoriteStains,2)
%     CurrentStain = FavoriteStains(1,CurrentStainIndex);
%     parfor CurrentIteration = 1:NumIterations
%         Rand1 = randi(3);
%         Rand2 = randi(3);
%         Rand3 = randi(3);
%         Rand4 = randi(3);
%         Rand5 = randi(3);
%         
%         Diff1 = setdiff(1:3,Rand1);
%         Diff2 = setdiff(1:3,Rand2);
%         Diff3 = setdiff(1:3,Rand3);
%         Diff4 = setdiff(1:3,Rand4);
%         Diff5 = setdiff(1:3,Rand5);
%         
%         TestWells = [HighWells(Rand1),HighMiddleWells(Rand2),MiddleWells(Rand3),LowWells(Rand4),NoneWells(Rand5)];
%         ModelWells = [HighWells(Diff1),HighMiddleWells(Diff2),MiddleWells(Diff3),LowWells(Diff4),NoneWells(Diff5)];
%         
%         % Everything with Random already...
%         ModelIndex = [find(ismember(LinearIndex,ModelWells(1:2)));...
%             find(ismember(LinearIndex,ModelWells(3:4)));...
%             find(ismember(LinearIndex,ModelWells(5:6)));...
%             find(ismember(LinearIndex,ModelWells(7:8)));...
%             find(ismember(LinearIndex,ModelWells(9:10)))];
%         
%         GroupIndexModel = [repmat(5,size(find(ismember(LinearIndex,ModelWells(1:2))),1),1);repmat(4,size(find(ismember(LinearIndex,ModelWells(3:4))),1),1);repmat(3,size(find(ismember(LinearIndex,ModelWells(5:6))),1),1);...
%             repmat(2,size(find(ismember(LinearIndex,ModelWells(7:8))),1),1);repmat(1,size(find(ismember(LinearIndex,ModelWells(9:10))),1),1)];
%         
%         TestIndex = [find(ismember(LinearIndex,TestWells(1)));...
%             find(ismember(LinearIndex,TestWells(2)));...
%             find(ismember(LinearIndex,TestWells(3)));...
%             find(ismember(LinearIndex,TestWells(4)));...
%             find(ismember(LinearIndex,TestWells(5)))];
%         
%         GroupIndexTest = [repmat(5,size(find(ismember(LinearIndex,TestWells(1))),1),1);repmat(4,size(find(ismember(LinearIndex,TestWells(2))),1),1);repmat(3,size(find(ismember(LinearIndex,TestWells(3))),1),1);...
%             repmat(2,size(find(ismember(LinearIndex,TestWells(4))),1),1);repmat(1,size(find(ismember(LinearIndex,TestWells(5))),1),1)];
%         
%         % Get Index of RandomCells balanced classes;
%         RandomIndexModel = [datasample(find(GroupIndexModel == 5),2700,'Replace',false);...
%             datasample(find(GroupIndexModel == 4),2700,'Replace',false);...
%             datasample(find(GroupIndexModel == 3),2700,'Replace',false);...
%             datasample(find(GroupIndexModel == 2),2700,'Replace',false);...
%             datasample(find(GroupIndexModel == 1),2700,'Replace',false)];
%         
%         RandomIndexTest = [datasample(find(GroupIndexTest == 5),1400,'Replace',false);...
%             datasample(find(GroupIndexTest == 4),1400,'Replace',false);...
%             datasample(find(GroupIndexTest == 3),1400,'Replace',false);...
%             datasample(find(GroupIndexTest == 2),1400,'Replace',false);...
%             datasample(find(GroupIndexTest == 1),1400,'Replace',false)];
%         
%         
%         %RandomIndexModel = randsample(1:size(ModelIndex,1),NumModelCells,false);
%         %RandomIndexTest = randsample(1:size(TestIndex,1),NumTestCells,false);
%         
%         
%         MDL = fitcecoc([LogResponseData(ModelIndex(RandomIndexModel),CurrentStain),PCFeatureData(ModelIndex(RandomIndexModel),:)],GroupIndexModel(RandomIndexModel),'CrossVal','on','Holdout',0.2);
%         [PredictedLabel,PosteriorClass] = kfoldPredict(MDL);
%     
%     % FINE TILL HERE
%     
%     [SortedIndex,SortOrder] = sort(ModelIndex(RandomIndexModel),'ascend');
%     SortedPosteriorClass = PosteriorClass(SortOrder,:);
%         
%         PartOfWhole = ismember(OriginalIndex,SortedIndex);
%         
%         IntermediateHigh = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         IntermediateHighMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         IntermediateMiddle = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         IntermediateLow = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         IntermediateNone = NaN(size(find(ismember(LinearIndex,CombinationWell)),1),1);
%         
%         IntermediateHigh(PartOfWhole,1) = SortedPosteriorClass(:,5);
%         IntermediateHighMiddle(PartOfWhole,1) = SortedPosteriorClass(:,4);
%         IntermediateMiddle(PartOfWhole,1) = SortedPosteriorClass(:,3);
%         IntermediateLow(PartOfWhole,1) = SortedPosteriorClass(:,2);
%         IntermediateNone(PartOfWhole,1) = SortedPosteriorClass(:,1);
%         
%         
%         LikelihoodStorageHigh(:,CurrentIteration) = IntermediateHigh;
%         LikelihoodStorageHighMiddle(:,CurrentIteration) = IntermediateHighMiddle;
%         LikelihoodStorageMiddle(:,CurrentIteration) = IntermediateMiddle;
%         LikelihoodStorageLow(:,CurrentIteration) = IntermediateLow;
%         LikelihoodStorageNone(:,CurrentIteration) = IntermediateNone;
% %         CurrentIteration
%     end
%     
%     
%     XV = [nanmean(LikelihoodStorageNone,2),nanmean(LikelihoodStorageLow,2),nanmean(LikelihoodStorageMiddle,2),nanmean(LikelihoodStorageHighMiddle,2),nanmean(LikelihoodStorageHigh,2)];
%     
%     TrueIndex = [repmat(5,size(find(ismember(LinearIndex,CombinationWell(1:3))),1),1);repmat(4,size(find(ismember(LinearIndex,CombinationWell(4:6))),1),1);repmat(3,size(find(ismember(LinearIndex,CombinationWell(7:9))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,CombinationWell(10))),1),1);...
%         repmat(1,size(find(ismember(LinearIndex,CombinationWell(13))),1),1);...
%         repmat(1,size(find(ismember(LinearIndex,CombinationWell(14))),1),1);...
%         repmat(1,size(find(ismember(LinearIndex,CombinationWell(15))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,CombinationWell(11))),1),1);...
%         repmat(2,size(find(ismember(LinearIndex,CombinationWell(12))),1),1)];
%     
%     StorageProbability{CurrentStainIndex,1} = XV;
%     StorageGroupIndex{CurrentStainIndex,1} = TrueIndex;
%     
% end
% 
% 7
% 
% save('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PosteriorProbabilityPairwise_EGF.mat','StorageProbability','StorageGroupIndex','-v7.3')


load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\PosteriorProbabilityPairwise_EGF.mat');
% Pairwise Unimodal non-contextual
TrueIndex = StorageGroupIndex{1,1};
XV = StorageProbability{1,1};
[~,PredictedIndex] = max(XV,[],2);

MinNumber = zeros(5,1);

for CurrentClass = 1:5
    MinNumber(CurrentClass,1) = numel(find(TrueIndex == CurrentClass));    
end

MinNumber = min(MinNumber);

PairwiseComparison = zeros(5,5);

for CurrentClass = 1:5
    ClassOne = find(TrueIndex == CurrentClass);
    RandomSampleOne = datasample(ClassOne,MinNumber,'replace',false);
    TrueClassOne = TrueIndex(RandomSampleOne,1);
    PredictedClassOne = PredictedIndex(RandomSampleOne,1);
    for CurrentCounterClass = 1:5
        ClassTwo = find(TrueIndex == CurrentCounterClass);
        RandomSampleTwo = datasample(ClassTwo,MinNumber,'replace',false);
        TrueClassTwo = TrueIndex(RandomSampleTwo,1);
        PredictedClassTwo = PredictedIndex(RandomSampleTwo,1);
        TrueCalc = [TrueClassOne;TrueClassTwo];
        PredictedCalc = [PredictedClassOne;PredictedClassTwo];
        PairwiseComparison(CurrentClass,CurrentCounterClass) = mutualinfo(TrueCalc,PredictedCalc);        
    end
end

PlotMatrix = [flipud(PairwiseComparison),zeros(5,1);zeros(1,6)];
figure
pcolor(PlotMatrix);
caxis([0 log2(2)])
axis image
colormap(brewermap(500,'reds'));
h = colorbar;
set(get(h,'label'),'string','Decoding Information (bit)');
xticks([1.5 2.5 3.5 4.5 5.5])
yticks([1.5 2.5 3.5 4.5 5.5])
xlabel('EGF (ng/ml)')
ylabel('EGF (ng/ml)')
xticklabels({'0','6.25','10','25','100'})
yticklabels({'100','25','10','5','0'})

title('Pairwise Non-contextual Unimodal perception');


TrueIndexCalc = [];
PredictedIndexCalc = [];

ComparisonFull = zeros(5,1);

for CurrentClass = 1:5
    ClassOne = find(TrueIndex == CurrentClass);
    RandomSampleOne = datasample(ClassOne,MinNumber,'replace',false);
    TrueClassOne = TrueIndex(RandomSampleOne,1);
    PredictedClassOne = PredictedIndex(RandomSampleOne,1);
    TrueIndexCalc = [TrueIndexCalc;TrueClassOne];
    PredictedIndexCalc = [PredictedIndexCalc;PredictedClassOne];
    
    
end

ComparisonFull(2,1) =  mutualinfo(TrueIndexCalc,PredictedIndexCalc);    

% Pairwise Unimodal non-contextual
TrueIndex = StorageGroupIndex{2,1};
XV = StorageProbability{2,1};
[~,PredictedIndex] = max(XV,[],2);

MinNumber = zeros(5,1);

for CurrentClass = 1:5
    MinNumber(CurrentClass,1) = numel(find(TrueIndex == CurrentClass));    
end

MinNumber = min(MinNumber);

PairwiseComparison = zeros(5,5);

for CurrentClass = 1:5
    ClassOne = find(TrueIndex == CurrentClass);
    RandomSampleOne = datasample(ClassOne,MinNumber,'replace',false);
    TrueClassOne = TrueIndex(RandomSampleOne,1);
    PredictedClassOne = PredictedIndex(RandomSampleOne,1);
    for CurrentCounterClass = 1:5
        ClassTwo = find(TrueIndex == CurrentCounterClass);
        RandomSampleTwo = datasample(ClassTwo,MinNumber,'replace',false);
        TrueClassTwo = TrueIndex(RandomSampleTwo,1);
        PredictedClassTwo = PredictedIndex(RandomSampleTwo,1);
        TrueCalc = [TrueClassOne;TrueClassTwo];
        PredictedCalc = [PredictedClassOne;PredictedClassTwo];
        PairwiseComparison(CurrentClass,CurrentCounterClass) = mutualinfo(TrueCalc,PredictedCalc);        
    end
end

PlotMatrix = [flipud(PairwiseComparison),zeros(5,1);zeros(1,6)];
figure
pcolor(PlotMatrix);
caxis([0 log2(2)])
axis image
colormap(brewermap(500,'reds'));
h = colorbar;
set(get(h,'label'),'string','Decoding Information (bit)');
xticks([1.5 2.5 3.5 4.5 5.5])
yticks([1.5 2.5 3.5 4.5 5.5])
xlabel('EGF (ng/ml)')
ylabel('EGF (ng/ml)')
xticklabels({'0','6.25','10','25','100'})
yticklabels({'100','25','10','5','0'})

title('Pairwise Contextual Unimodal perception');


TrueIndexCalc = [];
PredictedIndexCalc = [];


for CurrentClass = 1:5
    ClassOne = find(TrueIndex == CurrentClass);
    RandomSampleOne = datasample(ClassOne,MinNumber,'replace',false);
    TrueClassOne = TrueIndex(RandomSampleOne,1);
    PredictedClassOne = PredictedIndex(RandomSampleOne,1);
    TrueIndexCalc = [TrueIndexCalc;TrueClassOne];
    PredictedIndexCalc = [PredictedIndexCalc;PredictedClassOne];
    
    
end

ComparisonFull(3,1) =  mutualinfo(TrueIndexCalc,PredictedIndexCalc);  

% Pairwise Unimodal non-contextual
TrueIndex = StorageGroupIndex{3,1};
XV = StorageProbability{3,1};
[~,PredictedIndex] = max(XV,[],2);

MinNumber = zeros(5,1);

for CurrentClass = 1:5
    MinNumber(CurrentClass,1) = numel(find(TrueIndex == CurrentClass));    
end

MinNumber = min(MinNumber);

PairwiseComparison = zeros(5,5);

for CurrentClass = 1:5
    ClassOne = find(TrueIndex == CurrentClass);
    RandomSampleOne = datasample(ClassOne,MinNumber,'replace',false);
    TrueClassOne = TrueIndex(RandomSampleOne,1);
    PredictedClassOne = PredictedIndex(RandomSampleOne,1);
    for CurrentCounterClass = 1:5
        ClassTwo = find(TrueIndex == CurrentCounterClass);
        RandomSampleTwo = datasample(ClassTwo,MinNumber,'replace',false);
        TrueClassTwo = TrueIndex(RandomSampleTwo,1);
        PredictedClassTwo = PredictedIndex(RandomSampleTwo,1);
        TrueCalc = [TrueClassOne;TrueClassTwo];
        PredictedCalc = [PredictedClassOne;PredictedClassTwo];
        PairwiseComparison(CurrentClass,CurrentCounterClass) = mutualinfo(TrueCalc,PredictedCalc);        
    end
end

PlotMatrix = [flipud(PairwiseComparison),zeros(5,1);zeros(1,6)];
figure
pcolor(PlotMatrix);
caxis([0 log2(2)])
axis image
colormap(brewermap(500,'reds'));
h = colorbar;
set(get(h,'label'),'string','Decoding Information (bit)');
xticks([1.5 2.5 3.5 4.5 5.5])
yticks([1.5 2.5 3.5 4.5 5.5])
xlabel('EGF (ng/ml)')
ylabel('EGF (ng/ml)')
xticklabels({'0','6.25','10','25','100'})
yticklabels({'100','25','10','5','0'})


title('Pairwise Non-contextual Multimodal perception');


TrueIndexCalc = [];
PredictedIndexCalc = [];


for CurrentClass = 1:5
    ClassOne = find(TrueIndex == CurrentClass);
    RandomSampleOne = datasample(ClassOne,MinNumber,'replace',false);
    TrueClassOne = TrueIndex(RandomSampleOne,1);
    PredictedClassOne = PredictedIndex(RandomSampleOne,1);
    TrueIndexCalc = [TrueIndexCalc;TrueClassOne];
    PredictedIndexCalc = [PredictedIndexCalc;PredictedClassOne];
    
    
end

ComparisonFull(4,1) =  mutualinfo(TrueIndexCalc,PredictedIndexCalc);  

% Pairwise Unimodal non-contextual
TrueIndex = StorageGroupIndex{4,1};
XV = StorageProbability{4,1};
[~,PredictedIndex] = max(XV,[],2);

MinNumber = zeros(5,1);

for CurrentClass = 1:5
    MinNumber(CurrentClass,1) = numel(find(TrueIndex == CurrentClass));    
end

MinNumber = min(MinNumber);

PairwiseComparison = zeros(5,5);

for CurrentClass = 1:5
    ClassOne = find(TrueIndex == CurrentClass);
    RandomSampleOne = datasample(ClassOne,MinNumber,'replace',false);
    TrueClassOne = TrueIndex(RandomSampleOne,1);
    PredictedClassOne = PredictedIndex(RandomSampleOne,1);
    for CurrentCounterClass = 1:5
        ClassTwo = find(TrueIndex == CurrentCounterClass);
        RandomSampleTwo = datasample(ClassTwo,MinNumber,'replace',false);
        TrueClassTwo = TrueIndex(RandomSampleTwo,1);
        PredictedClassTwo = PredictedIndex(RandomSampleTwo,1);
        TrueCalc = [TrueClassOne;TrueClassTwo];
        PredictedCalc = [PredictedClassOne;PredictedClassTwo];
        PairwiseComparison(CurrentClass,CurrentCounterClass) = mutualinfo(TrueCalc,PredictedCalc);        
    end
end

PlotMatrix = [flipud(PairwiseComparison),zeros(5,1);zeros(1,6)];
figure
pcolor(PlotMatrix);
caxis([0 log2(2)])
axis image
colormap(brewermap(500,'reds'));
h = colorbar;
set(get(h,'label'),'string','Decoding Information (bit)');
xticks([1.5 2.5 3.5 4.5 5.5])
yticks([1.5 2.5 3.5 4.5 5.5])
xlabel('EGF (ng/ml)')
ylabel('EGF (ng/ml)')
xticklabels({'0','6.25','10','25','100'})
yticklabels({'100','25','10','5','0'})


title('Pairwise Contextual Multimodal perception');


TrueIndexCalc = [];
PredictedIndexCalc = [];


for CurrentClass = 1:5
    ClassOne = find(TrueIndex == CurrentClass);
    RandomSampleOne = datasample(ClassOne,MinNumber,'replace',false);
    TrueClassOne = TrueIndex(RandomSampleOne,1);
    PredictedClassOne = PredictedIndex(RandomSampleOne,1);
    TrueIndexCalc = [TrueIndexCalc;TrueClassOne];
    PredictedIndexCalc = [PredictedIndexCalc;PredictedClassOne];
    
    
end

ComparisonFull(5,1) =  mutualinfo(TrueIndexCalc,PredictedIndexCalc);  


% Pairwise Unimodal non-contextual
TrueIndex = StorageGroupIndex{5,1};
XV = StorageProbability{5,1};
[~,PredictedIndex] = max(XV,[],2);

MinNumber = zeros(5,1);

for CurrentClass = 1:5
    MinNumber(CurrentClass,1) = numel(find(TrueIndex == CurrentClass));    
end

MinNumber = min(MinNumber);

PairwiseComparison = zeros(5,5);

for CurrentClass = 1:5
    ClassOne = find(TrueIndex == CurrentClass);
    RandomSampleOne = datasample(ClassOne,MinNumber,'replace',false);
    TrueClassOne = TrueIndex(RandomSampleOne,1);
    PredictedClassOne = PredictedIndex(RandomSampleOne,1);
    for CurrentCounterClass = 1:5
        ClassTwo = find(TrueIndex == CurrentCounterClass);
        RandomSampleTwo = datasample(ClassTwo,MinNumber,'replace',false);
        TrueClassTwo = TrueIndex(RandomSampleTwo,1);
        PredictedClassTwo = PredictedIndex(RandomSampleTwo,1);
        TrueCalc = [TrueClassOne;TrueClassTwo];
        PredictedCalc = [PredictedClassOne;PredictedClassTwo];
        PairwiseComparison(CurrentClass,CurrentCounterClass) = mutualinfo(TrueCalc,PredictedCalc);        
    end
end

PlotMatrix = [flipud(PairwiseComparison),zeros(5,1);zeros(1,6)];
figure
pcolor(PlotMatrix);
caxis([0 log2(2)])
axis image
colormap(brewermap(500,'reds'));
h = colorbar;
set(get(h,'label'),'string','Decoding Information (bit)');
xticks([1.5 2.5 3.5 4.5 5.5])
yticks([1.5 2.5 3.5 4.5 5.5])
xlabel('EGF (ng/ml)')
ylabel('EGF (ng/ml)')
xticklabels({'0','6.25','10','25','100'})
yticklabels({'100','25','10','5','0'})

title('Pairwise Only Context');

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\MutualInformation_FullClassifier.mat');

figure
bar(FullDoseClassifier)
ylim([0 log2(5)]);
ylabel('Decoding Information (bit)')
xticklabels({'Context','Uni-non','Uni-Cont','Multi-non','Multi-Cont'})


%% Figure 3F - New

% load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\Data_3.mat')
% addpath(genpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\'));
% javaaddpath('Z:\bkramer\190218_184A1_EGF\Data_Analysis\Functions\umapFileExchange (1.2.1)\umap\umap.jar');
% 
% 
% %%% To use different type of classifiers change fitctree into the different matlab function (e.g. fitcnn) %%% 
% 
% EGFStorage = {'0nM','0.78nM','3.9nM'};
% DrugStorage = {'No.Drug','AKT.2','MEK.2','MEK.AKT.2','Cell.State'};
% TimeStorage = {'5min'};
% 
% 
% IndicatorIndex = 1;
% ResponseStains = [3,40,70];
% 
% StoragePredicted = cell(5,1);
% StorageTrue = cell(5,1);
% StorageMutualInformation = zeros(6,1);
% 
% 
% for CurrentDrug = 1:size(DrugStorage,2)
%     ModelResponseData = [];
%     ModelFeatureData = [];
%     ModelIndex = [];
%     for CurrentEGF = 1:size(EGFStorage,2)
% 
% 
% 
%         EGFString = EGFStorage{1,CurrentEGF};
%         TimeString = TimeStorage{1,1};
%         DrugString = DrugStorage{1,CurrentDrug};
% 
% 
%         EGF = find(contains(ConditionNames,EGFString));
%         Time = find(contains(ConditionNames,TimeString));
%         Drug = find(contains(ConditionNames,DrugString));
% 
%         FirstI = intersect(EGF,Time);
%         Wells = intersect(FirstI,Drug);
% 
%         NewWells = zeros(2,1);
% 
%         NewWells(1) = Wells(end-1);
%         NewWells(2) = Wells(end);
% 
%         Wells = NewWells;
% 
%         WellIndex = find(ismember(LinearIndex,Wells));
% 
%         WellFeatureData = zscore(PCFeatureData(WellIndex,:));
%         WellResponseData = log2(ResponseData(WellIndex,ResponseStains));
% 
%         ModelResponseData = [ModelResponseData;WellResponseData];
%         ModelFeatureData = [ModelFeatureData;WellFeatureData];
%         ModelIndex = [ModelIndex;repmat(CurrentEGF,numel(WellIndex),1)];
%     end
% 
%     MDL = fitctree([ModelResponseData,ModelFeatureData],ModelIndex,'Kfold',3);
%     PredictedClass = kfoldPredict(MDL);
% 
% 
%     StoragePredicted{CurrentDrug,1} = PredictedClass;
%     StorageTrue{CurrentDrug,1} = ModelIndex;
%     
%     
%     StorageMutualInformation(CurrentDrug,1) = mutualinfo(PredictedClass,ModelIndex);
% 
% end
% 
% 
% save('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\DoseClassifier_EGF_Drug.mat','StorageMutualInformation','-v7.3');

load('Z:\bkramer\190218_184A1_EGF\Data_Analysis\CleanCode\DoseClassifier_EGF_Drug.mat');

figure
bar(StorageMutualInformation)
title('Perception in Presence of signaling inhibitors');
yticks([0 log2(2) log2(3)])
ylim([0 log2(3)])
yticklabels({'log2(1)','log2(2)','log2(3)'});
xticklabels({'DMSO','AKT inhib','MEK inhib','both inhib','DYRK3 inhib','Cell State only'})

